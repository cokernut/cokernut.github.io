<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cokernut</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cokernut.top/"/>
  <updated>2016-12-09T02:09:39.663Z</updated>
  <id>http://cokernut.top/</id>
  
  <author>
    <name>Cokernut</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Native使用Android原生模块</title>
    <link href="http://cokernut.top/2016/12/10/ReactNative/React%20Native%E4%BD%BF%E7%94%A8Android%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97/"/>
    <id>http://cokernut.top/2016/12/10/ReactNative/React Native使用Android原生模块/</id>
    <published>2016-12-09T16:00:00.000Z</published>
    <updated>2016-12-09T02:09:39.663Z</updated>
    
    <content type="html"><![CDATA[<p>React Native使用Android原生模块<br><a id="more"></a></p>
<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native使用Android原生模块&lt;br&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://cokernut.top/categories/React-Native/"/>
    
    
      <category term="Android" scheme="http://cokernut.top/tags/Android/"/>
    
      <category term="React Native" scheme="http://cokernut.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 学习笔记--进阶（五）--性能、升级版本、特定平台代码</title>
    <link href="http://cokernut.top/2016/12/09/ReactNative/React%20Native%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%94%EF%BC%89--%E6%80%A7%E8%83%BD%E3%80%81%E5%8D%87%E7%BA%A7%E3%80%81%E7%89%B9%E5%AE%9A%E5%B9%B3%E5%8F%B0%E4%BB%A3%E7%A0%81/"/>
    <id>http://cokernut.top/2016/12/09/ReactNative/React Native学习笔记--进阶（五）--性能、升级、特定平台代码/</id>
    <published>2016-12-08T16:00:00.000Z</published>
    <updated>2016-12-08T09:45:04.689Z</updated>
    
    <content type="html"><![CDATA[<p>React Native 进阶（五）–性能、升级版本、特定平台代码<br><a id="more"></a></p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>使用React Native替代基于WebView的框架来开发App的一个强有力的理由，就是为了使App可以达到每秒60帧（足够流畅），并且能有类似原生App的外观和手感。但是，还是有一些地方有所欠缺，以及在某些场合React Native还不能够替你决定如何进行优化，因此人工的干预依然是必要的。 </p>
<h3 id="关于“帧”你所需要知道的"><a href="#关于“帧”你所需要知道的" class="headerlink" title="关于“帧”你所需要知道的"></a>关于“帧”你所需要知道的</h3><p>视频中逼真的动态效果其实是一种幻觉，这种幻觉是由一组静态的图片以一个稳定的速度快速变化所产生的。我们把这组图片中的每一张图片叫做一帧，而每秒钟显示的帧数直接的影响了视频（或者说用户界面）的流畅度和真实感。iOS设备提供了每秒60的帧率，这就留给了开发者和UI系统大约16.67ms来完成生成一张静态图片（帧）所需要的所有工作。如果在这分派的16.67ms之内没有能够完成这些工作，就会引发‘丢帧’的后果，使界面表现的不够流畅。</p>
<p>调出你应用的开发菜单，打开Show FPS Monitor. 你会注意到有两个不同的帧率（JS和UI）：</p>
<h4 id="JavaScript-帧率"><a href="#JavaScript-帧率" class="headerlink" title="JavaScript 帧率"></a>JavaScript 帧率</h4><p>对大多数React Native应用来说，业务逻辑是运行在JavaScript线程上的。这是React应用所在的线程，也是发生API调用，以及处理触摸事件等操作的线程。更新数据到原生支持的视图是批量进行的，并且在事件循环每进行一次的时候被发送到原生端，这一步通常会在一帧时间结束之前处理完（一切顺利的话）。如果JavaScript线程有一帧没有及时响应，就被认为发生了一次丢帧。 例如：你在一个复杂应用的根组件上调用了this.setState，从而导致一次开销很大的子组件树的重绘，可想而知，这可能会花费200ms也就是整整12帧的丢失。此时，任何由JavaScript控制的动画都会卡住。只要卡顿超过100ms，用户就会明显的感觉到。</p>
<p>这种情况经常发生在Navigator的切换过程中：当你push一个新的路由时，JavaScript需要绘制新场景所需的所有组件，以发送正确的命令给原生端去创建视图。由于切换是由JavaScript线程所控制，因此经常会占用若干帧的时间，引起一些卡顿。有的时候，组件会在componentDidMount函数中做一些额外的事情，这甚至可能会导致页面切换过程中多达一秒的卡顿。</p>
<p>另一个例子是触摸事件的响应：如果你正在JavaScript线程处理一个跨越多个帧的工作，你可能会注意到TouchableOpacity的响应被延迟了。这是因为JavaScript线程太忙了，不能够处理主线程发送过来的原始触摸事件。结果TouchableOpacity就不能及时响应这些事件并命令主线程的页面去调整透明度了。</p>
<h4 id="主线程-也即UI线程-帧率"><a href="#主线程-也即UI线程-帧率" class="headerlink" title="主线程 (也即UI线程) 帧率"></a>主线程 (也即UI线程) 帧率</h4><p>很多人会注意到，NavigatorIOS的性能要比Navigator好的多。原因就是它的切换动画是完全在主线程上执行的，因此不会被JavaScript线程上的掉帧所影响。</p>
<p>同样，当JavaScript线程卡住的时候，你仍然可以欢快的上下滚动ScrollView，因为ScrollView运行在主线程之上（尽管滚动事件会被分发到JS线程，但是接收这些事件对于滚动这个动作来说并不必要）。</p>
<h3 id="性能问题的常见原因"><a href="#性能问题的常见原因" class="headerlink" title="性能问题的常见原因"></a>性能问题的常见原因</h3><h4 id="console-log语句"><a href="#console-log语句" class="headerlink" title="console.log语句"></a>console.log语句</h4><p>在运行打好了离线包的应用时，控制台打印语句可能会极大地拖累JavaScript线程。注意有些第三方调试库也可能包含控制台打印语句，比如redux-logger，所以在发布应用前请务必仔细检查，确保全部移除。</p>
<blockquote>
<p>有个babel插件可以帮你移除所有的console.*调用。首先需要使用npm install babel-plugin-transform-remove-console –save来安装，然后在项目根目录下编辑（或者是新建）一个名为·.babelrc`的文件，在其中加入：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"env"</span>: &#123;</div><div class="line">    <span class="attr">"production"</span>: &#123;</div><div class="line">      <span class="attr">"plugins"</span>: [<span class="string">"transform-remove-console"</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这样在打包发布时，所有的控制台语句就会被自动移除，而在调试时它们仍然会被正常调用。</p>
<h4 id="开发模式-dev-true"><a href="#开发模式-dev-true" class="headerlink" title="开发模式 (dev=true)"></a>开发模式 (dev=true)</h4><p>JavaScript线程的性能在开发模式下是很糟糕的。这是不可避免的，因为有许多工作需要在运行的时候去做，譬如使你获得良好的警告和错误信息，又比如验证属性类型（propTypes）以及产生各种其他的警告。</p>
<h4 id="缓慢的导航器-Navigator-切换"><a href="#缓慢的导航器-Navigator-切换" class="headerlink" title="缓慢的导航器(Navigator)切换"></a>缓慢的导航器(Navigator)切换</h4><p>Navigator的动画是由JavaScript线程所控制的。想象一下“从右边推入”这个场景的切换：每一帧中，新的场景从右向左移动，从屏幕右边缘开始，最终移动到x轴偏移为0的屏幕位置。切换过程中的每一帧，JavaScript线程都需要发送一个新的x轴偏移量给主线程。如果JavaScript线程卡住了，它就无法处理这项事情，因而这一帧就无法更新，动画就被卡住了。</p>
<p>长远的解决方法，其中一部分是要允许基于JavaScript的动画从主线程分离。同样是上面的例子，我们可以在切换动画开始的时候计算出一个列表，其中包含所有的新的场景需要的x轴偏移量，然后一次发送到主线程以某种优化的方式执行。由于JavaScript线程已经从更新x轴偏移量给主线程这个职责中解脱了出来，因此JavaScript线程中的掉帧就不是什么大问题了 —— 用户将基本上不会意识到这个问题，因为用户的注意力会被流畅的切换动作所吸引。</p>
<p>不幸的是，这个方案还没有被实现。所以当前的解决方案是，在动画的进行过程中，利用InteractionManager来选择性的渲染新场景所需的最小限度的内容。</p>
<p>InteractionManager.runAfterInteractions的参数中包含一个回调，这个回调会在navigator切换动画结束的时候被触发（每个来自于Animated接口的动画都会通知InteractionManager）。</p>
<p>你的场景组件看上去应该是这样的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpensiveScene</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props, context) &#123;</div><div class="line">    <span class="keyword">super</span>(props, context);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">renderPlaceholderOnly</span>: <span class="literal">true</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    InteractionManager.runAfterInteractions(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">renderPlaceholderOnly</span>: <span class="literal">false</span>&#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.renderPlaceholderOnly) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>._renderPlaceholderView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Your full view goes here<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _renderPlaceholderView() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>你不必被限制在仅仅是做一些loading指示的渲染，你也可以绘制部分的页面内容 —— 例如：当你加载Facebook应用的时候，你会看见一个灰色方形的消息流的占位符，是将来用来显示文字的地方。如果你正在场景中绘制地图，那么最好在场景切换完成之前，显示一个灰色的占位页面或者是一个转动的动画，因为切换过程的确会导致主线程的掉帧。</p>
<h4 id="ListView初始化渲染太慢以及列表过长时滚动性能太差"><a href="#ListView初始化渲染太慢以及列表过长时滚动性能太差" class="headerlink" title="ListView初始化渲染太慢以及列表过长时滚动性能太差"></a>ListView初始化渲染太慢以及列表过长时滚动性能太差</h4><p>这是一个频繁出现的问题。因为iOS配备了UITableView，通过重用底层的UIViews实现了非常高性能的体验。用React Native实现相同效果的工作仍正在进行中，但是在此之前，我们有一些可用的方法来稍加改进性能以满足我们的需求。</p>
<h5 id="initialListSize"><a href="#initialListSize" class="headerlink" title="initialListSize"></a>initialListSize</h5><p>这个属性定义了在首次渲染中绘制的行数。如果我们关注于快速的显示出页面，可以设置initialListSize为1，然后我们会发现其他行在接下来的帧中被快速绘制到屏幕上。而每帧所显示的行数由pageSize所决定。</p>
<h5 id="pageSize"><a href="#pageSize" class="headerlink" title="pageSize"></a>pageSize</h5><p>在初始渲染也就是initialListSize被使用之后，ListView将利用pageSize来决定每一帧所渲染的行数。默认值为1 —— 但是如果你的页面很小，而且渲染的开销不大的话，你会希望这个值更大一些。稍加调整，你会发现它所起到的作用。</p>
<h5 id="scrollRenderAheadDistance"><a href="#scrollRenderAheadDistance" class="headerlink" title="scrollRenderAheadDistance"></a>scrollRenderAheadDistance</h5><p>“在将要进入屏幕某些区域中先渲染行，距离按像素计算”</p>
<p>如果我们有一个2000个元素的列表，并且立刻全部渲染出来的话，无论是内存还是计算资源都会显得很匮乏。还很可能导致非常可怕的阻塞。因此scrollRenderAheadDistance允许我们来指定一个超过视野范围之外所需要渲染的行数。</p>
<h5 id="removeClippedSubviews"><a href="#removeClippedSubviews" class="headerlink" title="removeClippedSubviews"></a>removeClippedSubviews</h5><p>“当这一选项设置为true的时候，超出屏幕的子视图（同时overflow值为hidden）会从它们原生的父视图中移除。这个属性可以在列表很长的时候提高滚动的性能。默认为true。（0.14版本前默认为false）”</p>
<p>这是一个应用在长列表上极其重要的优化。Android上，overflow值总是hidden的，所以你不必担心没有设置它。而在iOS上，你需要确保在行容器上设置了overflow: hidden。</p>
<h4 id="我的组件渲染太慢，我不需要立即显示全部"><a href="#我的组件渲染太慢，我不需要立即显示全部" class="headerlink" title="我的组件渲染太慢，我不需要立即显示全部"></a>我的组件渲染太慢，我不需要立即显示全部</h4><p>这在初次浏览ListView时很常见，适当的使用它是获得稳定性能的关键。就像之前所提到的，它可以提供一些手段在不同帧中来分开渲染页面，稍加改进就可以满足你的需求。此外要记住的是，ListView也可以横向滚动。</p>
<h4 id="在重绘一个几乎没有什么变化的页面时，JS帧率严重降低"><a href="#在重绘一个几乎没有什么变化的页面时，JS帧率严重降低" class="headerlink" title="在重绘一个几乎没有什么变化的页面时，JS帧率严重降低"></a>在重绘一个几乎没有什么变化的页面时，JS帧率严重降低</h4><p>如果你正在使用一个ListView，你必须提供一个rowHasChanged函数，它通过快速的算出某一行是否需要重绘，来减少很多不必要的工作。如果你使用了不可变的数据结构，这项工作就只需检查其引用是否相等。</p>
<p>同样的，你可以实现shouldComponentUpdate函数来指明在什么样的确切条件下，你希望这个组件得到重绘。如果你编写的是纯粹的组件（返回值完全由props和state所决定），你可以利用PureRenderMixin来为你做这个工作。再强调一次，不可变的数据结构在提速方面非常有用 —— 当你不得不对一个长列表对象做一个深度的比较，它会使重绘你的整个组件更加快速，而且代码量更少。</p>
<h4 id="由于在JavaScript线程中同时做很多事情，导致JS线程掉帧"><a href="#由于在JavaScript线程中同时做很多事情，导致JS线程掉帧" class="headerlink" title="由于在JavaScript线程中同时做很多事情，导致JS线程掉帧"></a>由于在JavaScript线程中同时做很多事情，导致JS线程掉帧</h4><p>“导航切换极慢”是该问题的常见表现。在其他情形下，这种问题也可能会出现。使用InteractionManager是一个好的方法，但是如果在动画中，为了用户体验的开销而延迟其他工作并不太能接受，那么你可以考虑一下使用LayoutAnimation。</p>
<p>Animated的接口一般会在JavaScript线程中计算出所需要的每一个关键帧，而LayoutAnimation则利用了Core Animation，使动画不会被JS线程和主线程的掉帧所影响。<br>注意：LayoutAnimation只工作在“一次性”的动画上（”静态”动画） – 如果动画可能会被中途取消，你还是需要使用Animated。</p>
<h4 id="在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧"><a href="#在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧" class="headerlink" title="在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧"></a>在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧</h4><p>当具有透明背景的文本位于一张图片上时，或者在每帧重绘视图时需要用到透明合成的任何其他情况下，这种现象尤为明显。设置shouldRasterizeIOS或者renderToHardwareTextureAndroid属性可以显著改善这一现象。 注意不要过度使用该特性，否则你的内存使用量将会飞涨。在使用时，要评估你的性能和内存使用情况。如果你没有需要移动这个视图的需求，请关闭这一属性。</p>
<h4 id="使用动画改变图片的尺寸时，UI线程掉帧"><a href="#使用动画改变图片的尺寸时，UI线程掉帧" class="headerlink" title="使用动画改变图片的尺寸时，UI线程掉帧"></a>使用动画改变图片的尺寸时，UI线程掉帧</h4><p>在iOS上，每次调整Image组件的宽度或者高度，都需要重新裁剪和缩放原始图片。这个操作开销会非常大，尤其是大的图片。比起直接修改尺寸，更好的方案是使用transform: [{scale}]的样式属性来改变尺寸。比如当你点击一个图片，要将它放大到全屏的时候，就可以使用这个属性。</p>
<h4 id="Touchable系列组件不能很好的响应"><a href="#Touchable系列组件不能很好的响应" class="headerlink" title="Touchable系列组件不能很好的响应"></a>Touchable系列组件不能很好的响应</h4><p>有些时候，如果我们有一项操作与点击事件所带来的透明度改变或者高亮效果发生在同一帧中，那么有可能在onPress函数结束之前我们都看不到这些效果。比如在onPress执行了一个setState的操作，这个操作需要大量计算工作并且导致了掉帧。对此的一个解决方案是将onPress处理函数中的操作封装到requestAnimationFrame中：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">handleOnPress() &#123;</div><div class="line">  <span class="comment">// 谨记在使用requestAnimationFrame、setTimeout以及setInterval时</span></div><div class="line">  <span class="comment">// 要使用TimerMixin（其作用是在组件unmount时，清除所有定时器）</span></div><div class="line">  <span class="keyword">this</span>.requestAnimationFrame(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.doExpensiveAction();</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>你可以利用内置的分析器来同时获取JavaScript线程和主线程中代码执行情况的详细信息。</p>
<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>时刻将React Native更新到最新的版本，可以获得更多API、视图、开发者工具以及其他一些好东西（官方开发任务繁重，人手紧缺，几乎不会对旧版本提供维护支持，所以即便更新可能带来一些兼容上的变更，但建议开发者还是尽一切可能第一时间更新）。由于一个完整的React Native项目是由Android项目、iOS项目和JavaScript项目组成的，且都打包在一个npm包中，所以升级可能会有一些麻烦。以下是目前所需的升级步骤：</p>
<h3 id="更新react-native的node依赖包"><a href="#更新react-native的node依赖包" class="headerlink" title="更新react-native的node依赖包"></a>更新react-native的node依赖包</h3><p>打开项目目录下的package.json文件，然后在dependencies模块下找到react-native，将当前版本号改到最新（或指定）版本号，如：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"reactnativedemo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.android.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">      <span class="attr">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">      <span class="attr">"react"</span>: <span class="string">"^15.4.1"</span>,</div><div class="line">      <span class="attr">"react-native"</span>: <span class="string">"^0.38.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>react-native的npm包的最新版本可以去这里查看，或使用npm info react-native命令查看。</p>
<p>项目的根目录执行：</p>
<blockquote>
<p>npm install</p>
</blockquote>
<p>安装最新的React Native版本,成功后可能会出现如下类似警告：</p>
<blockquote>
<p>npm WARN react-native@0.38.0 requires a peer of react@15.4.1 but none was installed.</p>
</blockquote>
<p>根据警告执行：</p>
<blockquote>
<p>npm install –save react@15.4.1</p>
</blockquote>
<p>更新最新的React且项目下package.json 的 dependencies下的react版本会被修改为 15.4.1</p>
<h3 id="升级项目模板文件"><a href="#升级项目模板文件" class="headerlink" title="升级项目模板文件"></a>升级项目模板文件</h3><p>新版本的npm包通常还会包含一些动态生成的文件，这些文件是在运行react-native init创建新项目时生成的，比如iOS和Android的项目文件。为了使老项目的项目文件也能得到更新（不重新init），你需要在命令行中运行：</p>
<blockquote>
<p>react-native upgrade</p>
</blockquote>
<p>这一命令会检查最新的项目模板，然后进行如下操作：</p>
<ul>
<li>如果是新添加的文件，则直接创建。</li>
<li>如果文件和当前版本的文件相同，则跳过。</li>
<li>如果文件和当前版本的文件不同，则会提示你一些选项：查看两者的不同，选择保留你的版本或是用新的模板覆盖。你可以按下h键来查看所有可以使用的命令。</li>
</ul>
<p>注意：如果你有修改原生代码，那么在使用upgrade升级前，先备份，再覆盖。覆盖完成后，使用比对工具找出差异，将你之前修改的代码逐步搬运到新文件中。</p>
<h3 id="手动升级"><a href="#手动升级" class="headerlink" title="手动升级"></a>手动升级</h3><p>有时候React Native的项目结构改动较大，此时还需要手动做一些修改，例如从0.13到0.14版本，或是0.28到0.29版本。所以在升级时请先阅读一下<a href="https://github.com/facebook/react-native/releases" target="_blank" rel="external">更新日志</a>，以确定是否需要做一些额外的手动修改。</p>
<h3 id="查看版本是否升级成功"><a href="#查看版本是否升级成功" class="headerlink" title="查看版本是否升级成功"></a>查看版本是否升级成功</h3><p>执行：</p>
<blockquote>
<p>react-native -v</p>
</blockquote>
<p>通过如上命令来看最新的版本，检测是否升级成功！</p>
<h2 id="特定平台代码"><a href="#特定平台代码" class="headerlink" title="特定平台代码"></a>特定平台代码</h2><p>在制作跨平台的App时，多半会碰到针对不同平台编写不同代码的需求。最直接的方案就是把组件放置到不同的文件夹下：</p>
<blockquote>
<p>/common/components/<br>/android/components/<br>/ios/components/</p>
</blockquote>
<p>另一个选择是根据平台不同在组件的文件命名上加以区分，如下：</p>
<blockquote>
<p>BigButtonIOS.js<br>BigButtonAndroid.js</p>
</blockquote>
<p>但除此以外React Native还提供了另外两种简单区分平台的方案：</p>
<h3 id="特定平台扩展名"><a href="#特定平台扩展名" class="headerlink" title="特定平台扩展名"></a>特定平台扩展名</h3><p>React Native会检测某个文件是否具有.ios.或是.android.的扩展名，然后根据当前运行的平台加载正确对应的文件。</p>
<p>假设你的项目中有如下两个文件：</p>
<blockquote>
<p>BigButton.ios.js<br>BigButton.android.js</p>
</blockquote>
<p>这样命名组件后你就可以在其他组件中直接引用，而无需关心当前运行的平台是哪个。</p>
<blockquote>
<p>import BigButton from ‘./components/BigButton’;</p>
</blockquote>
<p>React Native会根据运行平台的不同引入正确对应的组件。</p>
<h3 id="平台模块"><a href="#平台模块" class="headerlink" title="平台模块"></a>平台模块</h3><p>React Native提供了一个检测当前运行平台的模块。如果组件只有一小部分代码需要依据平台定制，那么这个模块就可以派上用场。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Platform, StyleSheet &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">height</span>: (Platform.OS === <span class="string">'ios'</span>) ? <span class="number">200</span> : <span class="number">100</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Platform.OS在iOS上会返回ios，而在Android设备或模拟器上则会返回android。</p>
<p>还有个实用的方法是Platform.select()，它可以以Platform.OS为key，从传入的对象中返回对应平台的值，见下面的示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Platform, StyleSheet &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    ...Platform.select(&#123;</div><div class="line">      <span class="attr">ios</span>: &#123;</div><div class="line">        <span class="attr">backgroundColor</span>: <span class="string">'red'</span>,</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">android</span>: &#123;</div><div class="line">        <span class="attr">backgroundColor</span>: <span class="string">'blue'</span>,</div><div class="line">      &#125;,</div><div class="line">    &#125;),</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码会根据平台的不同返回不同的container样式——iOS上背景色为红色，而android为蓝色。</p>
<p>这一方法可以接受任何合法类型的参数，因此你也可以直接用它针对不同平台返回不同的组件，像下面这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Component = Platform.select(&#123;</div><div class="line">  <span class="attr">ios</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">require</span>(<span class="string">'ComponentIOS'</span>),</div><div class="line">  <span class="attr">android</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">require</span>(<span class="string">'ComponentAndroid'</span>),</div><div class="line">&#125;)();</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">Component</span> /&gt;</span>;</span></div></pre></td></tr></table></figure>
<h4 id="检测Android版本"><a href="#检测Android版本" class="headerlink" title="检测Android版本"></a>检测Android版本</h4><p>在Android上，平台模块还可以用来检测当前所运行的Android平台的版本：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Platform &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(Platform.Version === <span class="number">21</span>)&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Running on Lollipop!'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native 进阶（五）–性能、升级版本、特定平台代码&lt;br&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://cokernut.top/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://cokernut.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 学习笔记--进阶（四）--导航器</title>
    <link href="http://cokernut.top/2016/12/08/ReactNative/React%20Native%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E8%BF%9B%E9%98%B6%EF%BC%88%E5%9B%9B%EF%BC%89--%E5%AF%BC%E8%88%AA%E5%99%A8/"/>
    <id>http://cokernut.top/2016/12/08/ReactNative/React Native学习笔记--进阶（四）--导航器/</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2016-12-08T08:42:15.010Z</updated>
    
    <content type="html"><![CDATA[<p>React Native 进阶（四）–导航器<br><a id="more"></a></p>
<h2 id="导航器对比"><a href="#导航器对比" class="headerlink" title="导航器对比"></a>导航器对比</h2><p>如果你刚开始接触，那么直接选择Navigator就好。如果你只针对iOS平台开发，并且想和系统原生外观一致，那么可以选择NavigatorIOS。如果你想更好地管理导航栈，那么应该尝试一下NavigationExperimental。</p>
<h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><p>Navigator使用纯JavaScript实现了一个导航栈，因此可以跨平台工作，同时也便于定制。</p>
<p>Navigator可以在renderScene方法中根据当前路由渲染不同的组件。默认情况下新的场景会从屏幕右侧滑进来，但你也可以通过configureScene方法来管理这一行为。你还可以通过navigationBar属性来配置一个跨场景的导航栏。但我们不推荐使用跨场景的navigationBar，它的代码逻辑维护起来很困难！建议自己在场景中用View实现自定义的导航栏。</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>如果你得到了一个navigator对象的引用，则可以调用许多方法来进行导航：</p>
<ul>
<li>getCurrentRoutes() - 获取当前栈里的路由，也就是push进来，没有pop掉的那些。</li>
<li>jumpBack() - 跳回之前的路由，当然前提是保留现在的，还可以再跳回来，会给你保留原样。</li>
<li>jumpForward() - 上一个方法不是调到之前的路由了么，用这个跳回来就好了。</li>
<li>jumpTo(route) - 跳转到已有的场景并且不卸载。</li>
<li>push(route) - 跳转到新的场景，并且将场景入栈，你可以稍后跳转过去</li>
<li>pop() - 跳转回去并且卸载掉当前场景</li>
<li>replace(route) - 用一个新的路由替换掉当前场景</li>
<li>replaceAtIndex(route, index) - 替换掉指定序列的路由场景</li>
<li>replacePrevious(route) - 替换掉之前的场景</li>
<li>resetTo(route) - 跳转到新的场景，并且重置整个路由栈</li>
<li>immediatelyResetRouteStack(routeStack) - 用新的路由数组来重置路由栈</li>
<li>popToRoute(route) - pop到路由指定的场景，在整个路由栈中，处于指定场景之后的场景将会被卸载。</li>
<li>popToTop() - pop到栈中的第一个场景，卸载掉所有的其他场景。</li>
</ul>
<p>这些都是navigator可以用的public method,就是跳转用的，里面有些带参数的XXX(route)，这个route参数是什么呢，这个route就是:<br>renderScene={(route, navigator) =&gt;<br>这里的route，最基本的route就是:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> route = &#123;</div><div class="line">  <span class="attr">component</span>: SampleComponent</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote>
<p>configureScene function </p>
</blockquote>
<p>可选的函数，用来配置场景动画和手势。会带有两个参数调用，一个是当前的路由，一个是当前的路由栈。然后它应当返回一个场景配置对象</p>
<blockquote>
<p>(route, routeStack) =&gt; Navigator.SceneConfigs.FloatFromRight </p>
</blockquote>
<ul>
<li>Navigator.SceneConfigs.PushFromRight (默认)</li>
<li>Navigator.SceneConfigs.FloatFromRight</li>
<li>Navigator.SceneConfigs.FloatFromLeft</li>
<li>Navigator.SceneConfigs.FloatFromBottom</li>
<li>Navigator.SceneConfigs.FloatFromBottomAndroid</li>
<li>Navigator.SceneConfigs.FadeAndroid</li>
<li>Navigator.SceneConfigs.HorizontalSwipeJump</li>
<li>Navigator.SceneConfigs.HorizontalSwipeJumpFromRight</li>
<li>Navigator.SceneConfigs.VerticalUpSwipeJump</li>
<li>Navigator.SceneConfigs.VerticalDownSwipeJump</li>
</ul>
<blockquote>
<p>initialRoute object </p>
</blockquote>
<p>定义启动时加载的路由。路由是导航栏用来识别渲染场景的一个对象。initialRoute必须是initialRouteStack中的一个路由。initialRoute默认为initialRouteStack中最后一项。</p>
<blockquote>
<p>initialRouteStack [object] </p>
</blockquote>
<p>提供一个路由集合用来初始化。如果没有设置初始路由的话则必须设置该属性。如果没有提供该属性，它将被默认设置成一个只含有initialRoute的数组。</p>
<blockquote>
<p>navigationBar node </p>
</blockquote>
<p>可选参数，提供一个在场景切换的时候保持的导航栏。</p>
<blockquote>
<p>navigator object </p>
</blockquote>
<p>可选参数，提供从父导航器获得的导航器对象。</p>
<blockquote>
<p>onDidFocus function </p>
</blockquote>
<p>每当导航切换完成或初始化之后，调用此回调，参数为新场景的路由。</p>
<blockquote>
<p>onWillFocus function </p>
</blockquote>
<p>会在导航切换之前调用，参数为目标路由。</p>
<blockquote>
<p>renderScene function </p>
</blockquote>
<p>必要参数。用来渲染指定路由的场景。调用的参数是路由和导航器。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(route, navigator) =&gt;<span class="xml"><span class="tag">&lt;<span class="name">MySceneComponent</span> <span class="attr">title</span>=<span class="string">&#123;route.title&#125;</span> <span class="attr">navigator</span>=<span class="string">&#123;navigator&#125;</span> /&gt;</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>sceneStyle View#style </p>
</blockquote>
<p>将会应用在每个场景的容器上的样式。</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><blockquote>
<p>Navigator.js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  View,</div><div class="line">  Navigator</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> FirstPageComponent <span class="keyword">from</span> <span class="string">'./FirstPageComponent'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> defaultName = <span class="string">'FirstPageComponent'</span>;</div><div class="line">    <span class="keyword">let</span> defaultComponent = FirstPageComponent;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Navigator</div><div class="line">        initialRoute=&#123;&#123; name: defaultName, component: defaultComponent &#125;&#125;</div><div class="line">        configureScene=&#123;(route) =&gt; &#123; // 跳转动画</div><div class="line">          return Navigator.SceneConfigs.VerticalDownSwipeJump;</div><div class="line">        &#125;&#125;</div><div class="line">        renderScene=&#123;(route, navigator) =&gt; &#123;</div><div class="line">          let Component = route.component;</div><div class="line">          // 这里有个 &#123; ...route.params &#125;，这个语法是把 routes.params 里的每个key 作为props的一个属性</div><div class="line">          return &lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;</div><div class="line">        &#125;&#125; </div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">第10行: 一个初始首页的component名字，比如我写了一个component叫HomeComponent，</div><div class="line">        那么这个name就是这个组件的名字[HomeComponent]了。  </div><div class="line">第11行: 这个组件的Class，用来一会儿实例化成 &lt;Component /&gt;标签</div><div class="line">第14行: initialRoute=&#123;&#123; name: defaultName, component: defaultComponent &#125;&#125; 这个指定了默认的页面，</div><div class="line">        也就是启动app之后会看到界面的第一屏。 需要填写两个参数: name 跟 component。（注意这里填什么参数（参数名）纯粹是自定义的，</div><div class="line">        因为这个参数也是你自己发自己收，自己在renderScene方法中处理。这个示例用了两个参数，但其实真正使用的参数只有component）  </div><div class="line">第15，16，17行: configureScene=&#123;() =&gt; &#123;return Navigator.SceneConfigs.VerticalDownSwipeJump;&#125;&#125; 这个是页面之间跳转时候的动画，</div><div class="line">        具体有哪些动画可以看node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorSceneConfigs.js下的源代码。</div><div class="line">最后的几行: renderScene=&#123;(route, navigator) =&gt; &#123;let Component = route.component;return &lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;&#125;&#125;，</div><div class="line">        这里是每个人最疑惑的，我们先看到回调里的两个参数:route, navigator。通过打印我们发现route里其实就是我们传递的name,component这两个货，</div><div class="line">        navigator是一个Navigator的对象，为什么呢，因为它有push pop jump...等方法，这是我们等下用来跳转页面用的那个navigator对象。</div><div class="line">        return &lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;  </div><div class="line">        这里有一个判断，也就是如果传递进来的component存在，那我们就是返回一个这个component，结合前面 initialRoute 的参数，我们就知道，</div><div class="line">        这是一个会被render出来给用户看到的component，然后navigator作为props传递给了这个component。</div></pre></td></tr></table></figure>
<p>所以下一步，在这个FirstPageComponent里面，我们可以直接拿到这个 props.navigator:</p>
<blockquote>
<p>FirstPageComponent.js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  View,</div><div class="line">  Navigator,</div><div class="line">  TouchableOpacity,</div><div class="line">  Text</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> SecondPageComponent <span class="keyword">from</span> <span class="string">'./SecondPageComponent'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstPageComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">      <span class="attr">user</span>: <span class="literal">null</span>,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  _pressButton() &#123;</div><div class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">const</span> &#123; navigator &#125; = <span class="keyword">this</span>.props;</div><div class="line">    <span class="comment">//为什么这里可以取得 props.navigator?请注意Navigator.js中:</span></div><div class="line">    <span class="comment">//&lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;</span></div><div class="line">    <span class="comment">//这里传递了navigator作为props</span></div><div class="line">    <span class="keyword">if</span> (navigator) &#123;</div><div class="line">      <span class="comment">// 入栈~ 把SecondPageComponent页面push进栈，接着跳转到SecondPageComponent</span></div><div class="line">      navigator.push(&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'SecondPageComponent'</span>,</div><div class="line">        <span class="attr">component</span>: SecondPageComponent,</div><div class="line">        <span class="comment">//这个 params 其实来自于Navigator 里的一个方法的参数</span></div><div class="line">        params: &#123;  <span class="comment">//routes.params</span></div><div class="line">          id: <span class="keyword">this</span>.state.id,</div><div class="line">          <span class="comment">//从SecondPageComponent获取user</span></div><div class="line">          getUser: <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">            _this.setState(&#123;</div><div class="line">              <span class="attr">user</span>: user</div><div class="line">            &#125;)</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.user) &#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span>&gt;</span>用户信息: &#123;JSON.stringify(this.state.user)&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">      );</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;this._pressButton.bind(this)&#125;</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Text</span>&gt;</span>查询ID为&#123;this.state.id&#125;的用户信息<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个里面创建了一个可以点击的区域，点击可以跳到SecondPageComponent这个页面，实现页面的跳转。<br>现在来创建SecondPageComponent，并且让它可以再跳回FirstPageComponent:</p>
<blockquote>
<p>SecondPageComponent.js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  View,</div><div class="line">  Navigator,</div><div class="line">  Text,</div><div class="line">  TouchableOpacity</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> FirstPageComponent <span class="keyword">from</span> <span class="string">'./FirstPageComponent'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> USER_MODELS = &#123;</div><div class="line">  <span class="number">1</span>: &#123; <span class="attr">name</span>: <span class="string">'小李'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</div><div class="line">  <span class="number">2</span>: &#123; <span class="attr">name</span>: <span class="string">'小明'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondPageComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">id</span>: <span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="comment">//这里获取从FirstPageComponent传递过来的参数: id</span></div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">id</span>: <span class="keyword">this</span>.props.id</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  _pressButton() &#123;</div><div class="line">    <span class="keyword">const</span> &#123; navigator &#125; = <span class="keyword">this</span>.props;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.getUser) &#123;</div><div class="line">      <span class="keyword">let</span> user = USER_MODELS[<span class="keyword">this</span>.props.id];</div><div class="line">      <span class="keyword">this</span>.props.getUser(user);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//出栈~ 把当前的页面pop掉，这里就返回到了上一个页面:FirstPageComponent了</span></div><div class="line">    <span class="keyword">if</span> (navigator) &#123;</div><div class="line">      navigator.pop();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>获得的参数(id): id=&#123;this.state.id&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;this._pressButton.bind(this)&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span>&gt;</span>点我跳回去<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="传递参数和获取参数"><a href="#传递参数和获取参数" class="headerlink" title="传递参数和获取参数"></a>传递参数和获取参数</h4><h5 id="传递参数到新页面"><a href="#传递参数到新页面" class="headerlink" title="传递参数到新页面"></a>传递参数到新页面</h5><p>传递参数到新页面，可以通过push。比如在一个 press的事件里:</p>
<blockquote>
<p>FirstPageComponent.js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">constructor(props) &#123;</div><div class="line">  <span class="keyword">super</span>(props);</div><div class="line">  <span class="keyword">this</span>.state = &#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">2</span></div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">_pressButton() &#123;</div><div class="line">  ...</div><div class="line">    navigator.push(&#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'SecondPageComponent'</span>,</div><div class="line">      <span class="attr">component</span>: SecondPageComponent,</div><div class="line">      <span class="comment">//这个 params 其实来自于Navigator 里的一个方法的参数</span></div><div class="line">      params: &#123;</div><div class="line">        <span class="attr">id</span>: <span class="keyword">this</span>.state.id</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>params的来历:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Navigator.js</span></div><div class="line">...</div><div class="line">&lt;Navigator</div><div class="line">  initialRoute=&#123;&#123; <span class="attr">name</span>: defaultName, <span class="attr">component</span>: defaultComponent &#125;&#125;</div><div class="line">  configureScene=&#123;() =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> Navigator.SceneConfigs.VerticalDownSwipeJump;</div><div class="line">  &#125;&#125;</div><div class="line">  renderScene=&#123;(route, navigator) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> Component = route.component;</div><div class="line">    <span class="keyword">if</span>(route.component) &#123;</div><div class="line">        <span class="comment">//这里有个 &#123; ...route.params &#125;</span></div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...route.params</span>&#125; <span class="attr">navigator</span>=<span class="string">&#123;navigator&#125;</span> /&gt;</span></span></div><div class="line">    &#125;</div><div class="line">  &#125;&#125; </div><div class="line">/&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>{ …route.params }语法是把 routes.params 里的每个key 作为props的一个属性:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FirstPageComponent.js</span></div><div class="line">...</div><div class="line">navigator.push(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'SecondPageComponent'</span>,</div><div class="line">    <span class="attr">component</span>: SecondPageComponent,</div><div class="line">    <span class="attr">params</span>: &#123;  <span class="comment">//routes.params</span></div><div class="line">        id: <span class="keyword">this</span>.state.id</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这里的 params.id 就变成了 <component id="{routes.params.id}" navigator="{navigator}"> 里的id属性(props)传递给了下一个页面。</component></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//SecondPageComponent.js</span></div><div class="line">...</div><div class="line">componentDidMount() &#123;</div><div class="line">  <span class="comment">//这里获取从FirstPageComponent传递过来的参数: id</span></div><div class="line">  <span class="keyword">this</span>.setState(&#123;</div><div class="line">    <span class="attr">id</span>: <span class="keyword">this</span>.props.id</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">...</div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>获得的参数: id=&#123; this.state.id &#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;this._pressButton.bind(this)&#125;</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>点我跳回去<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="返回参数到之前页面"><a href="#返回参数到之前页面" class="headerlink" title="返回参数到之前页面"></a>返回参数到之前页面</h5><p>返回的时候，也需要传递参数回上一个页面。但是navigator.pop()并没有提供参数，因为pop()只是从 [路由1,路由2，路由3。。。]里把最后一个路由踢出去的操作，并不支持传递参数给倒数第二个路由，这里要用到一个概念，把上一个页面的实例或者回调方法，作为参数传递到当前页面来，在当前页面操作上一个页面的state:</p>
<p>比如FirstPageComponent传递id到SecondPageComponent，然后SecondPageComponent返回user信息给FirstPageComponent：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FirstPageComponent.js</span></div><div class="line">...</div><div class="line">constructor(props) &#123;</div><div class="line">  <span class="keyword">super</span>(props);</div><div class="line">  <span class="keyword">this</span>.state = &#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">user</span>: <span class="literal">null</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line">_pressButton() &#123;</div><div class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>;</div><div class="line">    ...</div><div class="line">      params: &#123;  <span class="comment">//routes.params</span></div><div class="line">        id: <span class="keyword">this</span>.state.id,</div><div class="line">        <span class="comment">//从SecondPageComponent获取user</span></div><div class="line">        getUser: <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">          _this.setState(&#123;</div><div class="line">            <span class="attr">user</span>: user</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">...</div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state.user) &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>用户信息: &#123;JSON.stringify(this.state.user)&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;this._pressButton.bind(this)&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span>&gt;</span>查询ID为&#123;this.state.id&#125;的用户信息<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//SecondPageComponent.js</span></div><div class="line">...</div><div class="line">const USER_MODELS = &#123;</div><div class="line">  <span class="number">1</span>: &#123; <span class="attr">name</span>: <span class="string">'小李'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</div><div class="line">  <span class="number">2</span>: &#123; <span class="attr">name</span>: <span class="string">'小明'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondPageComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">id</span>: <span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="comment">//这里获取从FirstPageComponent传递过来的参数: id</span></div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">id</span>: <span class="keyword">this</span>.props.id</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  _pressButton() &#123;</div><div class="line">    <span class="keyword">const</span> &#123; navigator &#125; = <span class="keyword">this</span>.props;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.getUser) &#123;</div><div class="line">      <span class="keyword">let</span> user = USER_MODELS[<span class="keyword">this</span>.props.id];</div><div class="line">      <span class="keyword">this</span>.props.getUser(user);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//出栈~ 把当前的页面pop掉，这里就返回到了上一个页面:FirstPageComponent了</span></div><div class="line">    <span class="keyword">if</span> (navigator) &#123;</div><div class="line">      navigator.pop();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="NavigatorIOS"><a href="#NavigatorIOS" class="headerlink" title="NavigatorIOS"></a>NavigatorIOS</h2><p>如果你只针对iOS平台开发，那么可以考虑使用NavigatorIOS。它是基于 UINavigationController封装的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;NavigatorIOS</div><div class="line">  initialRoute=&#123;&#123;</div><div class="line">    <span class="attr">component</span>: MyScene,</div><div class="line">    <span class="attr">title</span>: <span class="string">'My Initial Scene'</span>,</div><div class="line">    <span class="attr">passProps</span>: &#123; <span class="attr">myProp</span>: <span class="string">'foo'</span> &#125;,</div><div class="line">  &#125;&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>用法类似Navigator，NavigatorIOS也使用路由对象来描述场景，但有一些重要区别。其中要渲染的组件在路由对象的component字段中指定，要给目标组件传递的参数则写在passProps中。被渲染的component都会自动接受到一个名为navigator的属性，你可以直接调用此对象(this.props.navigator)的push和pop方法。<br>由于NavigatorIOS使用的是原生的UIKit导航，所以它会自动渲染一个带有返回按钮和标题的导航栏。</p>
<blockquote>
<p>你还可以看看<a href="https://github.com/wix/react-native-navigation" target="_blank" rel="external">react-native-navigation</a>，这是一个第三方的组件，旨在于提供原生的跨平台的导航组件。</p>
</blockquote>
<h2 id="NavigationExperimental"><a href="#NavigationExperimental" class="headerlink" title="NavigationExperimental"></a>NavigationExperimental</h2><p>Navigator和NavigatorIOS都是有状态的组件。如果你在app中多处使用这些组件，那么维护工作就会变得非常麻烦。NavigationExperimental以不同的方式实现了导航，它可以使用任何视图来作为导航视图，同时还用到了规约函数（reducer）自顶向下地管理状态。正如名字中的Experimental(实验)所示，这一组件的整体实现具有一定的实验性，但仍然建议你尝试一下用它去更好地管理应用的导航。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;NavigationCardStack</div><div class="line">  onNavigateBack=&#123;onPopRouteFunc&#125;</div><div class="line">  navigationState=&#123;myNavigationState&#125;</div><div class="line">  renderScene=&#123;renderSceneFun&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>引入NavigationExperimental的步骤和React Native中的其他组件一样。在引入此组件之后，还可以进一步解构其中一些有用的子组件，比如这里我们会从中解构NavigationCardStack和 NavigationStateUtils这两个子组件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; NavigationExperimental &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123;</div><div class="line">  <span class="attr">CardStack</span>: NavigationCardStack,</div><div class="line">  <span class="attr">StateUtils</span>: NavigationStateUtils,</div><div class="line">&#125; = NavigationExperimental;</div></pre></td></tr></table></figure>
<p>NavigationExperimental的实现机制与Navigator和NavigatorIOS有所不同，用它来构建导航栈还需要一些额外的步骤。</p>
<h3 id="第一步：定义初始状态和根容器"><a href="#第一步：定义初始状态和根容器" class="headerlink" title="第一步：定义初始状态和根容器"></a>第一步：定义初始状态和根容器</h3><p>首先创建一个新组件，我们会把它作为根容器，并在这里定义初始状态。导航栈会定义在navigationState字段中，其中也包含了初始的路由定义：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; NavigationExperimental &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123;</div><div class="line">  <span class="attr">CardStack</span>: NavigationCardStack,</div><div class="line">  <span class="attr">StateUtils</span>: NavigationStateUtils,</div><div class="line">&#125; = NavigationExperimental;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props, context) &#123;</div><div class="line">    <span class="keyword">super</span>(props, context);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="comment">// 定义初始的导航状态</span></div><div class="line">      navigationState: &#123;</div><div class="line">        <span class="attr">index</span>: <span class="number">0</span>, <span class="comment">// 现在是第一页（索引从0开始）</span></div><div class="line">        routes: [&#123;<span class="attr">key</span>: <span class="string">'最初的场景'</span>&#125;], <span class="comment">// 初始仅设定一个路由</span></div><div class="line">      &#125;,</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 稍后再补充此函数的实现细节</span></div><div class="line">    <span class="keyword">this</span>._onNavigationChange = <span class="keyword">this</span>._onNavigationChange.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">  _onNavigationChange(type) &#123;</div><div class="line">    <span class="comment">// 稍后再补充此函数的实现细节</span></div><div class="line">  &#125;</div><div class="line">  _exit() &#123;</div><div class="line">    <span class="comment">//exit()实现</span></div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>这是一段占位的文字。稍后会在这里渲染导航。<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们定义了一个有状态的组件，暂时是无用的。我们的初始状态包含了一个路由对象，以及当前页面的索引值。但是这看起来跟Navigator的初始路由定义好像没什么区别！回忆一下navigator对象提供了push和pop操作，看起来也非常直观。但是前面我们说过了，现在我们会在根容器上使用规约函数来管理状态，下面继续。</p>
<h3 id="第二步：规约导航状态"><a href="#第二步：规约导航状态" class="headerlink" title="第二步：规约导航状态"></a>第二步：规约导航状态</h3><p>NavigationExperimental内置了一些有用的规约函数（reducer），都放在NavigationStateUtils中。我们现在要用的两个就是push和pop了。它们接受一个navigationState对象参数，然后返回新的navigationState对象。</p>
<p>据此我们可以这样来编写_onNavigationChange函数，在其中判断”push”和”pop”的行为，并分别规约对应的状态。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">_onNavigationChange(type) &#123;</div><div class="line">  <span class="comment">// 从state中解构出navigationState</span></div><div class="line">  <span class="keyword">let</span> &#123;navigationState&#125; = <span class="keyword">this</span>.state;</div><div class="line">  <span class="keyword">switch</span> (type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'push'</span>:</div><div class="line">      <span class="comment">// push一个新路由，在这里就是一个带有key属性的对象。</span></div><div class="line">      <span class="comment">// key必须要确保唯一性</span></div><div class="line">      <span class="keyword">const</span> route = &#123;<span class="attr">key</span>: <span class="string">'Route-'</span> + <span class="built_in">Date</span>.now()&#125;;</div><div class="line">      <span class="comment">// 调用NavigationStateUtils提供的push规约函数</span></div><div class="line">      navigationState = NavigationStateUtils.push(navigationState, route);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'pop'</span>:</div><div class="line">      <span class="comment">// 使用pop函数来弹出当前路由</span></div><div class="line">      navigationState = NavigationStateUtils.pop(navigationState);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 如果没有实际变化，则NavigationStateUtils会返回同样的`navigationState`</span></div><div class="line">  <span class="comment">// 我们只会更新确实发生变化的状态</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state.navigationState !== navigationState) &#123;</div><div class="line">    <span class="comment">// 请记住更新状态必须通过setState()方法！</span></div><div class="line">    <span class="keyword">this</span>.setState(&#123;navigationState&#125;);</div><div class="line">    <span class="comment">// 简单讲解一下上面那一句ES6语法</span></div><div class="line">    <span class="comment">// 如果key和value的字面一样，那么可以简写成一个，等同于下面的写法：</span></div><div class="line">    <span class="comment">// this.setState(&#123;navigationState: navigationState&#125;);</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里，我们已经触碰到了NavigationExperimental的精髓所在。这里我们只处理了两种行为，实际开发中行为可能更复杂，比如可能会考虑后退（back）行为，又或者是tab间的切换过渡行为等等。</p>
<p>我们现在还没写初始场景和实际的导航器，不过别急，我们一步一步来。</p>
<h3 id="第三步：定义场景"><a href="#第三步：定义场景" class="headerlink" title="第三步：定义场景"></a>第三步：定义场景</h3><p>为方便起见我们先定义一个Row（行）组件。其中显示了一些文字，并带有点击事件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TappableRow</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TouchableHighlight</span></span></span></div><div class="line">        <span class="attr">style</span>=<span class="string">&#123;styles.row&#125;</span></div><div class="line">        <span class="attr">underlayColor</span>=<span class="string">"#D0D0D0"</span></div><div class="line">        <span class="attr">onPress</span>=<span class="string">&#123;this.props.onPress&#125;</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.buttonText&#125;</span>&gt;</span></div><div class="line">          &#123;this.props.text&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableHighlight</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在来定义实际的场景。其中用到了一个ScrollView来显示一个垂直列表，第一行显示当前路由对象的key字段值，后两行用来点击后调用导航器的push和pop方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVeryComplexScene</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;ScrollView style=&#123;styles.scrollView&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.row&#125;&gt;</div><div class="line">          路由: &#123;this.props.route.key&#125;</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;TappableRow</div><div class="line">          text="加载下一个场景"</div><div class="line">          onPress=&#123;this.props.onPushRoute&#125;/&gt;</div><div class="line">        &lt;TappableRow</div><div class="line">          text="返回上一个场景"</div><div class="line">          onPress=&#123;this.props.onPopRoute&#125;/&gt;</div><div class="line">      &lt;/ScrollView&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第四步：创建导航栈"><a href="#第四步：创建导航栈" class="headerlink" title="第四步：创建导航栈"></a>第四步：创建导航栈</h3><p>我们之前已经定义了状态和管理状态的规约函数，现在可以创建导航器组件了。在写导航器的同时，我们可以使用当前路由的属性来配置场景并渲染它了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVerySampleNavigator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// 在这里绑定一些导航用的方法</span></div><div class="line">  <span class="keyword">constructor</span>(props, context) &#123;</div><div class="line">    <span class="keyword">super</span>(props, context);</div><div class="line">    <span class="keyword">this</span>._onPushRoute = <span class="keyword">this</span>.props.onNavigationChange.bind(<span class="literal">null</span>, <span class="string">'push'</span>);</div><div class="line">    <span class="keyword">this</span>._onPopRoute = <span class="keyword">this</span>.props.onNavigationChange.bind(<span class="literal">null</span>, <span class="string">'pop'</span>);</div><div class="line">    <span class="keyword">this</span>._renderScene = <span class="keyword">this</span>._renderScene.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 现在我们终于可以使用“NavigationCardStack”来渲染场景。</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;NavigationCardStack</div><div class="line">        onNavigateBack=&#123;this._onPopRoute&#125;</div><div class="line">        navigationState=&#123;this.props.navigationState&#125;</div><div class="line">        renderScene=&#123;this._renderScene&#125;</div><div class="line">        style=&#123;styles.navigator&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  // 根据路由来渲染场景</div><div class="line">  // `sceneProps`的具体结构定义在`NavigationTypeDefinition`的`NavigationSceneRendererProps`中</div><div class="line">  // 这里你可以根据路由的不同来返回不同的场景组件，我们这里为了简要说明，始终只返回这一个场景组件</div><div class="line">  _renderScene(sceneProps) &#123;</div><div class="line">    return (</div><div class="line">      &lt;MyVeryComplexScene</div><div class="line">        route=&#123;sceneProps.scene.route&#125;</div><div class="line">        onPushRoute=&#123;this._onPushRoute&#125;</div><div class="line">        onPopRoute=&#123;this._onPopRoute&#125;</div><div class="line">        onExit=&#123;this.props.onExit&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后把我们新做的导航器放到根容器中：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// 这里省略了constructor和其他的方法</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">MyVerySampleNavigator</span></span></span></div><div class="line">        <span class="attr">navigationState</span>=<span class="string">&#123;this.state.navigationState&#125;</span></div><div class="line">        <span class="attr">onNavigationChange</span>=<span class="string">&#123;this._onNavigationChange&#125;</span></div><div class="line">        <span class="attr">onExit</span>=<span class="string">&#123;this._exit&#125;</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>别忘了引入组件和样式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NavigationExperimental, PixelRatio, ScrollView, StyleSheet, Text, TouchableHighlight &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">navigator</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">scrollView</span>: &#123;</div><div class="line">    <span class="attr">marginTop</span>: <span class="number">64</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">row</span>: &#123;</div><div class="line">    <span class="attr">padding</span>: <span class="number">15</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'white'</span>,</div><div class="line">    <span class="attr">borderBottomWidth</span>: <span class="number">1</span> / PixelRatio.get(),</div><div class="line">    <span class="attr">borderBottomColor</span>: <span class="string">'#CDCDCD'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">rowText</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">17</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">buttonText</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">17</span>,</div><div class="line">    <span class="attr">fontWeight</span>: <span class="string">'500'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native 进阶（四）–导航器&lt;br&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://cokernut.top/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://cokernut.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native学习笔记--进阶（三）--定时器、直接操作（setNativeProps）、调试</title>
    <link href="http://cokernut.top/2016/12/07/ReactNative/React%20Native%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%89%EF%BC%89--%E5%AE%9A%E6%97%B6%E5%99%A8%E3%80%81%E7%9B%B4%E6%8E%A5%E6%93%8D%E4%BD%9C%EF%BC%88setNativeProps%EF%BC%89%E3%80%81%E8%B0%83%E8%AF%95/"/>
    <id>http://cokernut.top/2016/12/07/ReactNative/React Native学习笔记--进阶（三）--定时器、直接操作（setNativeProps）、调试/</id>
    <published>2016-12-06T16:00:00.000Z</published>
    <updated>2016-12-08T08:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>React Native 进阶（三）–定时器、直接操作（setNativeProps）、调试<br><a id="more"></a></p>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><ul>
<li>setTimeout, clearTimeout</li>
<li>setInterval, clearInterval</li>
<li>setImmediate, clearImmediate</li>
<li>requestAnimationFrame, cancelAnimationFrame</li>
</ul>
<p>requestAnimationFrame(fn)和setTimeout(fn, 0)不同，前者会在每帧刷新之后执行一次，而后者则会尽可能快的执行。</p>
<p>setImmediate则会在当前JavaScript执行块结束的时候执行，就在将要发送批量响应数据到原生之前。注意如果你在setImmediate的回调函数中又执行了setImmediate，它会紧接着立刻执行，而不会在调用之前等待原生代码。</p>
<p>Promise的实现就使用了setImmediate来执行异步调用。</p>
<h3 id="InteractionManager"><a href="#InteractionManager" class="headerlink" title="InteractionManager"></a>InteractionManager</h3><p>原生应用感觉如此流畅的一个重要原因就是在互动和动画的过程中避免繁重的操作。在React Native里，你可以用InteractionManager将一些耗时较长的工作安排到所有互动或动画完成之后再进行，这样可以保证JavaScript动画的流畅运行。</p>
<p>应用可以通过以下代码来安排一个任务，使其在交互结束之后执行：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InteractionManager.runAfterInteractions(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">   <span class="comment">// ...需要长时间同步执行的任务...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们来把它和之前的几个任务安排方法对比一下：</p>
<ul>
<li>requestAnimationFrame(): 用来执行在一段时间内控制视图动画的代码</li>
<li>setImmediate/setTimeout/setInterval(): 在稍后执行代码。注意这有可能会延迟当前正在进行的动画。</li>
<li>runAfterInteractions(): 在稍后执行代码，不会延迟当前进行的动画。</li>
</ul>
<p>触摸处理系统会把一个或多个进行中的触摸操作认定为’交互’，并且会将runAfterInteractions()的回调函数延迟执行，直到所有的触摸操作都结束或取消了。</p>
<p>InteractionManager还允许应用注册动画，在动画开始时创建一个交互“句柄”，然后在结束的时候清除它。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = InteractionManager.createInteractionHandle();</div><div class="line"><span class="comment">// 执行动画... (`runAfterInteractions`中的任务现在开始排队等候)</span></div><div class="line"><span class="comment">// 在动画完成之后</span></div><div class="line">InteractionManager.clearInteractionHandle(handle);</div><div class="line"><span class="comment">// 在所有句柄都清除之后，现在开始依序执行队列中的任务</span></div></pre></td></tr></table></figure>
<p>runAfterInteractions接受一个普通的回调函数，或是一个PromiseTask对象，该对象需要带有名为gen的方法，并返回一个Promise。如果提供的参数是一个PromiseTask， 那么即便它是异步的它也会阻塞任务队列，直到它（以及它所有的依赖任务，哪怕这些依赖任务也是异步的）执行完毕后，才会执行下一个任务。</p>
<p>默认情况下，排队的任务会在一次setImmediate方法中依序批量执行。如果你调用了setDeadLine方法并设定了一个正整数值，则任务只会在设定的时间到达后开始执行。在此之前，任务会通过setTimeout来挂起并阻塞其他任务执行，这样可以给诸如触摸交互一类的事件留出时间，使应用可以更快地响应用户。</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><blockquote>
<p>static runAfterInteractions(callback: Function) </p>
</blockquote>
<p>安排一个函数在所有的交互和动画完成之后运行。返回一个可取消的promise。</p>
<blockquote>
<p>static createInteractionHandle() </p>
</blockquote>
<p>通知管理器有某个动画或者交互开始了。</p>
<blockquote>
<p>static clearInteractionHandle(handle: Handle) </p>
</blockquote>
<p>通知管理器有某个动画或者交互已经结束了。</p>
<blockquote>
<p>static setDeadline(deadline: number) </p>
</blockquote>
<p>如果设定了一个正整数值，则会使用setTimeout来挂起所有尚未执行的任务。在eventLoopRunningTime到达设定时间后，才开始使用一个setImmediate方法来批量执行所有任务。</p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>Events: CallExpression<br>addListener: CallExpression </p>
<h3 id="TimerMixin"><a href="#TimerMixin" class="headerlink" title="TimerMixin"></a>TimerMixin</h3><p>很多React Native应用发生致命错误（闪退）是与计时器有关。具体来说，是在某个组件被卸载（unmount）之后，计时器却仍然被激活。为了解决这个问题，引入了TimerMixin。如果你在组件中引入TimerMixin，就可以把你原本的setTimeout(fn, 500)改为this.setTimeout(fn, 500)(只需要在前面加上this.)，然后当你的组件卸载时，所有的计时器事件也会被正确的清除。</p>
<p>这个库并没有跟着React Native一起发布。你需要在项目文件夹下输入npm i react-timer-mixin –save来单独安装它。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> TimerMixin <span class="keyword">from</span> <span class="string">'react-timer-mixin'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  <span class="attr">mixins</span>: [TimerMixin],</div><div class="line">  <span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setTimeout(</div><div class="line">      <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'I do not leak!'</span>); &#125;,</div><div class="line">      <span class="number">500</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>强烈建议您使用react-timer-mixin提供的this.setTimeout(…)来代替setTimeout(…)。这可以规避许多难以排查的BUG。</p>
<p>如果你的项目是用ES6代码编写，因为ES6中没有内置Mixin，你可以使用<a href="https://github.com/brigand/react-mixin" target="_blank" rel="external">react-mixin</a>来代替TimerMixin或者在unmount组件时记住清除（clearTimeout/clearInterval）所有用到的定时器，那么也可以实现和TimerMixin同样的效果。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React,&#123;</div><div class="line">  Component</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.timer = setTimeout(</div><div class="line">      <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'把一个定时器的引用挂在this上'</span>); &#125;,</div><div class="line">      <span class="number">500</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    <span class="comment">// 如果存在this.timer，则使用clearTimeout清空。</span></div><div class="line">    <span class="comment">// 如果你使用多个timer，那么用多个变量，或者用个数组来保存引用，然后逐个clear</span></div><div class="line">    <span class="keyword">this</span>.timer &amp;&amp; clearTimeout(<span class="keyword">this</span>.timer);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="直接操作（setNativeProps）"><a href="#直接操作（setNativeProps）" class="headerlink" title="直接操作（setNativeProps）"></a>直接操作（setNativeProps）</h2><p>有时候我们需要直接改动组件并触发局部的刷新，但不使用state或是props。譬如在浏览器中使用React库，有时候会需要直接修改一个DOM节点，而在手机App中操作View时也会碰到同样的情况。在React Native中，setNativeProps就是等价于直接操作DOM节点的方法。</p>
<blockquote>
<p>什么时候使用setNativeProps呢？在（不得不）频繁刷新而又遇到了性能瓶颈的时候。<br>直接操作组件并不是应该经常使用的工具。一般来说只是用来创建连续的动画，同时避免渲染组件结构和同步太多视图变化所带来的大量开销。setNativeProps是一个“简单粗暴”的方法，它直接在底层（DOM、UIView等）而不是React组件中记录state，这样会使代码逻辑难以理清。所以在使用这个方法之前，请尽量先尝试用setState和shouldComponentUpdate方法来解决问题。</p>
</blockquote>
<h3 id="setNativeProps与TouchableOpacity"><a href="#setNativeProps与TouchableOpacity" class="headerlink" title="setNativeProps与TouchableOpacity"></a>setNativeProps与TouchableOpacity</h3><p>TouchableOpacity这个组件就在内部使用了setNativeProps方法来更新其子组件的透明度：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">setOpacityTo(value) &#123;</div><div class="line">  <span class="comment">// Redacted: animation related code</span></div><div class="line">  <span class="keyword">this</span>.refs[CHILD_REF].setNativeProps(&#123;</div><div class="line">    <span class="attr">opacity</span>: value</div><div class="line">  &#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>由此我们可以写出下面这样的代码：子组件可以响应点击事件，更改自己的透明度。而子组件自身并不需要处理这件事情，也不需要在实现中做任何修改。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableOpacity onPress=&#123;<span class="keyword">this</span>._handlePress&#125;&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.button&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Press me!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/TouchableOpacity&gt;</span></div></pre></td></tr></table></figure>
<p>如果不使用setNativeProps这个方法来实现这一需求，那么一种可能的办法是把透明值保存到state中，然后在onPress事件触发时更新这个值：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">  <span class="keyword">super</span>(props);</div><div class="line">  <span class="keyword">this</span>.state = &#123; <span class="attr">myButtonOpacity</span>: <span class="number">1</span>, &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> this.setState(&#123;myButtonOpacity: 0.5&#125;)&#125;</span></div><div class="line">                      onPressOut=&#123;() =&gt; this.setState(&#123;myButtonOpacity: 1&#125;)&#125;&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[styles.button,</span> &#123;<span class="attr">opacity:</span> <span class="attr">this.state.myButtonOpacity</span>&#125;]&#125;&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Press me!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>比起之前的例子，这一做法会消耗大量的计算 —— 每一次透明值变更的时候都要重新渲染组件结构，即便视图的其他属性和子组件并没有变化。一般来说这一开销也不足为虑，但当执行连续的动画以及响应用户手势的时候，只有正确地优化组件才能提高动画的流畅度。setNativeProps方法实际是对RCTUIManager.updateView的封装 —— 而这正是重渲染所触发的函数调用。</p>
<h3 id="复合组件与setNativeProps"><a href="#复合组件与setNativeProps" class="headerlink" title="复合组件与setNativeProps"></a>复合组件与setNativeProps</h3><p>复合组件并不是单纯的由一个原生视图构成，所以你不能对其直接使用setNativeProps。比如下面这个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;this.props.label&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TouchableOpacity</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">label</span>=<span class="string">"Press me!"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行这个例子会马上看到一行报错： <font color="#D02591">Touchable child must either be native or forward setNativeProps to a native component.</font> 这是因为MyButton并非直接由原生视图构成，而我们只能给原生视图设置透明值。你可以尝试这样去理解：如果你通过React.createClass方法自定义了一个组件，直接给它设置样式prop是不会生效的，你得把样式props层层向下传递给子组件，直到子组件是一个能够直接定义样式的原生组件。同理，我们也需要把setNativeProps传递给由原生组件封装的子组件。</p>
<h4 id="将setNativeProps传递给子组件"><a href="#将setNativeProps传递给子组件" class="headerlink" title="将setNativeProps传递给子组件"></a>将setNativeProps传递给子组件</h4><p>具体要做的就是在我们的自定义组件中再封装一个setNativeProps方法，其内容为对合适的子组件调用真正的setNativeProps方法，并传递要设置的参数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  setNativeProps(nativeProps) &#123;</div><div class="line">    <span class="keyword">this</span>._root.setNativeProps(nativeProps);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">ref</span>=<span class="string">&#123;component</span> =&gt;</span> this._root = component&#125; &#123;...this.props&#125;&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;this.props.label&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在你可以在TouchableOpacity中嵌入MyButton了！有一点需要特别说明：这里我们使用了ref回调语法，而不是传统的字符串型ref引用。</p>
<p>你可能还会注意到我们在向下传递props时使用了{…this.props}语法（对象的扩展运算符,将多个对象合并到某个对象）。这是因为TouchableOpacity本身其实也是个复合组件， 它除了要求在子组件上执行setNativeProps 以外，还要求子组件对触摸事件进行处理。因此，它会传递多个props，其中包含了onmoveshouldsetresponder 函数，这个函数需要回调给TouchableOpacity组件，以完成触摸事件的处理。与之相对的是TouchableHighlight组件，它本身是由原生视图构成，因而只需要我们实现setNativeProps。</p>
<h3 id="setNativeProps清除TextInput的值"><a href="#setNativeProps清除TextInput的值" class="headerlink" title="setNativeProps清除TextInput的值"></a>setNativeProps清除TextInput的值</h3><p>另一种很常见的setNativeProps的用法是清除TextInput的值。当缓冲区延迟低和用户输入很快的时候可以通过控制TextInput的属性来减少输入的字符。一些开发人员更喜欢完全跳过这个属性，而直接使用setNativeProps直接操作TextInput值。<br>下面的代码演示了点击按钮是清除TextInput的值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.clearText = <span class="keyword">this</span>.clearText.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  clearText() &#123;</div><div class="line">    <span class="keyword">this</span>._textInput.setNativeProps(&#123;<span class="attr">text</span>: <span class="string">''</span>&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">TextInput</span> <span class="attr">ref</span>=<span class="string">&#123;component</span> =&gt;</span> this._textInput = component&#125;</div><div class="line">                   style=&#123;styles.textInput&#125; /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;this.clearText&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Clear text<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="避免和render方法的冲突"><a href="#避免和render方法的冲突" class="headerlink" title="避免和render方法的冲突"></a>避免和render方法的冲突</h3><p>如果要更新一个由render方法来维护的属性，则可能会碰到一些出人意料的bug。因为每一次组件重新渲染都可能引起属性变化，这样一来，之前通过setNativeProps所设定的值就被完全忽略和覆盖掉了。</p>
<h3 id="setNativeProps与shouldComponentUpdate"><a href="#setNativeProps与shouldComponentUpdate" class="headerlink" title="setNativeProps与shouldComponentUpdate"></a>setNativeProps与shouldComponentUpdate</h3><p>通过巧妙运用 shouldComponentUpdate方法，可以避免重新渲染那些实际没有变化的子组件所带来的额外开销，此时使用setState的性能已经可以与setNativeProps相媲美了。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="访问App内的开发菜单"><a href="#访问App内的开发菜单" class="headerlink" title="访问App内的开发菜单"></a>访问App内的开发菜单</h3><p>你可以通过摇晃设备或是选择iOS模拟器的”Hardware”菜单中的”Shake Gesture”选项来打开开发菜单。另外，如果是在iOS模拟器中运行，还可以按下Command⌘ + D 快捷键，Android模拟器对应的则是Command⌘ + M（windows上可能是F1或者F2）。</p>
<p><img src="/images/ReactNative/advance/3.png" alt="开发者菜单"></p>
<blockquote>
<p>注意：在成品（release/producation builds）中开发者菜单会被关闭。</p>
</blockquote>
<h3 id="刷新JavaScript"><a href="#刷新JavaScript" class="headerlink" title="刷新JavaScript"></a>刷新JavaScript</h3><p>传统的原生应用开发中，每一次修改都需要重新编译，但在React Native中你只需要刷新一下JavaScript代码，就能立刻看到变化。具体的操作就是在开发菜单中点击”Reload”选项。也可以在iOS模拟器中按下Command⌘ + R ，Android模拟器上对应的则是按两下R。（注意，某些React Native版本可能在windows中reload无效，请等待官方修复）</p>
<p>如果在iOS模拟器中按下Command⌘ + R没啥感觉，则注意检查Hardware菜单中，Keyboard选项下的”Connect Hardware Keyboard”是否被选中。</p>
<h4 id="自动刷新"><a href="#自动刷新" class="headerlink" title="自动刷新"></a>自动刷新</h4><p>选择开发菜单中的”Enable Live Reload”可以开启自动刷新，这样可以节省你开发中的时间。<br>更神奇的是，你还可以保持应用的当前运行状态，修改后的JavaScript文件会自动注入进来（就好比行驶中的汽车不用停下就能更换新的轮胎）。要实现这一特性只需开启开发菜单中的Hot Reloading选项。  </p>
<p>某些情况下hot reload并不能顺利实施。如果碰到任何界面刷新上的问题，请尝试手动完全刷新。</p>
<p>但有些时候你必须要重新编译应用才能使修改生效：<br>增加了新的资源(比如给iOS的Images.xcassets或是Andorid的res/drawable文件夹添加了图片)<br>更改了任何的原生代码（objective-c/swift/java）</p>
<h3 id="应用内的错误与警告提示（红屏和黄屏）"><a href="#应用内的错误与警告提示（红屏和黄屏）" class="headerlink" title="应用内的错误与警告提示（红屏和黄屏）"></a>应用内的错误与警告提示（红屏和黄屏）</h3><p>红屏或黄屏提示都只会在开发版本中显示，正式的离线包中是不会显示的。</p>
<h4 id="红屏错误"><a href="#红屏错误" class="headerlink" title="红屏错误"></a>红屏错误</h4><p>应用内的报错会以全屏红色显示在应用中（调试模式下），我们称为红屏（red box）报错。你可以使用console.error()来手动触发红屏错误。</p>
<h4 id="黄屏警告"><a href="#黄屏警告" class="headerlink" title="黄屏警告"></a>黄屏警告</h4><p>应用内的警告会以全屏黄色显示在应用中（调试模式下），我们称为黄屏（yellow box）报错。点击警告可以查看详情或是忽略掉。 和红屏报警类似，你可以使用console.warn()来手动触发黄屏警告。 在默认情况下，开发模式中启用了黄屏警告。可以通过以下代码关闭：</p>
<blockquote>
<p>console.disableYellowBox = true;<br>console.warn(‘YellowBox is disabled.’);</p>
</blockquote>
<p>你也可以通过代码屏蔽指定的警告，像下面这样设置一个数组：</p>
<blockquote>
<p>console.ignoredYellowBox = [‘Warning: …’];</p>
</blockquote>
<p>数组中的字符串就是要屏蔽的警告的开头的内容。（例如上面的代码会屏蔽掉所有以Warning开头的警告内容）</p>
<blockquote>
<p>红屏和黄屏在发布版（release/production）中都是自动禁用的。</p>
</blockquote>
<h3 id="访问控制台日志"><a href="#访问控制台日志" class="headerlink" title="访问控制台日志"></a>访问控制台日志</h3><p>在运行RN应用时，可以在终端中运行如下命令来查看控制台的日志：</p>
<blockquote>
<p>react-native log-ios<br>react-native log-android</p>
</blockquote>
<p>此外，你也可以在iOS模拟器的菜单中选择Debug → Open System Log…来查看。如果是Android应用，无论是运行在模拟器或是真机上，都可以通过在终端命令行里运行adb logcat *:S ReactNative:V ReactNativeJS:V命令来查看。</p>
<h3 id="Chrome开发者工具"><a href="#Chrome开发者工具" class="headerlink" title="Chrome开发者工具"></a>Chrome开发者工具</h3><p>在开发者菜单中选择”Debug JS Remotely”选项，即可以开始在Chrome中调试JavaScript代码。点击这个选项的同时会自动打开调试页面 <a href="http://localhost:8081/debugger-ui" target="_blank" rel="external">http://localhost:8081/debugger-ui</a>.</p>
<p>在Chrome的菜单中选择Tools → Developer Tools可以打开开发者工具，也可以通过键盘快捷键来打开（Mac上是Command⌘ + Option⌥ + I，Windows上是Ctrl + Shift + I或是F12）。打开有异常时暂停（Pause On Caught Exceptions）选项，能够获得更好的开发体验。</p>
<blockquote>
<p>Chrome中并不能直接看到App的用户界面，而只能提供console的输出，以及在sources项中断点调试js脚本。</p>
<p>目前无法正常使用React开发插件（就是某些教程或截图上提到的Chrome开发工具上多出来的React选项），但这并不影响代码的调试。如果你需要像调试web页面那样查看RN应用的jsx结构，暂时只能使用Nuclide的”React Native Inspector”这一功能来代替。</p>
</blockquote>
<h4 id="使用Chrome开发者工具来在设备上调试"><a href="#使用Chrome开发者工具来在设备上调试" class="headerlink" title="使用Chrome开发者工具来在设备上调试"></a>使用Chrome开发者工具来在设备上调试</h4><p>对于iOS真机来说，需要打开 RCTWebSocketExecutor.m文件，然后将其中的”localhost”改为你的电脑的IP地址，最后启用开发者菜单中的”Debug JS Remotely”选项。</p>
<p>对于Android 5.0+设备（包括模拟器）来说，将设备通过USB连接到电脑上后，可以使用adb命令行工具来设定从设备到电脑的端口转发：</p>
<blockquote>
<p>adb reverse tcp:8081 tcp:8081</p>
</blockquote>
<p>如果设备Android版本在5.0以下，则可以在开发者菜单中选择”Dev Settings - Debug server host for device”，然后在其中填入电脑的”IP地址:端口“。</p>
<blockquote>
<p>如果在Chrome调试时遇到一些问题，那有可能是某些Chrome的插件引起的。试着禁用所有的插件，然后逐个启用，以确定是否某个插件影响到了调试。</p>
</blockquote>
<h4 id="使用自定义的JavaScript调试器来调试"><a href="#使用自定义的JavaScript调试器来调试" class="headerlink" title="使用自定义的JavaScript调试器来调试"></a>使用自定义的JavaScript调试器来调试</h4><p>如果想用其他的JavaScript调试器来代替Chrome，可以设置一个名为REACT_DEBUGGER的环境变量，其值为启动自定义调试器的命令。调试的流程依然是从开发者菜单中的”Debug JS Remotely”选项开始。</p>
<p>被指定的调试器需要知道项目所在的目录（可以一次传递多个目录参数，以空格隔开）。例如，如果你设定了REACT_DEBUGGER=”node /某个路径/launchDebugger.js –port 2345 –type ReactNative”，那么启动调试器的命令就应该是node /某个路径/launchDebugger.js –port 2345 –type ReactNative /某个路径/你的RN项目目录。</p>
<blockquote>
<p>以这种方式执行的调试器最好是一个短进程（short-lived processes），同时最好也不要有超过200k的文字输出。</p>
</blockquote>
<h4 id="在Android上使用Stetho来调试"><a href="#在Android上使用Stetho来调试" class="headerlink" title="在Android上使用Stetho来调试"></a>在Android上使用Stetho来调试</h4><ol>
<li>在android/app/build.gradle文件中添加：</li>
</ol>
<blockquote>
<p>compile ‘com.facebook.stetho:stetho:1.3.1’<br>compile ‘com.facebook.stetho:stetho-okhttp3:1.3.1’</p>
</blockquote>
<ol>
<li>在android/app/src/main/java/com/{yourAppName}/MainApplication.java文件中添加：</li>
</ol>
<blockquote>
<p>import com.facebook.react.modules.network.ReactCookieJarContainer;<br>import com.facebook.stetho.Stetho;<br>import okhttp3.OkHttpClient;<br>import com.facebook.react.modules.network.OkHttpClientProvider;<br>import com.facebook.stetho.okhttp3.StethoInterceptor;<br>import java.util.concurrent.TimeUnit;</p>
</blockquote>
<ol>
<li>在android/app/src/main/java/com/{yourAppName}/MainApplication.java文件中添加：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate();</div><div class="line">      Stetho.initializeWithDefaults(<span class="keyword">this</span>);</div><div class="line">      OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">      .connectTimeout(<span class="number">0</span>, TimeUnit.MILLISECONDS)</div><div class="line">      .readTimeout(<span class="number">0</span>, TimeUnit.MILLISECONDS)</div><div class="line">      .writeTimeout(<span class="number">0</span>, TimeUnit.MILLISECONDS)</div><div class="line">      .cookieJar(<span class="keyword">new</span> ReactCookieJarContainer())</div><div class="line">      .addNetworkInterceptor(<span class="keyword">new</span> StethoInterceptor())</div><div class="line">      .build();</div><div class="line">      OkHttpClientProvider.replaceOkHttpClient(client);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>运行react-native run-android</p>
</li>
<li><p>打开一个新的Chrome选项卡，在地址栏中输入chrome://inspect并回车。在页面中选择’Inspect device’ （标有”Powered by Stetho”字样）。</p>
</li>
</ol>
<h3 id="调试原生代码"><a href="#调试原生代码" class="headerlink" title="调试原生代码"></a>调试原生代码</h3><p>在和原生代码打交道时（比如编写原生模块），可以直接从Android Studio或是Xcode中启动应用，并利用这些IDE的内置功能来调试（比如设置断点）。这一方面和开发原生应用并无二致。</p>
<h3 id="性能监测"><a href="#性能监测" class="headerlink" title="性能监测"></a>性能监测</h3><p>你可以在开发者菜单中选择”Pref Monitor”选项以开启一个悬浮层，其中会显示应用的当前帧数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native 进阶（三）–定时器、直接操作（setNativeProps）、调试&lt;br&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://cokernut.top/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://cokernut.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 学习笔记--进阶（二）--动画</title>
    <link href="http://cokernut.top/2016/12/06/ReactNative/React%20Native%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%8C%EF%BC%89--%E5%8A%A8%E7%94%BB/"/>
    <id>http://cokernut.top/2016/12/06/ReactNative/React Native学习笔记--进阶（二）--动画/</id>
    <published>2016-12-05T16:00:00.000Z</published>
    <updated>2016-12-08T08:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>React Native 进阶（二）–动画<br><a id="more"></a></p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>流畅、有意义的动画对于移动应用用户体验来说是非常必要的。我们可以联合使用两个互补的系统：用于全局的布局动画LayoutAnimation，和用于创建更精细的交互控制的动画Animated。</p>
<h3 id="Animated"><a href="#Animated" class="headerlink" title="Animated"></a>Animated</h3><p>Animated库使得开发者可以非常容易地实现各种各样的动画和交互方式，并且具备极高的性能。Animated仅关注动画的输入与输出声明，在其中建立一个可配置的变化函数，然后使用简单的start/stop方法来控制动画按顺序执行。<br>示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Animated,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Simple</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  _callBack() &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"call Back"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">bounceValue</span>: <span class="keyword">new</span> Animated.Value(<span class="number">0</span>),</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Animated.Image</span>                         // 可选的基本组件类型<span class="attr">:</span> <span class="attr">Image</span>, <span class="attr">Text</span>, <span class="attr">View</span></span></span></div><div class="line">        <span class="attr">source</span>=<span class="string">&#123;&#123;uri:</span> '<span class="attr">http:</span>//<span class="attr">i.imgur.com</span>/<span class="attr">XMKOH81.jpg</span>'&#125;&#125;</div><div class="line">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></div><div class="line">          <span class="attr">flex:</span> <span class="attr">1</span>,</div><div class="line">          <span class="attr">transform:</span> [                        // `<span class="attr">transform</span>`是一个有序数组（动画按顺序执行）</div><div class="line">            &#123;<span class="attr">scale:</span> <span class="attr">this.state.bounceValue</span>&#125;,  // 将`<span class="attr">bounceValue</span>`赋值给 `<span class="attr">scale</span>`比例</div><div class="line">          ]</div><div class="line">        &#125;&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    this.state.bounceValue.setValue(1.5);     // 设置一个较大的初始值</div><div class="line">    Animated.spring(                          // 可选的基本动画类型: spring, decay, timing</div><div class="line">      this.state.bounceValue,                 // 将`bounceValue`值动画化</div><div class="line">      &#123;</div><div class="line">        toValue: 0.8,                         // 将其值以动画的形式改到一个较小值</div><div class="line">        friction: 2,                          // 弹性系数（摩擦力），用于回弹，数值越大弹性越小</div><div class="line">      &#125;</div><div class="line">    ).start(this._callBack);                  // 开始执行动画，并传入回调函数</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">export default Simple;</div></pre></td></tr></table></figure>
<p>bounceValue在构造函数中初始化为state的一部分，然后和图片的缩放比例进行绑定。在动画执行的背后，其数值会被不断的计算并用于设置缩放比例。当组件刚刚挂载的时候，缩放比例被设置到1.5。然后紧跟着在bounceValue上执行了一个弹跳动画(spring)，会逐帧刷新数值，并同步更新所有依赖本数值的绑定（在这个例子里，就是图片的缩放比例）。比起调用setState然后重新渲染，这一运行过程要快得多。因为整个配置都是声明式的，我们可以实现更进一步的优化，只要序列化好配置，然后我们可以在一个高优先级的线程执行动画。</p>
<h4 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h4><p>大部分你需要的东西都来自Animated模块。它包括两个值类型，Value用于单个的值，而ValueXY用于向量值；还包括三种动画类型，spring，decay，还有timing，以及三种组件类型，View，Text和Image。你可以使用Animated.createAnimatedComponent方法来对其它类型的组件创建动画。</p>
<p>这三种动画类型可以用来创建几乎任何你需要的动画曲线，因为它们每一个都可以被自定义：</p>
<ul>
<li><p>spring: 基础的单次弹跳物理模型，符合Origami设计标准</p>
<ul>
<li>friction: 摩擦力，默认为7.</li>
<li>tension: 张力，默认40。</li>
</ul>
</li>
<li><p>decay: 以一个初始速度开始并且逐渐减慢停止。</p>
<ul>
<li>velocity: 起始速度，必填参数。</li>
<li>deceleration: 速度衰减比例，默认为0.997。</li>
</ul>
</li>
<li><p>timing: 从时间范围映射到渐变的值。</p>
<ul>
<li>duration: 动画持续的时间（单位是毫秒），默认为500。</li>
<li>easing：一个用于定义曲线的渐变函数。阅读Easing模块可以找到许多预定义的函数。iOS默认为Easing.inOut(Easing.ease)。</li>
<li>delay: 在一段时间之后开始动画（单位是毫秒），默认为0。</li>
</ul>
</li>
</ul>
<p>动画可以通过调用start方法来开始。start接受一个回调函数，当动画结束的时候会调用此回调函数。如果动画是因为正常播放完成而结束的，回调函数被调用时的参数为{finished: true}，但若动画是在结束之前被调用了stop而结束（可能是被一个手势或者其它的动画打断），它会收到参数{finished: false}。</p>
<h4 id="组合动画"><a href="#组合动画" class="headerlink" title="组合动画"></a>组合动画</h4><p>多个动画可以通过parallel（同时执行）、sequence（顺序执行）、stagger（错开执行，可能会同时（不同步）在执行，延迟时间不一样，其实就是插入了delay的parrllel）和delay（延期执行）来组合使用。它们中的每一个都接受一个要执行的动画数组，并且自动在适当的时候调用start/stop。举个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Animated.sequence([            <span class="comment">// 首先执行decay动画，结束后同时执行spring和twirl动画</span></div><div class="line">  Animated.decay(position, &#123;   <span class="comment">// 滑行一段距离后停止</span></div><div class="line">    velocity: &#123;<span class="attr">x</span>: gestureState.vx, <span class="attr">y</span>: gestureState.vy&#125;, <span class="comment">// 根据用户的手势设置速度</span></div><div class="line">    deceleration: <span class="number">0.997</span>,</div><div class="line">  &#125;),</div><div class="line">  Animated.parallel([          <span class="comment">// 在decay之后并行执行：</span></div><div class="line">    Animated.spring(position, &#123;</div><div class="line">      <span class="attr">toValue</span>: &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;    <span class="comment">// 返回到起始点开始</span></div><div class="line">    &#125;),</div><div class="line">    Animated.timing(twirl, &#123;   <span class="comment">// 同时开始旋转</span></div><div class="line">      toValue: <span class="number">360</span>,</div><div class="line">    &#125;),</div><div class="line">  ]),</div><div class="line">]).start();                    <span class="comment">// 执行这一整套动画序列</span></div></pre></td></tr></table></figure>
<p>默认情况下，如果任何一个动画被停止或中断了，组内所有其它的动画也会被停止。Parallel有一个stopTogether属性，如果设置为false，可以禁用自动停止。</p>
<h4 id="插值（interpolate）"><a href="#插值（interpolate）" class="headerlink" title="插值（interpolate）"></a>插值（interpolate）</h4><p>Animated API还有一个很强大的部分就是interpolate插值函数。它可以接受一个输入区间，然后将其映射到另一个的输出区间。下面是一个一个简单的从0-1区间到0-100区间的映射示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">value.interpolate(&#123;</div><div class="line">  <span class="attr">inputRange</span>: [<span class="number">0</span>, <span class="number">1</span>],</div><div class="line">  <span class="attr">outputRange</span>: [<span class="number">0</span>, <span class="number">100</span>],</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>interpolate还支持定义多个区间段落，常用来定义静止区间等。举个例子，要让输入在接近-300时取相反值，然后在输入接近-100时到达0，然后在输入接近0时又回到1，接着一直到输入到100的过程中逐步回到0，最后形成一个始终为0的静止区间，对于任何大于100的输入都返回0。具体写法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">value.interpolate(&#123;</div><div class="line">  <span class="attr">inputRange</span>: [<span class="number">-300</span>, <span class="number">-100</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">101</span>],</div><div class="line">  <span class="attr">outputRange</span>: [<span class="number">300</span>,    <span class="number">0</span>, <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>],</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>它的最终映射结果如下：</p>
<table>
<thead>
<tr>
<th>输入</th>
<th>-400</th>
<th>-300</th>
<th>-200</th>
<th>-100</th>
<th>-50</th>
<th>0</th>
<th>50</th>
<th>100</th>
<th>101</th>
<th>200  </th>
</tr>
</thead>
<tbody>
<tr>
<td>输出</td>
<td>450</td>
<td>300</td>
<td>150</td>
<td>0</td>
<td>0.5</td>
<td>1</td>
<td>0.5</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>interpolate还支持到字符串的映射，从而可以实现颜色以及带有单位的值的动画变换。例如你可以像下面这样实现一个旋转动画：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">value.interpolate(&#123;</div><div class="line">  <span class="attr">inputRange</span>: [<span class="number">0</span>, <span class="number">360</span>],</div><div class="line">  <span class="attr">outputRange</span>: [<span class="string">'0deg'</span>, <span class="string">'360deg'</span>]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>interpolation还支持任意的渐变函数，其中有很多已经在Easing类中定义了，包括二次、指数、贝塞尔等曲线以及step、bounce等方法。interpolation还支持限制输出区间outputRange。你可以通过设置extrapolate、extrapolateLeft或extrapolateRight属性来限制输出区间。默认值是extend（允许超出），不过你可以使用clamp选项来阻止输出值超过outputRange。</p>
<h4 id="跟踪动态值"><a href="#跟踪动态值" class="headerlink" title="跟踪动态值"></a>跟踪动态值</h4><p>动画中所设的值还可以通过跟踪别的值得到。你只要把toValue设置成另一个动态值而不是一个普通数字就行了。比如我们可以用弹跳动画来实现聊天头像的闪动，又比如通过timing设置duration:0来实现快速的跟随。他们还可以使用插值来进行组合：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Animated.spring(follower, &#123;<span class="attr">toValue</span>: leader&#125;).start();</div><div class="line">Animated.timing(opacity, &#123;</div><div class="line">  <span class="attr">toValue</span>: pan.x.interpolate(&#123;</div><div class="line">    <span class="attr">inputRange</span>: [<span class="number">0</span>, <span class="number">300</span>],</div><div class="line">    <span class="attr">outputRange</span>: [<span class="number">1</span>, <span class="number">0</span>],</div><div class="line">  &#125;),</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>ValueXY是一个方便的处理2D交互的办法，譬如旋转或拖拽。它是一个简单的包含了两个Animated.Value实例的包装，然后提供了一系列辅助函数，使得ValueXY在许多时候可以替代Value来使用。比如在上面的代码片段中，leader和follower可以同时为valueXY类型，这样x和y的值都会被跟踪。</p>
<h4 id="输入事件"><a href="#输入事件" class="headerlink" title="输入事件"></a>输入事件</h4><p>Animated.event是Animated API中与输入有关的部分，允许手势或其它事件直接绑定到动态值上。它通过一个结构化的映射语法来完成，使得复杂事件对象中的值可以被正确的解开。第一层是一个数组，允许同时映射多个值，然后数组的每一个元素是一个嵌套的对象。在下面的例子里，你可以发现scrollX被映射到了event.nativeEvent.contentOffset.x(event通常是回调函数的第一个参数)，并且pan.x和pan.y分别映射到gestureState.dx和gestureState.dy（gestureState是传递给PanResponder回调函数的第二个参数）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">onScroll=&#123;Animated.event(</div><div class="line">  [&#123;nativeEvent: &#123;contentOffset: &#123;x: scrollX&#125;&#125;&#125;]   // scrollX = e.nativeEvent.contentOffset.x</div><div class="line">)&#125;</div><div class="line">onPanResponderMove=&#123;Animated.event([</div><div class="line">  null,                                          // 忽略原生事件</div><div class="line">  &#123;dx: pan.x, dy: pan.y&#125;                         // 从gestureState中解析出dx和dy的值</div><div class="line">]);</div></pre></td></tr></table></figure>
<h4 id="响应当前的动画值"><a href="#响应当前的动画值" class="headerlink" title="响应当前的动画值"></a>响应当前的动画值</h4><p>你可能会注意到这里没有一个明显的方法来在动画的过程中读取当前的值——这是出于优化的角度考虑，有些值只有在原生代码运行阶段中才知道。如果你需要在JavaScript中响应当前的值，有两种可能的办法：</p>
<ul>
<li>spring.stopAnimation(callback)会停止动画并且把最终的值作为参数传递给回调函数callback——这在处理手势动画的时候非常有用。</li>
<li>spring.addListener(callback) 会在动画的执行过程中持续异步调用callback回调函数，提供一个最近的值作为参数。这在用于触发状态切换的时候非常有用，譬如当用户拖拽一个东西靠近的时候弹出一个新的气泡选项。不过这个状态切换可能并不会十分灵敏，因为它不像许多连续手势操作（如旋转）那样在60fps下运行。</li>
</ul>
<p><font color="#F77F7F">注意</font>只有声明为可动画化的组件才能被关联动画。View、Text，还有Image都是可动画化的。如果你想让自定义组件可动画化，可以用createAnimatedComponent。这些特殊的组件里面用了一些黑魔法，来把动画数值绑定到属性上，然后在每帧去执行原生更新，来避免每次render和同步过程的开销。他们还处理了在节点卸载时的清理工作以确保使用安全。</p>
<p>动画具备很强的可配置性。自定义或者预定义的过渡函数、延迟、时间、衰减比例、刚度等等。取决于动画类型的不同，你还可以配置更多的参数。</p>
<p>一个Animated.Value可以驱动任意数量的属性，并且每个属性可以配置一个不同的插值函数。插值函数把一个输入的范围映射到输出的范围，通常我们用线性插值，不过你也可以使用其他的过渡函数。默认情况下，当输入超出范围时，它也会对应的进行转换，不过你也可以把输出约束到范围之内。</p>
<p>举个例子，你可能希望你的Animated.Value从0变化到1时，把组件的位置从150px移动到0px，不透明度从0到1。可以通过以下的方法修改style属性来实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">style=&#123;&#123;</div><div class="line">  <span class="attr">opacity</span>: <span class="keyword">this</span>.state.fadeAnim, <span class="comment">// Binds directly</span></div><div class="line">  transform: [&#123;</div><div class="line">    <span class="attr">translateY</span>: <span class="keyword">this</span>.state.fadeAnim.interpolate(&#123;</div><div class="line">      <span class="attr">inputRange</span>: [<span class="number">0</span>, <span class="number">1</span>],</div><div class="line">      <span class="attr">outputRange</span>: [<span class="number">150</span>, <span class="number">0</span>]  <span class="comment">// 0 : 150, 0.5 : 75, 1 : 0</span></div><div class="line">    &#125;),</div><div class="line">  &#125;],</div><div class="line">&#125;&#125;&gt;</div></pre></td></tr></table></figure>
<p>动画还可以被更复杂地组合，通过一些辅助函数例如sequence或者parallel（它们分别用于先后执行多个动画和同时执行多个动画），而且还可以通过把toValue设置为另一个Animated.Value来产生一个动画序列。</p>
<p>Animated.ValueXY则用来处理一些2D动画，譬如滑动。并且还有一些辅助功能譬如setOffset和getLayout来帮助实现一些常见的交互效果，譬如拖放操作(Drag and drop)。</p>
<p>注意Animated模块被设计为可完全序列化的，这样动画可以脱离JavaScript事件循环，以一种高性能的方式运行。这可能会导致API看起来比较难懂，与一个完全同步的动画系统相比稍微有一些奇怪。Animated.Value.addListener可以帮助你解决一些相关限制，不过使用它的时候需要小心，因为将来的版本中它可能会牵扯到性能问题。</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><blockquote>
<p>static decay(value: AnimatedValue | AnimatedValueXY, config: DecayAnimationConfig) </p>
</blockquote>
<p>推动一个值以一个初始的速度和一个衰减系数逐渐变为0。</p>
<blockquote>
<p>static timing(value: AnimatedValue | AnimatedValueXY, config: TimingAnimationConfig) </p>
</blockquote>
<p>推动一个值按照一个过渡曲线而随时间变化。Easing模块定义了一大堆曲线，你也可以使用你自己的函数。</p>
<blockquote>
<p>static spring(value: AnimatedValue | AnimatedValueXY, config: SpringAnimationConfig) </p>
</blockquote>
<p>产生一个基于Rebound和Origami实现的Spring动画。它会在toValue值更新的同时跟踪当前的速度状态，以确保动画连贯。可以链式调用。</p>
<blockquote>
<p>static add(a: Animated, b: Animated) </p>
</blockquote>
<p>将两个动画值相加计算，创建一个新的动画值。</p>
<blockquote>
<p>static multiply(a: Animated, b: Animated) </p>
</blockquote>
<p>将两个动画值相乘计算，创建一个新的动画值。</p>
<blockquote>
<p>static delay(time: number) </p>
</blockquote>
<p>在指定的延迟之后开始动画。</p>
<blockquote>
<p>static sequence(animations: Array<compositeanimation>) </compositeanimation></p>
</blockquote>
<p>按顺序执行一个动画数组里的动画，等待一个完成后再执行下一个。如果当前的动画被中止，后面的动画则不会继续执行。</p>
<blockquote>
<p>static parallel(animations: Array<compositeanimation>, config?: ParallelConfig) </compositeanimation></p>
</blockquote>
<p>同时开始一个动画数组里的全部动画。默认情况下，如果有任何一个动画停止了，其余的也会被停止。你可以通过stopTogether选项来改变这个效果。</p>
<blockquote>
<p>static stagger(time: number, animations: Array<compositeanimation>) </compositeanimation></p>
</blockquote>
<p>一个动画数组，里面的动画有可能会同时执行（重叠），不过会以指定的延迟来开始。用来制作拖尾效果非常合适。</p>
<blockquote>
<p>static event(argMapping: Array<mapping>, config?: EventConfig) </mapping></p>
</blockquote>
<p>接受一个映射的数组，对应的解开每个值，然后调用所有对应的输出的setValue方法。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">onScroll=&#123;this.AnimatedEvent(</div><div class="line">  [&#123;nativeEvent: &#123;contentOffset: &#123;x: this._scrollX&#125;&#125;&#125;]</div><div class="line">  &#123;listener&#125;,          // 可选的异步监听函数</div><div class="line">)</div><div class="line">...</div><div class="line">onPanResponderMove: this.AnimatedEvent([</div><div class="line">  null,                // 忽略原始事件</div><div class="line">  &#123;dx: this._panX&#125;,    // 手势状态参数</div><div class="line">]),</div></pre></td></tr></table></figure>
<blockquote>
<p>static createAnimatedComponent(Component: any) </p>
</blockquote>
<p>使得任何一个React组件支持动画。用它来创建Animated.View等等。</p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote>
<p>Value: AnimatedValue </p>
</blockquote>
<p>表示一个数值的类，用于驱动动画。通常用new Animated.Value(0);来初始化。</p>
<blockquote>
<p>ValueXY: AnimatedValueXY </p>
</blockquote>
<p>表示一个2D值的类，用来驱动2D动画，例如拖动操作等。</p>
<h4 id="class-AnimatedValue"><a href="#class-AnimatedValue" class="headerlink" title="class AnimatedValue"></a>class AnimatedValue</h4><p>用于驱动动画的标准值。一个Animated.Value可以用一种同步的方式驱动多个属性，但同时只能被一个行为所驱动。启用一个新的行为（譬如开始一个新的动画，或者运行setValue）会停止任何之前的动作。</p>
<h5 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h5><blockquote>
<p>constructor(value: number) </p>
<p>setValue(value: number) </p>
</blockquote>
<p>直接设置它的值。这个会停止任何正在进行的动画，然后更新所有绑定的属性。</p>
<blockquote>
<p>setOffset(offset: number) </p>
</blockquote>
<p>设置一个相对值，不论接下来的值是由setValue、一个动画，还是Animated.event产生的，都会加上这个值。常用来在拖动操作一开始的时候用来记录一个修正值（譬如当前手指位置和View位置）。</p>
<blockquote>
<p>flattenOffset() </p>
</blockquote>
<p>把当前的相对值合并到值里，并且将相对值设为0。最终输出的值不会变化。常在拖动操作结束后调用。</p>
<blockquote>
<p>addListener(callback: ValueListenerCallback) </p>
</blockquote>
<p>添加一个异步监听函数，这样你就可以监听动画值的变更。这有时候很有用，因为你没办法同步的读取动画的当前值，因为有时候动画会在原生层次运行。</p>
<blockquote>
<p>removeListener(id: string) </p>
<p>removeAllListeners() </p>
<p>stopAnimation(callback?: ?(value: number) =&gt; void) </p>
</blockquote>
<p>停止任何正在运行的动画或跟踪值。callback会被调用，参数是动画结束后的最终值，这个值可能会用于同步更新状态与动画位置。</p>
<blockquote>
<p>interpolate(config: InterpolationConfigType) </p>
</blockquote>
<p>在更新属性之前对值进行插值。譬如：把0-1映射到0-10。</p>
<blockquote>
<p>animate(animation: Animation, callback: EndCallback) </p>
</blockquote>
<p>一般仅供内部使用。不过有可能一个自定义的动画类会用到此方法。</p>
<blockquote>
<p>stopTracking() </p>
</blockquote>
<p>仅供内部使用。</p>
<blockquote>
<p>track(tracking: Animated) </p>
</blockquote>
<p>仅供内部使用。</p>
<h4 id="class-AnimatedValueXY"><a href="#class-AnimatedValueXY" class="headerlink" title="class AnimatedValueXY"></a>class AnimatedValueXY</h4><p>用来驱动2D动画的2D值，譬如滑动操作等。API和普通的Animated.Value几乎一样，只不过是个复合结构。它实际上包含两个普通的Animated.Value。</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DraggableView</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">   <span class="keyword">constructor</span>(props) &#123;</div><div class="line">     <span class="keyword">super</span>(props);</div><div class="line">     <span class="keyword">this</span>.state = &#123;</div><div class="line">       <span class="attr">pan</span>: <span class="keyword">new</span> Animated.ValueXY(), <span class="comment">// inits to zero</span></div><div class="line">     &#125;;</div><div class="line">     <span class="keyword">this</span>.state.panResponder = PanResponder.create(&#123;</div><div class="line">       <span class="attr">onStartShouldSetPanResponder</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span>,</div><div class="line">       <span class="attr">onPanResponderMove</span>: Animated.event([<span class="literal">null</span>, &#123;</div><div class="line">         <span class="attr">dx</span>: <span class="keyword">this</span>.state.pan.x, <span class="comment">// x,y are Animated.Value</span></div><div class="line">         dy: <span class="keyword">this</span>.state.pan.y,</div><div class="line">       &#125;]),</div><div class="line">       <span class="attr">onPanResponderRelease</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">         Animated.spring(</div><div class="line">           <span class="keyword">this</span>.state.pan,         <span class="comment">// Auto-multiplexed</span></div><div class="line">           &#123;<span class="attr">toValue</span>: &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;&#125; <span class="comment">// Back to zero</span></div><div class="line">         ).start();</div><div class="line">       &#125;,</div><div class="line">     &#125;);</div><div class="line">   &#125;</div><div class="line">   render() &#123;</div><div class="line">     <span class="keyword">return</span> (</div><div class="line">       <span class="xml"><span class="tag">&lt;<span class="name">Animated.View</span></span></span></div><div class="line">         &#123;<span class="attr">...this.state.panResponder.panHandlers</span>&#125;</div><div class="line">         <span class="attr">style</span>=<span class="string">&#123;this.state.pan.getLayout()&#125;</span>&gt;</div><div class="line">         &#123;this.props.children&#125;</div><div class="line">       <span class="tag">&lt;/<span class="name">Animated.View</span>&gt;</span></div><div class="line">     );</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h5 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h5><blockquote>
<p>constructor(valueIn?: ?{x: number | AnimatedValue; y: number | AnimatedValue}) </p>
<p>setValue(value: {x: number; y: number}) </p>
<p>setOffset(offset: {x: number; y: number}) </p>
<p>flattenOffset() </p>
<p>stopAnimation(callback?: ?() =&gt; number) </p>
<p>addListener(callback: ValueXYListenerCallback) </p>
<p>removeListener(id: string) </p>
<p>getLayout() </p>
</blockquote>
<p>将一个{x, y}组合转换为{left, top}以用于样式。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">style=&#123;this.state.anim.getLayout()&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>getTranslateTransform() </p>
</blockquote>
<p>将一个{x, y} 组合转换为一个可用的位移变换(translation transform)，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">style=&#123;&#123;</div><div class="line">  transform: this.state.anim.getTranslateTransform()</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>综合示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Animated,</div><div class="line">  View,</div><div class="line">  Text,</div><div class="line">  Easing</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 弹性动画 ,基础的单次弹跳物理模型</div><div class="line">class Simple extends Component &#123;</div><div class="line">  _callBack() &#123;</div><div class="line">      console.log("call Back");</div><div class="line">  &#125;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      bounceValue: new Animated.Value(0),</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Animated.Image                         // 可选的基本组件类型: Image, Text, View</div><div class="line">        source=&#123;&#123;uri: 'http://i.imgur.com/XMKOH81.jpg'&#125;&#125;</div><div class="line">        style=&#123;&#123;</div><div class="line">          flex: 1,</div><div class="line">          transform: [                        // `transform`是一个有序数组（动画按顺序执行）</div><div class="line">            &#123;scale: this.state.bounceValue&#125;,  // 将`bounceValue`赋值给 `scale`比例属性</div><div class="line">          ]</div><div class="line">        &#125;&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    this.state.bounceValue.setValue(1.5);     // 设置一个较大的初始值</div><div class="line">    Animated.spring(                          // 可选的基本动画类型: spring, decay, timing</div><div class="line">      this.state.bounceValue,                 // 将`bounceValue`值动画化</div><div class="line">      &#123;</div><div class="line">        toValue: 0.8,                         // 将其值以动画的形式改到一个较小值</div><div class="line">        friction: 2,                          // 弹性系数（摩擦力），用于回弹，数值越大弹性越小，默认7</div><div class="line">        tension: 10                           // 张力，默认40。</div><div class="line">      &#125;</div><div class="line">    ).start(this._callBack);                  // 开始执行动画，并传入回调函数</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 透明度位移动画,以一个初始速度开始并且逐渐减慢停止。</div><div class="line"></div><div class="line">class Simple extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      anim: new Animated.Value(0.5),</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    Animated.decay(</div><div class="line">      this.state.anim,</div><div class="line">      &#123; </div><div class="line">        toValue: 2,</div><div class="line">        velocity: 0.2, //起始速度，必填参数。</div><div class="line">        deceleration: 0.99, //速度衰减比例，默认为0.997。</div><div class="line">      &#125;,</div><div class="line">    ).start();</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Animated.Image</div><div class="line">        source=&#123;require('../img/img.jpg')&#125;</div><div class="line">        style=&#123;&#123; //把值赋给透明度属性,Animated.Value从0变化到1时，把组件的位置从150px移动到0px，不透明度从0到1</div><div class="line">          opacity: this.state.anim, // Binds directly</div><div class="line">          transform: [</div><div class="line">            &#123;translateY: this.state.anim.interpolate(&#123; //Y轴位移变化</div><div class="line">              inputRange: [0, 20],</div><div class="line">              outputRange: [0, 400]</div><div class="line">            &#125;)&#125;</div><div class="line">          ],</div><div class="line">        &#125;&#125;&gt;</div><div class="line">      &lt;/Animated.Image&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Simple</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">anim</span>: <span class="keyword">new</span> Animated.Value(<span class="number">0</span>), <span class="comment">//初始化，value=0</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    Animated.sequence([      <span class="comment">//顺序执行</span></div><div class="line">      Animated.timing(      <span class="comment">//从时间范围映射到渐变的值</span></div><div class="line">        <span class="keyword">this</span>.state.anim,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">toValue</span>: <span class="number">1</span>, <span class="comment">//value要从0变为1</span></div><div class="line">          easing: Easing.linear, <span class="comment">//变化方式</span></div><div class="line">          duration: <span class="number">2500</span>, <span class="comment">//动画时间，默认500</span></div><div class="line">          delay: <span class="number">1000</span> <span class="comment">//在一段时间之后开始动画（单位是毫秒），默认为0。</span></div><div class="line">        &#125;</div><div class="line">      ),</div><div class="line">      Animated.delay(<span class="number">2000</span>), <span class="comment">//延迟执行</span></div><div class="line">    ]).start(<span class="keyword">this</span>._callBack);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _callBack() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"call Back"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Animated.Image</span></span></span></div><div class="line">        <span class="attr">source</span>=<span class="string">&#123;require(</span>'<span class="attr">..</span>/<span class="attr">img</span>/<span class="attr">img.jpg</span>')&#125;</div><div class="line">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></div><div class="line">          <span class="attr">opacity:</span> <span class="attr">this.state.anim</span>, //透明度变化</div><div class="line">          <span class="attr">transform:</span> [</div><div class="line">            &#123;<span class="attr">scale:</span> <span class="attr">this.state.anim.interpolate</span>(&#123; //缩放变化</div><div class="line">              <span class="attr">inputRange:</span> [<span class="attr">0</span>, <span class="attr">1</span>],</div><div class="line">              <span class="attr">outputRange:</span> [<span class="attr">1</span>, <span class="attr">0.5</span>],</div><div class="line">            &#125;)&#125;,</div><div class="line">            &#123;<span class="attr">translateX:</span> <span class="attr">this.state.anim.interpolate</span>(&#123; //<span class="attr">X</span>轴位移变化</div><div class="line">              <span class="attr">inputRange:</span> [<span class="attr">0</span>, <span class="attr">1</span>],</div><div class="line">              <span class="attr">outputRange:</span> [<span class="attr">0</span>, <span class="attr">150</span>]</div><div class="line">            &#125;)&#125;,</div><div class="line">            &#123;<span class="attr">translateY:</span> <span class="attr">this.state.anim.interpolate</span>(&#123; //<span class="attr">Y</span>轴位移变化</div><div class="line">              <span class="attr">inputRange:</span> [<span class="attr">0</span>, <span class="attr">1</span>],</div><div class="line">              <span class="attr">outputRange:</span> [<span class="attr">0</span>, <span class="attr">150</span>]</div><div class="line">            &#125;)&#125;,</div><div class="line">            &#123;<span class="attr">translateY:</span> <span class="attr">this.state.anim.interpolate</span>(&#123; //<span class="attr">Y</span>轴位移变化</div><div class="line">              <span class="attr">inputRange:</span> [<span class="attr">0</span>, <span class="attr">1</span>],</div><div class="line">              <span class="attr">outputRange:</span> [<span class="attr">0</span>, <span class="attr">150</span>]</div><div class="line">            &#125;)&#125;,</div><div class="line">            &#123;<span class="attr">rotateZ:</span> <span class="attr">this.state.anim.interpolate</span>(&#123; //<span class="attr">Z</span>轴旋转变化</div><div class="line">              <span class="attr">inputRange:</span> [<span class="attr">0</span>, <span class="attr">1</span>],</div><div class="line">              <span class="attr">outputRange:</span> ['<span class="attr">0deg</span>', '<span class="attr">360deg</span>']</div><div class="line">            &#125;)&#125;,</div><div class="line">            &#123;<span class="attr">rotateX:</span> <span class="attr">this.state.anim.interpolate</span>(&#123; //<span class="attr">X</span>轴旋转变化</div><div class="line">              <span class="attr">inputRange:</span> [<span class="attr">0</span>, <span class="attr">1</span>],</div><div class="line">              <span class="attr">outputRange:</span> ['<span class="attr">0deg</span>', '<span class="attr">360deg</span>']</div><div class="line">            &#125;)&#125;,</div><div class="line">            &#123;<span class="attr">rotateY:</span> <span class="attr">this.state.anim.interpolate</span>(&#123; //<span class="attr">Y</span>轴旋转变化</div><div class="line">              <span class="attr">inputRange:</span> [<span class="attr">0</span>, <span class="attr">1</span>],</div><div class="line">              <span class="attr">outputRange:</span> ['<span class="attr">0deg</span>', '<span class="attr">360deg</span>']</div><div class="line">            &#125;)&#125;,</div><div class="line">          ]</div><div class="line">        &#125;&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">export default Simple;</div></pre></td></tr></table></figure>
<h3 id="LayoutAnimation"><a href="#LayoutAnimation" class="headerlink" title="LayoutAnimation"></a>LayoutAnimation</h3><p>LayoutAnimation的作用是当布局变化时，自动将视图运动到它们新的位置上，LayoutAnimation允许你在全局范围内创建和更新动画，这些动画会在下一次渲染或布局周期运行。它常用来更新flexbox布局，因为它可以无需测量或者计算特定属性就能直接产生动画。尤其是当布局变化可能影响到父节点（譬如“查看更多”展开动画既增加父节点的尺寸又会将位于本行之下的所有行向下推动）时，如果不使用LayoutAnimation，可能就需要显式声明组件的坐标，才能使得所有受影响的组件能够同步运行动画。</p>
<p>注意尽管LayoutAnimation非常强大且有用，但它对动画本身的控制没有Animated或者其它动画库那样方便，所以如果你使用LayoutAnimation无法实现一个效果，那可能还是要考虑其他的方案。</p>
<p>另外，如果要在Android上使用LayoutAnimation，那么目前还需要在UIManager中启用：</p>
<blockquote>
<p>UIManager.setLayoutAnimationEnabledExperimental &amp;&amp; UIManager.setLayoutAnimationEnabledExperimental(true);</p>
</blockquote>
<p>一个常用的调用此API的办法是调用LayoutAnimation.configureNext，然后调用setState。</p>
<h4 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h4><blockquote>
<p>static configureNext(config: Config, onAnimationDidEnd?: Function) </p>
</blockquote>
<p>计划下一次布局要发生的动画。</p>
<p>@param config 表示动画相应的属性</p>
<ul>
<li>duration 动画持续时间，单位是毫秒</li>
<li>create, 配置创建新视图时的动画。(参阅 Anim 类型)</li>
<li>update, 配置被更新的视图的动画。(参阅 Anim 类型)</li>
</ul>
<p>@param onAnimationDidEnd 当动画结束的时候被调用。只在iOS设备上支持。　　<br>@param onError 当动画残生错误的时候被调用。只在iOS设备上支持。</p>
<blockquote>
<p>static create(duration: number, type, creationProp) </p>
</blockquote>
<p>用来创建configureNext所需的config参数的辅助函数。</p>
<h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><blockquote>
<p>Types: CallExpression<br>Properties: CallExpression<br>configChecker: CallExpression<br>Presets: ObjectExpression<br>easeInEaseOut: CallExpression<br>linear: CallExpression<br>spring: CallExpression </p>
</blockquote>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  View,</div><div class="line">  LayoutAnimation,</div><div class="line">  StyleSheet,</div><div class="line">  TouchableOpacity,</div><div class="line">  Text</div><div class="line"> &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">w</span>: <span class="number">100</span>, <span class="attr">h</span>: <span class="number">100</span> &#125;;</div><div class="line">    <span class="keyword">this</span>._onPress = <span class="keyword">this</span>._onPress.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillMount() &#123;</div><div class="line">    <span class="comment">// 创建动画</span></div><div class="line">    LayoutAnimation.spring();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _onPress() &#123;</div><div class="line">    <span class="comment">// 动画更新，让视图的尺寸变化以动画形式展现</span></div><div class="line">    LayoutAnimation.spring();</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">w</span>: <span class="keyword">this</span>.state.w + <span class="number">15</span>, <span class="attr">h</span>: <span class="keyword">this</span>.state.h + <span class="number">15</span>&#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[styles.box,</span> &#123;<span class="attr">width:</span> <span class="attr">this.state.w</span>, <span class="attr">height:</span> <span class="attr">this.state.h</span>&#125;]&#125; /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;this._onPress&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.button&#125;</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.buttonText&#125;</span>&gt;</span>点击！<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: 'center',</div><div class="line">    alignItems: 'center',</div><div class="line">  &#125;,</div><div class="line">  box: &#123;</div><div class="line">    backgroundColor: 'red',</div><div class="line">  &#125;,</div><div class="line">  button: &#123;</div><div class="line">    marginTop: 10,</div><div class="line">    paddingVertical: 10,</div><div class="line">    paddingHorizontal: 20,</div><div class="line">    backgroundColor: 'black',</div><div class="line">  &#125;,</div><div class="line">  buttonText: &#123;</div><div class="line">    color: 'white',</div><div class="line">    fontSize: 16,</div><div class="line">    fontWeight: 'bold',</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default Sample;</div></pre></td></tr></table></figure>
<h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h4><p>requestAnimationFrame是一个对浏览器标准API的兼容实现，你可能已经熟悉它了。它接受一个函数作为唯一的参数，并且在下一次重绘之前调用此函数。一些基于JavaScript的动画库高度依赖于这一API。通常你不必直接调用它——那些动画库会替你管理好帧的更新。</p>
<h4 id="react-tween-state-不推荐–用Animated来替代"><a href="#react-tween-state-不推荐–用Animated来替代" class="headerlink" title="react-tween-state(不推荐–用Animated来替代)"></a>react-tween-state(不推荐–用Animated来替代)</h4><p>react-tween-state是一个极小的库，正如它名字（tween：补间）表示的含义：它生成一个节点的状态的中间值，从一个开始值，结束于一个到达值。这意味着它会生成这两者之间的值，然后在每次requestAnimationFrame的时候修改状态。</p>
<p>一个最基础的从一个值运动到另一个值的办法就是线性过渡：只需要将结束值减去开始值，然后除以动画总共需要经历的帧数，再在每一帧加到当前值上，一直到结束值位置。线性过渡有时候看起来怪异且不自然，所以react-tween-state提供了一系列常用的过渡函数，可以用于使你的动画更加自然。</p>
<p>这个库并未随React Native一起发布——要在你的工程中使用它，则需要先在你的工程目录下执行npm i react-tween-state –save来安装。<br>示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tweenState <span class="keyword">from</span> <span class="string">'react-tween-state'</span>;</div><div class="line"><span class="keyword">import</span> reactMixin <span class="keyword">from</span> <span class="string">'react-mixin'</span>; <span class="comment">// https://github.com/brigand/react-mixin</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;;</div><div class="line">    <span class="keyword">this</span>._animateOpacity = <span class="keyword">this</span>._animateOpacity.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _animateOpacity() &#123;</div><div class="line">    <span class="keyword">this</span>.tweenState(<span class="string">'opacity'</span>, &#123;</div><div class="line">      <span class="attr">easing</span>: tweenState.easingTypes.easeOutQuint,</div><div class="line">      <span class="attr">duration</span>: <span class="number">1000</span>,</div><div class="line">      <span class="attr">endValue</span>: <span class="keyword">this</span>.state.opacity === <span class="number">0.2</span> ? <span class="number">1</span> : <span class="number">0.2</span>,</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;flex:</span> <span class="attr">1</span>, <span class="attr">justifyContent:</span> '<span class="attr">center</span>', <span class="attr">alignItems:</span> '<span class="attr">center</span>'&#125;&#125;&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">TouchableWithoutFeedback</span> <span class="attr">onPress</span>=<span class="string">&#123;this._animateOpacity&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">ref</span>=<span class="string">&#123;component</span> =&gt;</span> this._box = component&#125;</div><div class="line">                style=&#123;&#123;width: 200, height: 200, backgroundColor: 'red',</div><div class="line">                        opacity: this.getTweeningValue('opacity')&#125;&#125; /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">TouchableWithoutFeedback</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">reactMixin.onClass(App, tweenState.Mixin);</div></pre></td></tr></table></figure>
<h4 id="Rebound-不推荐–用Animated来替代"><a href="#Rebound-不推荐–用Animated来替代" class="headerlink" title="Rebound (不推荐–用Animated来替代)"></a>Rebound (不推荐–用Animated来替代)</h4><p>Rebound.js是一个安卓版Rebound的JavaScript移植版。它在概念上类似react-tween-state：你有一个起始值，然后定义一个结束值，然后Rebound会生成所有中间的值并用于你的动画。Rebound基于弹性物理模型，你不需要提供一个动画的持续时间，它会自动根据弹性系数、助力、当前值和结束值来计算。在React Native内部应用了Rebound，比如Navigator和WarningBox。</p>
<p>需要注意的是Rebound动画可以被中断——中断之后会从当前状态弹回初始值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> rebound <span class="keyword">from</span> <span class="string">'rebound'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>._onPressIn = <span class="keyword">this</span>._onPressIn.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>._onPressOut = <span class="keyword">this</span>._onPressOut.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 首先我们初始化一个spring动画，并添加监听函数，</span></div><div class="line">  <span class="comment">// 这个函数会在spring更新时调用setState</span></div><div class="line">  componentWillMount() &#123;</div><div class="line">    <span class="comment">// 初始化spring</span></div><div class="line">    <span class="keyword">this</span>.springSystem = <span class="keyword">new</span> rebound.SpringSystem();</div><div class="line">    <span class="keyword">this</span>._scrollSpring = <span class="keyword">this</span>.springSystem.createSpring();</div><div class="line">    <span class="keyword">var</span> springConfig = <span class="keyword">this</span>._scrollSpring.getSpringConfig();</div><div class="line">    springConfig.tension = <span class="number">230</span>;</div><div class="line">    springConfig.friction = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>._scrollSpring.addListener(&#123;</div><div class="line">      <span class="attr">onSpringUpdate</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">scale</span>: <span class="keyword">this</span>._scrollSpring.getCurrentValue()&#125;);</div><div class="line">      &#125;,</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 将spring的初始值设为1</span></div><div class="line">    <span class="keyword">this</span>._scrollSpring.setCurrentValue(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _onPressIn() &#123;</div><div class="line">    <span class="keyword">this</span>._scrollSpring.setEndValue(<span class="number">0.5</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _onPressOut() &#123;</div><div class="line">    <span class="keyword">this</span>._scrollSpring.setEndValue(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">var</span> imageStyle = &#123;</div><div class="line">      <span class="attr">width</span>: <span class="number">250</span>,</div><div class="line">      <span class="attr">height</span>: <span class="number">200</span>,</div><div class="line">      <span class="attr">transform</span>: [&#123;<span class="attr">scaleX</span>: <span class="keyword">this</span>.state.scale&#125;, &#123;<span class="attr">scaleY</span>: <span class="keyword">this</span>.state.scale&#125;],</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> imageUri = <span class="string">"img/ReboundExample.png"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">TouchableWithoutFeedback</span> <span class="attr">onPressIn</span>=<span class="string">&#123;this._onPressIn&#125;</span></span></div><div class="line">                                  <span class="attr">onPressOut</span>=<span class="string">&#123;this._onPressOut&#125;</span>&gt;</div><div class="line">          <span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=<span class="string">&#123;&#123;uri:</span> <span class="attr">imageUri</span>&#125;&#125; <span class="attr">style</span>=<span class="string">&#123;imageStyle&#125;</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">TouchableWithoutFeedback</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你还可以为弹跳值启用边界，这样它们不会超出，而是会缓缓接近最终值。上面的例子中可以使用this._scrollSpring.setOvershootClampingEnabled(true)来启用边界。</p>
<h5 id="关于setNativeProps"><a href="#关于setNativeProps" class="headerlink" title="关于setNativeProps"></a>关于setNativeProps</h5><p>setNativeProps方法可以使我们直接修改基于原生视图的组件的属性，而不需要使用setState来重新渲染整个组件树。</p>
<p>我们可以把这个用在Rebound样例中来更新缩放比例——如果我们要更新的组件有一个非常深的内嵌结构，并且没有使用shouldComponentUpdate来优化，那么使用setNativeProps就是有用处的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 回到上面示例的那个组件中，找到componentWillMount方法，</span></div><div class="line"><span class="comment">// 然后将scrollSpring的监听函数替换为如下代码:</span></div><div class="line"><span class="keyword">this</span>._scrollSpring.addListener(&#123;</div><div class="line">  <span class="attr">onSpringUpdate</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._photo) &#123; <span class="keyword">return</span> &#125;</div><div class="line">    <span class="keyword">var</span> v = <span class="keyword">this</span>._scrollSpring.getCurrentValue();</div><div class="line">    <span class="keyword">var</span> newProps = &#123;<span class="attr">style</span>: &#123;<span class="attr">transform</span>: [&#123;<span class="attr">scaleX</span>: v&#125;, &#123;<span class="attr">scaleY</span>: v&#125;]&#125;&#125;;</div><div class="line">    <span class="keyword">this</span>._photo.setNativeProps(newProps);</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 最后，我们修改render方法，不再通过style来传入transform（避免</span></div><div class="line"><span class="comment">// 重新渲染时产生冲突）；然后给图片加上ref引用。 </span></div><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">TouchableWithoutFeedback</span> <span class="attr">onPressIn</span>=<span class="string">&#123;this._onPressIn&#125;</span> <span class="attr">onPressOut</span>=<span class="string">&#123;this._onPressOut&#125;</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Image</span> <span class="attr">ref</span>=<span class="string">&#123;component</span> =&gt;</span> this._photo = component&#125;</div><div class="line">               source=&#123;&#123;uri: "https://facebook.github.io/react-native/img/ReboundExample.png"&#125;&#125;</div><div class="line">               style=&#123;&#123;width: 250, height: 200&#125;&#125; /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableWithoutFeedback</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过你没办法把setNativeProps和react-tween-state结合使用，因为更新的补间值会自动被库设置到state上——Rebound则不同，它通过onSprintUpdate函数在每一帧中给我们提供一个更新后的值。</p>
<p>如果你发现你的动画丢帧（低于60帧每秒），可以尝试使用setNativeProps或者shouldComponentUpdate来优化它们。你还可能需要将部分计算工作放在动画完成之后进行，这时可以使用InteractionManager。你还可以使用应用内的开发者菜单中的“FPS Monitor”工具来监控应用的帧率。</p>
<h4 id="导航器场景切换"><a href="#导航器场景切换" class="headerlink" title="导航器场景切换"></a>导航器场景切换</h4><p>Navigator使用JavaScript实现，而NavigatoIOS则是一个对于UINavigationController提供的原生功能的包装。所以这些场景切换动画仅仅对Navigator有效。为了在Navigator中重新创建UINavigationController所提供的动画并且使之可以被自定义，React Native导出了一个NavigatorSceneConfigsAPI。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dimensions &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">var</span> SCREEN_WIDTH = Dimensions.get(<span class="string">'window'</span>).width;</div><div class="line"><span class="keyword">var</span> BaseConfig = Navigator.SceneConfigs.FloatFromRight;</div><div class="line"></div><div class="line"><span class="keyword">var</span> CustomLeftToRightGesture = <span class="built_in">Object</span>.assign(&#123;&#125;, BaseConfig.gestures.pop, &#123;</div><div class="line">  <span class="comment">// 用户中断返回手势时，迅速弹回  </span></div><div class="line">  snapVelocity: <span class="number">8</span>,</div><div class="line">  <span class="comment">// 如下设置可以使我们在屏幕的任何地方拖动它</span></div><div class="line">  edgeHitWidth: SCREEN_WIDTH,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> CustomSceneConfig = <span class="built_in">Object</span>.assign(&#123;&#125;, BaseConfig, &#123;</div><div class="line">  <span class="comment">// 如下设置使过场动画看起来很快</span></div><div class="line">  springTension: <span class="number">100</span>,</div><div class="line">  <span class="attr">springFriction</span>: <span class="number">1</span>,</div><div class="line">  <span class="comment">// 使用上面我们自定义的手势</span></div><div class="line">  gestures: &#123;</div><div class="line">    <span class="attr">pop</span>: CustomLeftToRightGesture,</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native 进阶（二）–动画&lt;br&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://cokernut.top/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://cokernut.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native学习笔记--进阶（一）--嵌入到Android原生应用中、组件的生命周期、颜色、图片、触摸事件</title>
    <link href="http://cokernut.top/2016/12/03/ReactNative/React%20Native%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%80%EF%BC%89--%E5%B5%8C%E5%85%A5%E5%88%B0Android%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E4%B8%AD%E3%80%81%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%81%E9%A2%9C%E8%89%B2%E3%80%81%E5%9B%BE%E7%89%87%E3%80%81%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6/"/>
    <id>http://cokernut.top/2016/12/03/ReactNative/React Native学习笔记--进阶（一）--嵌入到Android原生应用中、组件的生命周期、颜色、图片、触摸事件/</id>
    <published>2016-12-02T16:00:00.000Z</published>
    <updated>2016-12-08T08:41:05.787Z</updated>
    
    <content type="html"><![CDATA[<p>React Native 进阶（一）–嵌入到Android原生应用中、组件的生命周期、颜色、图片、触摸事件<br><a id="more"></a></p>
<h2 id="嵌入到Android原生应用中"><a href="#嵌入到Android原生应用中" class="headerlink" title="嵌入到Android原生应用中"></a>嵌入到Android原生应用中</h2><p>参考：<a href="http://cokernut.top/2016/11/25/Android/React%20Native%E5%B5%8C%E5%85%A5Android%E5%8E%9F%E7%94%9F%E9%A1%B9%E7%9B%AE%E4%B8%AD/">React Native嵌入Android原生项目中</a></p>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>React Native组件的生命周期如下图：<br><img src="/images/ReactNative/advance/1.png" alt="生命周期图"><br>如图，可以把组件生命周期大致分为三个阶段：</p>
<p>第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的初始化和加载；<br>第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；<br>第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。</p>
<h3 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h3><p>组件实例创建前会先调用 getDefaultProps()，这是全局调用一次，多个实例间共享引用。严格地来说，这不是组件的生命周期的一部分。注意：如果父组件传递过来的Props和你在该函数中定义的Props的key一样，将会被覆盖。</p>
<h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><p>在这个阶段之前会先调用getDefaultProps()这个函数，这个阶段完成了组件的初始化和加载。这个阶段会按顺序调用下面4个函数，这4个函数在整个组件被创建到销毁的过程中只调用一次。  </p>
<h4 id="getInitalState"><a href="#getInitalState" class="headerlink" title="getInitalState"></a>getInitalState</h4><p>组件示例创建的时候调用的第一个函数(getDefaultProps全局调用一次)。主要用于初始化状态(state)。注意：为了在使用中不出现空值，建议初始化state的时候尽可能给每一个可能用到的值都赋一个初始值。这个函数在整个生命周期中只被调用一次。</p>
<h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h4><p>准备加载组件，会调用 componentWillMount()，这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。</p>
<h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><p>组件渲染函数，会返回一个虚拟DOM，只允许返回一个最外层容器组件。render函数尽量保持纯净，只渲染组件，不修改状态，不执行副操作（比如计时器）。</p>
<h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h4><p>在render渲染之后，React Native会根据虚拟DOM来生成真实DOM，生成完毕后会调用该函数，通知组件已经加载（绘制）完成。这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，React Native框架是先调用子组件的 componentDidMount()，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发。</p>
<h3 id="运行中"><a href="#运行中" class="headerlink" title="运行中"></a>运行中</h3><p>初始化完成之后，组件将会进入到运行中状态，运行中状态我们将会遇到如下几个函数：</p>
<h4 id="componentWillReceiveProps-nextProps"><a href="#componentWillReceiveProps-nextProps" class="headerlink" title="componentWillReceiveProps(nextProps)"></a>componentWillReceiveProps(nextProps)</h4><p>如果组件收到新的属性（props改变），就会调用 componentWillReceiveProps()，输入参数 nextProps 是即将被设置的属性，旧的属性还是可以通过 this.props 来获取。在这个回调函数里面，可以根据属性的变化，通过调用 this.setState() 来更新你的组件状态(state)，这里调用更新状态是安全的，并不会触发额外的 render() 调用(二次渲染)。</p>
<h4 id="boolean-shouldComponentUpdate-nextProps-nextState"><a href="#boolean-shouldComponentUpdate-nextProps-nextState" class="headerlink" title="boolean shouldComponentUpdate(nextProps, nextState)"></a>boolean shouldComponentUpdate(nextProps, nextState)</h4><p>该函数传递过来两个参数，新的state和新的props。state和props的改变都会调到该函数。该函数主要对传递过来的nextProps和nextState作判断。如果返回true则重新渲染，如果返回false则不重新渲染。默认情况下，这个函数永远返回 true 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态（props和state），来决定 UI 是否需要更新，能有效提高应用性能。</p>
<h4 id="componentWillUpdate-nextProps-nextState"><a href="#componentWillUpdate-nextProps-nextState" class="headerlink" title="componentWillUpdate(nextProps, nextState)"></a>componentWillUpdate(nextProps, nextState)</h4><p>如果组件状态或者属性改变，并且上面的 shouldComponentUpdate() 返回为 true，就会开始准更新组件，并调用 componentWillUpdate()<br>输入参数与 shouldComponentUpdate 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你不可以在该方法中更新state和props。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。紧接着这个函数，就会调用 render() 来更新界面了。</p>
<h4 id="render-1"><a href="#render-1" class="headerlink" title="render"></a>render</h4><p>组件渲染</p>
<h4 id="componentDidUpdate-prevProps-prevState"><a href="#componentDidUpdate-prevProps-prevState" class="headerlink" title="componentDidUpdate(prevProps, prevState)"></a>componentDidUpdate(prevProps, prevState)</h4><p>和初始化时期的componentDidMount类似，在render之后，真实DOM生成之后调用该函数。因为到这里已经完成了属性和状态的更新了，传递过来的是当前的props和state。在该函数中同样可以使用this.getDOMNode()来拿到相应的DOM节点。如果你需要在运行中执行某些副操作，请在该函数中完成。</p>
<h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><p>销毁阶段只有一个函数。</p>
<h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h4><p>组件DOM中移除的时候调用。在这里进行一些相关的销毁操作，比如定时器，监听等等。</p>
<h3 id="props和state"><a href="#props和state" class="headerlink" title="props和state"></a>props和state</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><ol>
<li>不管是props还是state的改变，都会引发render的重新渲染。  </li>
<li>都能由自身组件的相应初始化函数设定初始值。</li>
</ol>
<h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ol>
<li>初始值来源：state的初始值来自于自身的getInitalState（constructor）函数；props来自于父组件或者自身getDefaultProps（若key相同前者可覆盖后者）。  </li>
<li>修改方式：state只能在自身组件中setState，不能由父组件修改；props只能由父组件修改，不能在自身组件修改。  </li>
<li>对子组件：props是一个父组件传递给子组件的数据流，这个数据流可以一直传递到子孙组件；state代表的是一个组件内部自身的状态，只能在自身组件中存在。<br><img src="/images/ReactNative/advance/2.png" alt="props和state">  </li>
</ol>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; </div><div class="line"></div><div class="line">  getInitalState() &#123;  <span class="comment">//组件示例创建的时候调用的第一个函数。主要用于初始化state。注意：为了在使用中不出现空值，建议初始化state的时候尽可能给每一个可能用到的值都赋一个初始值。</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"getInitalState"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillMount() &#123;  <span class="comment">//准备加载组件，会调用 componentWillMount()，这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillMount"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;  <span class="comment">//组件渲染函数，会返回一个Virtual DOM，只允许返回一个最外层容器组件。render函数尽量保持纯净，只渲染组件，不修改状态，不执行副操作（比如计时器）</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"render"</span>);</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;  <span class="comment">//在render渲染之后，React会根据Virtual DOM来生成真实DOM，生成完毕后会调用该函数。主要在该函数中执行网络请求，定时器开启等相关操作</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentDidMount"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillReceiveProps(nextProps) &#123; <span class="comment">//props改变时调用</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillReceiveProps"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  shouldComponentUpdate(nextProps, nextState) &#123; <span class="comment">//如果 true 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态，默认true，可以根据传递过来的props和state来选择更新或者不更新，从而提高效率。</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"shouldComponentUpdate"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUpdate(nextProps, nextState) &#123; <span class="comment">//组件上会接收到新的props或者state渲染之前，调用该方法。但是不可以在该方法中更新state和props</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillUpdate"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidUpdate(prevProps, prevState) &#123; <span class="comment">//和初始化时期的componentDidMount类似，在render之后，真实DOM生成之后调用该函数。</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillUpdate"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;  <span class="comment">//组件DOM中移除的时候调用。在这里进行一些相关的销毁操作，比如定时器，监听等等。</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"componentWillUnmount"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Sample;</div></pre></td></tr></table></figure>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>支持的颜色代码格式：</p>
<ul>
<li>‘#f0f’ (#rgb)</li>
<li>‘#f0fc’ (#rgba)</li>
<li>‘#ff00ff’ (#rrggbb)</li>
<li>‘#ff00ff00’ (#rrggbbaa)</li>
<li>‘rgb(255, 255, 255)’</li>
<li>‘rgba(255, 255, 255, 1.0)’</li>
<li>‘hsl(360, 100%, 100%)’</li>
<li>‘hsla(360, 100%, 100%, 1.0)’</li>
<li>‘transparent’</li>
<li>‘red’</li>
<li>0xff00ff00 (0xrrggbbaa)</li>
</ul>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="静态图片资源"><a href="#静态图片资源" class="headerlink" title="静态图片资源"></a>静态图片资源</h3><p>React Native提供了一个统一的方式来管理iOS和Android应用中的图片。<br>你可以使用@2x，@3x这样的文件名后缀，来为不同的屏幕精度提供图片。比如下面这样的代码结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── root.js</div><div class="line">└── img</div><div class="line">    ├── check@2x.png</div><div class="line">    └── check@3x.png</div></pre></td></tr></table></figure>
<p>并且root.js里有这样的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./img/check.png'</span>)&#125; /&gt;</div></pre></td></tr></table></figure></p>
<p>如果你有check@2x.ios.png和check@2x.android.png，Packager会打包所有的图片根据平台而选择不同的文件，并且依据屏幕精度提供对应的资源。</p>
<font color="FA7F7F">注意：如果你添加图片的时候packager正在运行，可能需要重启packager以便能正确引入新添加的图片。<br>注意：为了使新的图片资源机制正常工作，require中的图片名字必须是一个静态字符串。</font>  

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line">&lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./my-icon.png'</span>)&#125; /&gt;</div><div class="line"><span class="comment">// 错误</span></div><div class="line"><span class="keyword">var</span> icon = <span class="keyword">this</span>.props.active ? <span class="string">'my-icon-active'</span> : <span class="string">'my-icon-inactive'</span>;</div><div class="line">&lt;Image source=&#123;require('./' + icon + '.png')&#125; /&gt;</div><div class="line">// 正确</div><div class="line">var icon = this.props.active ? require('./my-icon-active.png') : require('./my-icon-inactive.png');</div><div class="line">&lt;Image source=&#123;icon&#125; /&gt;</div></pre></td></tr></table></figure>
<h3 id="使用混合App的图片资源"><a href="#使用混合App的图片资源" class="headerlink" title="使用混合App的图片资源"></a>使用混合App的图片资源</h3><p>如果你在编写一个混合App（一部分UI使用React Native，而另一部分使用平台原生代码），也可以使用已经打包到App中的图片资源（通过Xcode的asset类目或者Android的drawable文件夹打包）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'app_icon'</span>&#125;&#125; style=&#123;&#123;<span class="attr">width</span>: <span class="number">40</span>, <span class="attr">height</span>: <span class="number">40</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure></p>
<font color="FA7F7F">注意：这一做法并没有任何安全检查。你需要自己确保图片在应用中确实存在，而且还需要指定尺寸。</font>

<h3 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h3><p>很多要在App中显示的图片<font color="FA7F7F">并不能在编译的时候获得，又或者有时候需要动态载入来减少打包后的二进制文件的大小。这些时候，与静态资源不同的是，你需要手动指定图片的尺寸。</font><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>&#125;&#125;</div><div class="line">       style=&#123;&#123;<span class="attr">width</span>: <span class="number">400</span>, <span class="attr">height</span>: <span class="number">400</span>&#125;&#125; /&gt;</div><div class="line"><span class="comment">// 错误</span></div><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure></p>
<h3 id="本地文件系统中的图片"><a href="#本地文件系统中的图片" class="headerlink" title="本地文件系统中的图片"></a>本地文件系统中的图片</h3><p>CameraRoll模块提供了访问本地相册的功能。</p>
<blockquote>
<p>static saveImageWithTag(tag) </p>
</blockquote>
<p>保存一个图片到相册。</p>
<p>@param {string} tag<br>在安卓上，本参数是一个本地URI，例如”file:///sdcard/img.png”.<br>在iOS设备上可能是以下之一：</p>
<ul>
<li>本地URI</li>
<li>资源库的标签</li>
<li>非以上两种类型，表示图片数据将会存储在内存中（并且在本进程持续的时候一直会占用内存）。</li>
</ul>
<p>返回一个Promise，操作成功时返回新的URI。</p>
<blockquote>
<p>static getPhotos(params: object) </p>
</blockquote>
<p>返回一个带有图片标识符对象的Promise。返回的对象的结构参见getPhotosReturnChecker:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getPhotosReturnChecker = createStrictShapeTypeChecker(&#123;</div><div class="line">  <span class="attr">edges</span>: ReactPropTypes.arrayOf(createStrictShapeTypeChecker(&#123;</div><div class="line">    <span class="attr">node</span>: createStrictShapeTypeChecker(&#123;</div><div class="line">      <span class="attr">type</span>: ReactPropTypes.string.isRequired,</div><div class="line">      <span class="attr">group_name</span>: ReactPropTypes.string.isRequired,</div><div class="line">      <span class="attr">image</span>: createStrictShapeTypeChecker(&#123;</div><div class="line">        <span class="attr">uri</span>: ReactPropTypes.string.isRequired,</div><div class="line">        <span class="attr">height</span>: ReactPropTypes.number.isRequired,</div><div class="line">        <span class="attr">width</span>: ReactPropTypes.number.isRequired,</div><div class="line">        <span class="attr">isStored</span>: ReactPropTypes.bool,</div><div class="line">      &#125;).isRequired,</div><div class="line">      <span class="attr">timestamp</span>: ReactPropTypes.number.isRequired,</div><div class="line">      <span class="attr">location</span>: createStrictShapeTypeChecker(&#123;</div><div class="line">        <span class="attr">latitude</span>: ReactPropTypes.number,</div><div class="line">        <span class="attr">longitude</span>: ReactPropTypes.number,</div><div class="line">        <span class="attr">altitude</span>: ReactPropTypes.number,</div><div class="line">        <span class="attr">heading</span>: ReactPropTypes.number,</div><div class="line">        <span class="attr">speed</span>: ReactPropTypes.number,</div><div class="line">      &#125;),</div><div class="line">    &#125;).isRequired,</div><div class="line">  &#125;)).isRequired,</div><div class="line">  <span class="attr">page_info</span>: createStrictShapeTypeChecker(&#123;</div><div class="line">    <span class="attr">has_next_page</span>: ReactPropTypes.bool.isRequired,</div><div class="line">    <span class="attr">start_cursor</span>: ReactPropTypes.string,</div><div class="line">    <span class="attr">end_cursor</span>: ReactPropTypes.string,</div><div class="line">  &#125;).isRequired,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>@param {object} 要求的参数结构参见getPhotosParamChecker：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getPhotosParamChecker = createStrictShapeTypeChecker(&#123;</div><div class="line">  <span class="attr">first</span>: ReactPropTypes.number.isRequired,</div><div class="line">  <span class="attr">after</span>: ReactPropTypes.string,</div><div class="line">  <span class="attr">groupTypes</span>: ReactPropTypes.oneOf(GROUP_TYPES_OPTIONS),</div><div class="line">  <span class="attr">groupName</span>: ReactPropTypes.string,</div><div class="line">  <span class="attr">assetType</span>: ReactPropTypes.oneOf(ASSET_TYPE_OPTIONS),</div><div class="line">  <span class="comment">//例如：image/jpeg</span></div><div class="line">  mimeTypes: ReactPropTypes.arrayOf(ReactPropTypes.string),</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>返回一个Promise，操作成功时返回符合getPhotosReturnChecker结构的对象。</p>
<h4 id="最合适的相册图片"><a href="#最合适的相册图片" class="headerlink" title="最合适的相册图片"></a>最合适的相册图片</h4><p>iOS会为同一张图片在相册中保存多个不同尺寸的副本。为了性能考虑，从这些副本中挑出最合适的尺寸显得尤为重要。对于一处200x200大小的缩略图，显然不应该选择最高质量的3264x2448大小的图片。如果恰好有匹配的尺寸，那么React Native会自动为你选好。如果没有，则会选择最接近的尺寸进行缩放，但也至少缩放到比所需尺寸大出50%，以使图片看起来仍然足够清晰。这一切过程都是自动完成的，所以你不用操心自己去完成这些繁琐且易错的代码。</p>
<h3 id="为什么不在所有情况下都自动指定尺寸"><a href="#为什么不在所有情况下都自动指定尺寸" class="headerlink" title="为什么不在所有情况下都自动指定尺寸"></a>为什么不在所有情况下都自动指定尺寸</h3><p>在浏览器中，如果你不给图片指定尺寸，那么浏览器会首先渲染一个0x0大小的元素占位，然后下载图片，在下载完成后再基于正确的尺寸来渲染图片。这样做的最大问题是UI会在图片加载的过程中上下跳动，使得用户体验非常糟糕。<br>在React Native中有意避免了这一行为。如此一来就需要做更多工作来提前知晓远程图片的尺寸（或宽高比），但我们相信这样可以带来更好的用户体验。然而，从已经打包好的应用资源文件中读取图片（使用require(‘image!x’)语法）则无需指定尺寸，因为它们的尺寸在加载时就可以立刻知道。<br>这样一个引用require(‘image!logo’)的实际输出结果可能是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;__packager_asset&quot;:true,&quot;isStatic&quot;:true,&quot;path&quot;:&quot;/Users/react/HelloWorld/iOS/Images.xcassets/react.imageset/logo.png&quot;,&quot;uri&quot;:&quot;logo&quot;,&quot;width&quot;:591,&quot;height&quot;:573&#125;</div></pre></td></tr></table></figure></p>
<h3 id="资源属性是一个对象（object）"><a href="#资源属性是一个对象（object）" class="headerlink" title="资源属性是一个对象（object）"></a>资源属性是一个对象（object）</h3><p>在React Native中，把src属性改为了source属性，而且并不接受字符串，正确的值是一个带有uri属性的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;uri: &apos;something.jpg&apos;&#125;&#125; /&gt;</div></pre></td></tr></table></figure></p>
<p>这样可以使我们在对象中添加一些元数据(metadata)。假设你在使用require(‘./my-icon.png’)，那么就会在其中添加真实文件路径以及尺寸等信息。对于开发者来说，则可以在其中标注一些有用的属性，例如图片的尺寸，这样可以使图片自己去计算将要显示的尺寸（而不必在样式中写死）。你可以在这一数据结构中自由发挥，存储你可能需要的任何图片相关的信息。</p>
<h3 id="通过嵌套来实现背景图片"><a href="#通过嵌套来实现背景图片" class="headerlink" title="通过嵌套来实现背景图片"></a>通过嵌套来实现背景图片</h3><p>开发者们常面对的一种需求就是类似web中的背景图（background-image）。要实现这一用例，只需简单地创建一个<image>组件，然后把需要背景图的子组件嵌入其中即可。</image></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=<span class="string">&#123;...&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Inside<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Image</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h2><p>React Native提供了可以处理常见触摸手势（例如点击或滑动）的组件， 以及可用于识别更复杂的手势的完整的手势响应系统。</p>
<h3 id="可点击的组件"><a href="#可点击的组件" class="headerlink" title="可点击的组件"></a>可点击的组件</h3><p>在需要捕捉用户点击操作时，可以使用”Touchable”开头的一系列组件。这些组件通过onPress属性接受一个点击事件的处理函数。当一个点击操作开始并且终止于本组件时（即在本组件上按下手指并且抬起手指时也没有移开到组件外），此函数会被调用。<br>可点击的组件需要给用户提供视觉反馈，例如是哪个组件正在响应用户的操作，以及当用户抬起手指后会发生什么。用户也应该可以通过把手指移到一边来取消点击操作。<br>具体使用哪种组件，取决于你希望给用户什么样的视觉反馈：</p>
<ul>
<li>一般来说，你可以使用TouchableHighlight来制作按钮或者链接。注意此组件的背景会在用户手指按下时变暗。  </li>
<li>在Android上还可以使用TouchableNativeFeedback，它会在用户手指按下时形成类似墨水涟漪的视觉效果。  </li>
<li>TouchableOpacity会在用户手指按下时降低按钮的透明度，而不会改变背景的颜色。   </li>
<li>如果你想在处理点击事件的同时不显示任何视觉反馈，则需要使用TouchableWithoutFeedback。</li>
</ul>
<h3 id="长按"><a href="#长按" class="headerlink" title="长按"></a>长按</h3><p>某些场景中你可能需要检测用户是否进行了长按操作。可以在上面列出的任意组件中使用onLongPress属性来实现。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  View,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  TouchableOpacity,</div><div class="line">  StyleSheet</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Advance</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  _click() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Click!"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _longClick() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Long Click!"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;this._click&#125;</span> <span class="attr">onLongPress</span>=<span class="string">&#123;this._longClick&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=<span class="string">&#123;&#123;</span> <span class="attr">uri:</span> '<span class="attr">https:</span>//<span class="attr">facebook.github.io</span>/<span class="attr">react</span>/<span class="attr">img</span>/<span class="attr">logo_og.png</span>' &#125;&#125;</span></div><div class="line">            <span class="attr">style</span>=<span class="string">&#123;[styles.image,</span> &#123; <span class="attr">width:</span> <span class="attr">200</span>, <span class="attr">height:</span> <span class="attr">200</span> &#125;]&#125; &gt;</div><div class="line">            <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.text&#125;</span>&gt;</span>背景图片<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">Image</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">image</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">text</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">40</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#F67FF8'</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Advance;</div></pre></td></tr></table></figure>
<h3 id="在列表中上下滑动和在视图上左右滑动"><a href="#在列表中上下滑动和在视图上左右滑动" class="headerlink" title="在列表中上下滑动和在视图上左右滑动"></a>在列表中上下滑动和在视图上左右滑动</h3><p>可滚动的列表是移动应用中一个常见的模式。用户会在列表中或快或慢的各种滑动。ScrollView组件可以满足这一需求。<br>ScrollView可以在垂直或水平方向滚动，还可以配置pagingEnabled属性来让用户整屏整屏的滑动。此外，水平方向的滑动还可以使用Android上的ViewPagerAndroid 组件。<br>ListView则是一种特殊的ScrollView，用于显示比较长的垂直列表。它还可以显示分区块的头部和尾部，类似iOS上的UITableView控件。</p>
<h4 id="双指缩放"><a href="#双指缩放" class="headerlink" title="双指缩放"></a>双指缩放</h4><p>如果在ScrollView中只放置一个组件，则可以用来实现缩放操作。设置maximumZoomScale和minimumZoomScale属性即可以使用户能够缩放其中的内容</p>
<h2 id="处理其他的手势"><a href="#处理其他的手势" class="headerlink" title="处理其他的手势"></a>处理其他的手势</h2><h3 id="手势响应系统"><a href="#手势响应系统" class="headerlink" title="手势响应系统"></a>手势响应系统</h3><p>移动设备上的手势识别要比在web上复杂得多。用户的一次触摸操作的真实意图是什么，App要经过好几个阶段才能判断。比如App需要判断用户的触摸到底是在滚动页面，还是滑动一个widget，或者只是一个单纯的点击。甚至随着持续时间的不同，这些操作还会转化。此外，还有多点同时触控的情况。</p>
<p>触摸响应系统可以使组件在不关心父组件或子组件的前提下自行处理触摸交互。</p>
<h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><p>用户之所以会觉得web app和原生app在体验上有巨大的差异，触摸响应是一大关键因素。用户的每一个操作都应该具有下列属性：</p>
<ul>
<li>反馈/高亮 —— 让用户看到他们到底按到了什么东西，以及松开手后会发生什么。</li>
<li>取消功能 —— 当用户正在触摸操作时，应该是可以通过把手指移开来终止操作。  </li>
</ul>
<p>这些特性使得用户在使用App时体验更好，因为它们可以让用户大胆试用，而不必担心点错了什么。</p>
<h4 id="TouchableHighlight与Touchable系列组件"><a href="#TouchableHighlight与Touchable系列组件" class="headerlink" title="TouchableHighlight与Touchable系列组件"></a>TouchableHighlight与Touchable系列组件</h4><p>响应系统用起来可能比较复杂。所以官方提供了一个抽象的Touchable实现，用来做“可触控”的组件。这一实现利用了响应系统，使得我们可以简单地以声明的方式来配置触控处理。如果要做一个按钮或者网页链接，那么使用TouchableHighlight就可以。</p>
<h4 id="响应者的生命周期"><a href="#响应者的生命周期" class="headerlink" title="响应者的生命周期"></a>响应者的生命周期</h4><p>一个View只要实现了正确的协商方法，就可以成为触摸事件的响应者。我们通过两个方法去“询问”一个View是否愿意成为响应者：</p>
<ul>
<li>View.props.onStartShouldSetResponder: (evt) =&gt; true, - 在用户开始触摸的时候（手指刚刚接触屏幕的瞬间），是否愿意成为响应者？</li>
<li>View.props.onMoveShouldSetResponder: (evt) =&gt; true, - 如果View不是响应者，那么在每一个触摸点开始移动（没有停下也没有离开屏幕）时再询问一次：是否愿意响应触摸交互呢？  </li>
</ul>
<p>如果View返回true，并开始尝试成为响应者，那么会触发下列事件之一:</p>
<ul>
<li>View.props.onResponderGrant: (evt) =&gt; {} - View现在要开始响应触摸事件了。这也是需要做高亮的时候，使用户知道他到底点到了哪里。</li>
<li>View.props.onResponderReject: (evt) =&gt; {} - 响应者现在“另有其人”而且暂时不会“放权”，请另作安排。</li>
</ul>
<p>如果View已经开始响应触摸事件了，那么下列这些处理函数会被一一调用：</p>
<ul>
<li>View.props.onResponderMove: (evt) =&gt; {} - 用户正在屏幕上移动手指时（没有停下也没有离开屏幕）。</li>
<li>View.props.onResponderRelease: (evt) =&gt; {} - 触摸操作结束时触发，比如”touchUp”（手指抬起离开屏幕）。</li>
<li>View.props.onResponderTerminationRequest: (evt) =&gt; true - 有其他组件请求接替响应者，当前的View是否“放权”？返回true的话则释放响应者权力。</li>
<li>View.props.onResponderTerminate: (evt) =&gt; {} - 响应者权力已经交出。这可能是由于其他View通过onResponderTerminationRequest请求的，也可能是由操作系统强制夺权（比如iOS上的控制中心或是通知中心）。</li>
</ul>
<p>evt是一个合成事件，它包含以下结构：  </p>
<ul>
<li>nativeEvent<ul>
<li>changedTouches - 在上一次事件之后，所有发生变化的触摸事件的数组集合（即上一次事件后，所有移动过的触摸点）</li>
<li>identifier - 触摸点的ID</li>
<li>locationX - 触摸点相对于父元素的横坐标</li>
<li>locationY - 触摸点相对于父元素的纵坐标</li>
<li>pageX - 触摸点相对于根元素的横坐标</li>
<li>pageY - 触摸点相对于根元素的纵坐标</li>
<li>target - 触摸点所在的元素ID</li>
<li>timestamp - 触摸事件的时间戳，可用于移动速度的计算</li>
<li>touches - 当前屏幕上的所有触摸点的集合</li>
</ul>
</li>
</ul>
<h4 id="捕获ShouldSet事件处理"><a href="#捕获ShouldSet事件处理" class="headerlink" title="捕获ShouldSet事件处理"></a>捕获ShouldSet事件处理</h4><p>onStartShouldSetResponder与onMoveShouldSetResponder是以冒泡的形式调用的，即嵌套最深的节点最先调用。这意味着当多个View同时在*ShouldSetResponder中返回true时，最底层的View将优先“夺权”。在多数情况下这并没有什么问题，因为这样可以确保所有控件和按钮是可用的。</p>
<p>但是有些时候，某个父View会希望能先成为响应者。我们可以利用“捕获期”来解决这一需求。响应系统在从最底层的组件开始冒泡之前，会首先执行一个“捕获期”，在此期间会触发on*ShouldSetResponderCapture系列事件。因此，如果某个父View想要在触摸操作开始时阻止子组件成为响应者，那就应该处理onStartShouldSetResponderCapture事件并返回true值。</p>
<blockquote>
<p>View.props.onStartShouldSetResponderCapture: (evt) =&gt; true,<br>View.props.onMoveShouldSetResponderCapture: (evt) =&gt; true,</p>
</blockquote>
<h3 id="PanResponder"><a href="#PanResponder" class="headerlink" title="PanResponder"></a>PanResponder</h3><p>PanResponder类可以将多点触摸操作协调成一个手势。它使得一个单点触摸可以接受更多的触摸操作，也可以用于识别简单的多点触摸手势。</p>
<p>它提供了一个对触摸响应系统响应器的可预测的包装。对于每一个处理函数，它在原生事件之外提供了一个新的gestureState对象。</p>
<blockquote>
<p>onPanResponderMove: (event, gestureState) =&gt; {}</p>
</blockquote>
<p>原生事件是指由以下字段组成的合成触摸事件：</p>
<ul>
<li>nativeEvent<ul>
<li>changedTouches - 在上一次事件之后，所有发生变化的触摸事件的数组集合（即上一次事件后，所有移动过的触摸点）</li>
<li>identifier - 触摸点的ID</li>
<li>locationX - 触摸点相对于父元素的横坐标</li>
<li>locationY - 触摸点相对于父元素的纵坐标</li>
<li>pageX - 触摸点相对于根元素的横坐标</li>
<li>pageY - 触摸点相对于根元素的纵坐标</li>
<li>target - 触摸点所在的元素ID</li>
<li>timestamp - 触摸事件的时间戳，可用于移动速度的计算</li>
<li>touches - 当前屏幕上的所有触摸点的集合</li>
</ul>
</li>
</ul>
<p>一个gestureState对象有如下的字段：</p>
<ul>
<li>stateID - 触摸状态的ID。在屏幕上有至少一个触摸点的情况下，这个ID会一直有效。</li>
<li>moveX - 最近一次移动时的屏幕横坐标</li>
<li>moveY - 最近一次移动时的屏幕纵坐标</li>
<li>x0 - 当响应器产生时的屏幕坐标</li>
<li>y0 - 当响应器产生时的屏幕坐标</li>
<li>dx - 从触摸操作开始时的累计横向路程</li>
<li>dy - 从触摸操作开始时的累计纵向路程</li>
<li>vx - 当前的横向移动速度</li>
<li>vy - 当前的纵向移动速度</li>
<li>numberActiveTouches - 当前在屏幕上的有效触摸点的数量</li>
</ul>
<p>基本用法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">componentWillMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>._panResponder = PanResponder.create(&#123;</div><div class="line">        <span class="comment">// 要求成为响应者：</span></div><div class="line">        onStartShouldSetPanResponder: <span class="function">(<span class="params">evt, gestureState</span>) =&gt;</span> <span class="literal">true</span>,</div><div class="line">        <span class="attr">onStartShouldSetPanResponderCapture</span>: <span class="function">(<span class="params">evt, gestureState</span>) =&gt;</span> <span class="literal">true</span>,</div><div class="line">        <span class="attr">onMoveShouldSetPanResponder</span>: <span class="function">(<span class="params">evt, gestureState</span>) =&gt;</span> <span class="literal">true</span>,</div><div class="line">        <span class="attr">onMoveShouldSetPanResponderCapture</span>: <span class="function">(<span class="params">evt, gestureState</span>) =&gt;</span> <span class="literal">true</span>,</div><div class="line"></div><div class="line">        <span class="attr">onPanResponderGrant</span>: <span class="function">(<span class="params">evt, gestureState</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 开始手势操作。给用户一些视觉反馈，让他们知道发生了什么事情！</span></div><div class="line">        <span class="comment">// gestureState.&#123;x,y&#125;0 现在会被设置为0</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">onPanResponderMove</span>: <span class="function">(<span class="params">evt, gestureState</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 最近一次的移动距离为gestureState.move&#123;X,Y&#125;</span></div><div class="line">        <span class="comment">// 从成为响应者开始时的累计手势移动距离为gestureState.d&#123;x,y&#125;</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">onPanResponderTerminationRequest</span>: <span class="function">(<span class="params">evt, gestureState</span>) =&gt;</span> <span class="literal">true</span>,</div><div class="line">        <span class="attr">onPanResponderRelease</span>: <span class="function">(<span class="params">evt, gestureState</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 用户放开了所有的触摸点，且此时视图已经成为了响应者。</span></div><div class="line">        <span class="comment">// 一般来说这意味着一个手势操作已经成功完成。</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">onPanResponderTerminate</span>: <span class="function">(<span class="params">evt, gestureState</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 另一个组件已经成为了新的响应者，所以当前手势将被取消。</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">onShouldBlockNativeResponder</span>: <span class="function">(<span class="params">evt, gestureState</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 返回一个布尔值，决定当前组件是否应该阻止原生组件成为JS响应者</span></div><div class="line">        <span class="comment">// 默认返回true。目前暂时只支持android。</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;,</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">View</span> &#123;<span class="attr">...this._panResponder.panHandlers</span>&#125; /&gt;</span></span></div><div class="line">    );</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><blockquote>
<p>static create(config: object) </p>
</blockquote>
<p>@param {object} 配置所有响应器回调的加强版本，不仅仅包括原本的ResponderSyntheticEvent，还包括PanResponder手势状态的回调。你只要简单的把onResponder回调中的Responder替换为PanResponder。举例来说，这个config对象可能看起来像这样：</p>
<ul>
<li>onMoveShouldSetPanResponder: (e, gestureState) =&gt; {…}</li>
<li>onMoveShouldSetPanResponderCapture: (e, gestureState) =&gt; {…}</li>
<li>onStartShouldSetPanResponder: (e, gestureState) =&gt; {…}</li>
<li>onStartShouldSetPanResponderCapture: (e, gestureState) =&gt; {…}</li>
<li>onPanResponderReject: (e, gestureState) =&gt; {…}</li>
<li>onPanResponderGrant: (e, gestureState) =&gt; {…}</li>
<li>onPanResponderStart: (e, gestureState) =&gt; {…}</li>
<li>onPanResponderEnd: (e, gestureState) =&gt; {…}</li>
<li>onPanResponderRelease: (e, gestureState) =&gt; {…}</li>
<li>onPanResponderMove: (e, gestureState) =&gt; {…}</li>
<li>onPanResponderTerminate: (e, gestureState) =&gt; {…}</li>
<li>onPanResponderTerminationRequest: (e, gestureState) =&gt; {…}</li>
<li>onShouldBlockNativeResponder: (e, gestureState) =&gt; {…}</li>
</ul>
<p>通常来说，对那些有对应捕获事件的事件来说，我们在捕获阶段更新gestureState一次，然后在冒泡阶段直接使用即可。</p>
<p>注意onStartShould 回调。他们只会在此节点冒泡/捕获的开始/结束事件中提供已经更新过的gestureState。一旦这个节点成为了事件的响应者，则所有的开始/结束事件都会被手势正确处理，并且gestureState也会被正确更新。(numberActiveTouches)有可能没有包含所有的触摸点，除非你就是触摸事件的响应者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native 进阶（一）–嵌入到Android原生应用中、组件的生命周期、颜色、图片、触摸事件&lt;br&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://cokernut.top/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://cokernut.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 学习笔记--基础知识</title>
    <link href="http://cokernut.top/2016/12/01/ReactNative/React%20Native%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://cokernut.top/2016/12/01/ReactNative/React Native学习笔记--基础知识/</id>
    <published>2016-11-30T16:00:00.000Z</published>
    <updated>2016-12-08T07:32:46.204Z</updated>
    
    <content type="html"><![CDATA[<p>React Native 基础知识学习<br><a id="more"></a></p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * 注册应用(registerComponent)后才能正确渲染</div><div class="line"> * 注意：一般在整个应用里AppRegistry.registerComponent这个方法只会调用一次，</div><div class="line"> * 而不是每个组件/模块都注册</div><div class="line"> * 注意，这里用引号括起来的'HelloWorldApp'必须和你init创建的项目名一致</div><div class="line"> */</div><div class="line">AppRegistry.registerComponent(<span class="string">'HelloWorldApp'</span>, () =&gt; HelloWorld);</div></pre></td></tr></table></figure>
<h2 id="Props-属性-、State-状态-、Style-样式"><a href="#Props-属性-、State-状态-、Style-样式" class="headerlink" title="Props(属性)、State(状态)、Style(样式)"></a>Props(属性)、State(状态)、Style(样式)</h2><p>大多数组件在创建时就可以使用各种参数来进行定制。用于定制的这些参数就称为props（属性）。</p>
<p>以常见的基础组件Image为例，在创建一个图片时，可以传入一个名为source的prop来指定要显示的图片的地址，<br>以及使用名为style的prop来控制其尺寸。</p>
<p>自定义的组件也可以使用props。通过在不同的场景使用不同的属性定制，可以尽量提高自定义组件的复用范畴。<br>只需在render函数中引用this.props，然后按需处理即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  Image,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTextView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">showText</span>: <span class="literal">true</span>&#125;; <span class="comment">//初始化state（状态）</span></div><div class="line">    <span class="comment">// 每1000毫秒对showText状态做一次取反操作</span></div><div class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">showText</span>: !<span class="keyword">this</span>.state.showText&#125;) <span class="comment">//调用setState方法修改state的值</span></div><div class="line">    &#125;, <span class="number">10000</span>);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> temp = <span class="string">'Name: '</span> + <span class="keyword">this</span>.props.name + <span class="string">'  Age: '</span> + <span class="keyword">this</span>.props.age + <span class="string">'!'</span>; <span class="comment">//取属性值并拼装</span></div><div class="line">    <span class="keyword">let</span> text = <span class="keyword">this</span>.state.showText ? temp : <span class="string">''</span>; </div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.text&#125;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> pic=&#123;</div><div class="line">      <span class="attr">uri</span>:<span class="string">'http://file26.mafengwo.net/M00/25/15/wKgB4lIre0yAC1WOAAFKo9uhzX063.rbook_comment.w300.jpeg'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * props,state,style</div><div class="line">       * </div><div class="line">       * style属性可以是一个普通的JavaScript对象,</div><div class="line">       * 你可以传入一个数组——在数组中位置居后的样式对象比居前的优先级更高，这样你可以间接实现样式的继承。</div><div class="line">       * 常见的做法是按顺序声明和使用style属性，以借鉴CSS中的“层叠”做法（即后声明的属性会覆盖先声明的同名属性）。</div><div class="line">       * </div><div class="line">       * 传值到Image的source属性，并定义样式</div><div class="line">       * 属性传值，this.props.propsname调用</div><div class="line">       */</div><div class="line">      &lt;View&gt;</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;[styles.text,</span> <span class="attr">styles.gray</span>, &#123;<span class="attr">fontSize:</span> <span class="attr">30</span>&#125;]&#125;&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">        &lt;Image source=&#123;pic&#125; style=&#123;&#123;<span class="attr">width</span>:<span class="number">100</span>, <span class="attr">height</span>:<span class="number">100</span>&#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Image</span>&gt;</span></span></div><div class="line">        &lt;MyTextView name=<span class="string">'Tom'</span> age=<span class="string">'16'</span>/&gt; </div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">MyTextView</span> <span class="attr">name</span>=<span class="string">'Joy'</span> <span class="attr">age</span>=<span class="string">'18'</span>/&gt;</span></span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">text</span>: &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'green'</span>,</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">fontWeight</span>: <span class="string">'bold'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">gray</span>: &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'gray'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'ReactNativeDemo'</span>, () =&gt; Root);</div></pre></td></tr></table></figure>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="指定宽高："><a href="#指定宽高：" class="headerlink" title="指定宽高："></a>指定宽高：</h3><p>最简单的给组件设定尺寸的方式就是在样式中指定固定的width和height。 React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点。</p>
<h3 id="弹性（Flex）宽高："><a href="#弹性（Flex）宽高：" class="headerlink" title="弹性（Flex）宽高："></a>弹性（Flex）宽高：</h3><p>在组件样式中使用flex可以使其在可利用的空间中动态地扩张或收缩。一般而言我们会使用flex:1来指定某个组件扩张以撑满所有剩余的空间。<br>如果有多个并列的子组件使用了flex:1，则这些子组件会平分父容器中剩余的空间。如果这些并列的子组件的flex值不一样，则谁的值更大，<br>谁占据剩余空间的比例就更大（即占据剩余空间的比等于并列组件间flex值的比）。  </p>
<font color="#D96060">注意：<br>组件能够撑满剩余空间的前提是其父容器的尺寸不为零。如果父容器既没有固定的width和height，<br>也没有设定flex，则父容器的尺寸为零。其子组件如果使用了flex，也是无法显示的。</font>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// 试试去掉父View中的`flex: 1`。</span></div><div class="line">      <span class="comment">// 则父View不再具有尺寸，因此子组件也无法再撑开。</span></div><div class="line">      <span class="comment">// 然后再用`height: 300`来代替父View的`flex: 1`试试看？</span></div><div class="line">      &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>&#125;&#125;&gt;</div><div class="line">        &lt;View style=&#123;&#123;flex: 1, backgroundColor: 'powderblue'&#125;&#125; /&gt;</div><div class="line">        &lt;View style=&#123;&#123;flex: 2, backgroundColor: 'skyblue'&#125;&#125; /&gt;</div><div class="line">        &lt;View style=&#123;&#123;flex: 3, backgroundColor: 'steelblue'&#125;&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('ReactNativeDemo', () =&gt; Root);</div></pre></td></tr></table></figure>
<h2 id="Flexbox布局"><a href="#Flexbox布局" class="headerlink" title="Flexbox布局"></a>Flexbox布局</h2><h3 id="flexDirection"><a href="#flexDirection" class="headerlink" title="flexDirection:"></a>flexDirection:</h3><p>决定布局的主轴，默认值是column(竖直轴，起点在顶部)，而不是row(水平轴，起点在左端)</p>
<h3 id="alignItems"><a href="#alignItems" class="headerlink" title="alignItems:"></a>alignItems:</h3><p>交叉轴的对齐方式，默认值是stretch  </p>
<ul>
<li>flex-start: 交叉轴的起点对齐</li>
<li>flex-end: 交叉轴的终点对齐</li>
<li>center: 交叉轴的中心对齐</li>
<li>stretch: 容器中的所有项目拉伸填满整个容器  </li>
</ul>
<h3 id="alignSelf"><a href="#alignSelf" class="headerlink" title="alignSelf:"></a>alignSelf:</h3><p>当前组件交叉轴的对齐方式，会覆盖的父组件的alignItems属性</p>
<h3 id="justifyContent"><a href="#justifyContent" class="headerlink" title="justifyContent:"></a>justifyContent:</h3><p>可以决定其子组件沿着主轴的对齐方式，默认值是flex-start  </p>
<ul>
<li>flex-start：主轴起点对齐</li>
<li>flex-end：主轴终点</li>
<li>center：居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等</li>
<li>space-around: 每个项目两侧的间隔相等。项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<h3 id="flexWrap"><a href="#flexWrap" class="headerlink" title="flexWrap:"></a>flexWrap:</h3><p>flexWrap属性定义一条轴线排不下时是否折行。它有两个值，分别是’wrap’和’nowrap’，分别代表支持换行和不支持换行，默认是’nowrap’。</p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex:"></a>flex:</h3><p>只能指定一个数字值，这个属性可能使属性justifyContent失效。</p>
<h3 id="属性列表"><a href="#属性列表" class="headerlink" title="属性列表"></a>属性列表</h3><table>
<thead>
<tr>
<th>属性</th>
<th>取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>alignItems    交叉轴的对齐方式</td>
<td>enum(‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’) </td>
</tr>
<tr>
<td>alignSelf 组件交叉轴的对齐方式</td>
<td>enum(‘auto’, ‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’) </td>
</tr>
<tr>
<td>borderBottomWidth 下边框宽度</td>
<td>number </td>
</tr>
<tr>
<td>borderLeftWidth   左边框宽度</td>
<td>number </td>
</tr>
<tr>
<td>borderRightWidth  右边框宽度</td>
<td>number </td>
</tr>
<tr>
<td>borderTopWidth    上边框宽度</td>
<td>number </td>
</tr>
<tr>
<td>borderWidth        边框宽度</td>
<td>number </td>
</tr>
<tr>
<td>bottom         覆盖下边缘宽度</td>
<td>number </td>
</tr>
<tr>
<td>flex              权重</td>
<td>number </td>
</tr>
<tr>
<td>flexDirection     主轴</td>
<td>enum(‘row’, ‘column’) </td>
</tr>
<tr>
<td>flexWrap          是否折行</td>
<td>enum(‘wrap’, ‘nowrap’) </td>
</tr>
<tr>
<td>height            高度</td>
<td>number </td>
</tr>
<tr>
<td>justifyContent 主轴的排列方式</td>
<td>enum(‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’) </td>
</tr>
<tr>
<td>left           覆盖左边缘宽度</td>
<td>number </td>
</tr>
<tr>
<td>margin         组件外边距</td>
<td>number </td>
</tr>
<tr>
<td>marginBottom   组件下外边距</td>
<td>number </td>
</tr>
<tr>
<td>marginHorizontal 组件横向外边距</td>
<td>number </td>
</tr>
<tr>
<td>marginLeft     组件左外边距</td>
<td>number </td>
</tr>
<tr>
<td>marginRight    组件右外边距</td>
<td>number </td>
</tr>
<tr>
<td>marginTop       组件上外边距</td>
<td>number </td>
</tr>
<tr>
<td>marginVertical  组件竖向外边距</td>
<td>number </td>
</tr>
<tr>
<td>padding        组件内边距</td>
<td>number </td>
</tr>
<tr>
<td>paddingBottom  组件下内边距</td>
<td>number </td>
</tr>
<tr>
<td>paddingHorizontal 组件横向内边距</td>
<td>number </td>
</tr>
<tr>
<td>paddingLeft    组件左内边距</td>
<td>number </td>
</tr>
<tr>
<td>paddingRight   组件右内边距</td>
<td>number </td>
</tr>
<tr>
<td>paddingTop     组件上内边距</td>
<td>number </td>
</tr>
<tr>
<td>paddingVertical 组件竖向内边距</td>
<td>number </td>
</tr>
<tr>
<td>position 位置属性 默认relative</td>
<td>enum(‘absolute’, ‘relative’)(绝对位置，相对位置) </td>
</tr>
<tr>
<td>right       覆盖右边缘宽度</td>
<td>number </td>
</tr>
<tr>
<td>top         覆盖上边缘宽度</td>
<td>number </td>
</tr>
<tr>
<td>width           宽度</td>
<td>number </td>
</tr>
<tr>
<td>zIndex   元素的堆叠顺序（z轴）</td>
<td>number</td>
</tr>
</tbody>
</table>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>View是一个支持Flexbox布局、样式、一些触摸处理、和一些无障碍功能的容器，并且它可以放到其它的视图里，也可以有任意多个任意类型的子视图。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote>
<p>accessibilityLabel string </p>
</blockquote>
<p>设置当用户与此元素交互时，“读屏器”（对视力障碍人士的辅助功能）阅读的文字。默认情况下，这个文字会通过遍历所有的子元素并累加所有的文本标签来构建。</p>
<blockquote>
<p>accessible bool </p>
</blockquote>
<p>当此属性为true时，表示此视图时一个启用了无障碍功能的元素。默认情况下，所有可触摸操作的元素都是无障碍功能元素。</p>
<blockquote>
<p>onAccessibilityTap function </p>
</blockquote>
<p>当accessible为true时，如果用户对一个已选中的无障碍元素做了一个双击手势时，系统会调用此函数。（译注：此事件是针对残障人士，并非是一个普通的点击事件。如果要为View添加普通点击事件，请直接使用Touchable系列组件替代View，然后添加onPress函数）。</p>
<blockquote>
<p>onLayout function </p>
</blockquote>
<p>当组件挂载或者布局变化的时候调用，参数为：<br>{nativeEvent: { layout: {x, y, width, height}}}<br>这个事件会在布局计算完成后立即调用一次，不过收到此事件时新的布局可能还没有在屏幕上呈现，尤其是一个布局动画正在进行中的时候。</p>
<blockquote>
<p>onMagicTap function </p>
</blockquote>
<p>当accessible为true时，如果用户做了一个双指轻触(Magic tap)手势，系统会调用此函数。</p>
<blockquote>
<p>onResponderGrant function </p>
</blockquote>
<p>对于大部分的触摸处理，你只需要用TouchableHighlight或TouchableOpacity包装你的组件。</p>
<blockquote>
<p>pointerEvents enum(‘box-none’, ‘none’, ‘box-only’, ‘auto’) </p>
</blockquote>
<p>用于控制当前视图是否可以作为触控事件的目标。<br>auto：视图可以作为触控事件的目标。<br>none：视图不能作为触控事件的目标。<br>box-none：视图自身不能作为触控事件的目标，但其子视图可以。<br>box-only：视图自身可以作为触控事件的目标，但其子视图不能。  </p>
<blockquote>
<p>removeClippedSubviews bool </p>
</blockquote>
<p>这是一个特殊的性能相关的属性，由RCTView导出。在制作滑动控件时，如果控件有很多不在屏幕内的子视图，会非常有用。</p>
<p>要让此属性生效，首先要求视图有很多超出范围的子视图，并且子视图和容器视图（或它的某个祖先视图）都应该有样式overflow: hidden。</p>
<blockquote>
<p>style<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Flexbox...</div><div class="line">ShadowProp#style...</div><div class="line">Transforms...</div><div class="line">backfaceVisibility enum(&apos;visible&apos;, &apos;hidden&apos;)</div><div class="line">backgroundColor string</div><div class="line">borderColor string</div><div class="line">borderTopColor string</div><div class="line">borderRightColor string</div><div class="line">borderBottomColor string</div><div class="line">borderLeftColor string</div><div class="line">borderRadius number</div><div class="line">borderTopLeftRadius number</div><div class="line">borderTopRightRadius number</div><div class="line">borderBottomLeftRadius number</div><div class="line">borderBottomRightRadius number</div><div class="line">borderStyle enum(&apos;solid&apos;, &apos;dotted&apos;, &apos;dashed&apos;)</div><div class="line">borderWidth number</div><div class="line">borderTopWidth number</div><div class="line">borderRightWidth number</div><div class="line">borderBottomWidth number</div><div class="line">borderLeftWidth number</div><div class="line">opacity number</div><div class="line">overflow enum(&apos;visible&apos;, &apos;hidden&apos;)</div><div class="line">elevation number</div><div class="line">(限Android)使用Android原生的 elevation API来设置视图的高度（elevation）。</div><div class="line">这样可以为视图添加一个投影，并且会影响视图层叠的顺序。此属性仅支持Android5.0及以上版本。</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>一个用于显示文本的React组件，并且它也支持嵌套、样式，以及触摸处理。<br>在React Native中你必须把你的文本节点放在<text>组件内。你不能直接在<view>下放置一段文本。</view></text></p>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><blockquote>
<p>numberOfLines number </p>
</blockquote>
<p>用来当文本过长的时候裁剪文本。包括折叠产生的换行在内，总的行数不会超过这个属性的限制。</p>
<blockquote>
<p>onLayout function </p>
</blockquote>
<p>当挂载或者布局变化以后调用，参数为如下的内容：</p>
<p>{nativeEvent: {layout: {x, y, width, height}}}</p>
<blockquote>
<p>onLongPress function </p>
</blockquote>
<p>当文本被长按以后调用此回调函数。</p>
<blockquote>
<p>onPress function </p>
</blockquote>
<p>当文本被点击以后调用此回调函数。</p>
<blockquote>
<p>selectable function </p>
</blockquote>
<p>决定用户是否可以长按选择文本，以便复制和粘贴。</p>
<blockquote>
<p>style style<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">View#style...</div><div class="line">color string</div><div class="line">fontFamily string</div><div class="line">fontSize number</div><div class="line">fontStyle enum(&apos;normal&apos;, &apos;italic&apos;)</div><div class="line">fontWeight enum(&quot;normal&quot;, &apos;bold&apos;, &apos;100&apos;, &apos;200&apos;, &apos;300&apos;, &apos;400&apos;, &apos;500&apos;, &apos;600&apos;, &apos;700&apos;, &apos;800&apos;, &apos;900&apos;)</div><div class="line">指定字体的粗细。大多数字体都支持&apos;normal&apos;和&apos;bold&apos;值。并非所有字体都支持所有的数字值。如果某个值不支持，则会自动选择最接近的值。</div><div class="line">letterSpacing number</div><div class="line">lineHeight number</div><div class="line">textAlign enum(&quot;auto&quot;, &apos;left&apos;, &apos;right&apos;, &apos;center&apos;, &apos;justify&apos;)</div><div class="line">指定文本的对齐方式。其中&apos;justify&apos;值仅iOS支持。</div><div class="line">android textAlignVertical enum(&apos;auto&apos;, &apos;top&apos;, &apos;bottom&apos;, &apos;center&apos;)</div><div class="line">ios letterSpacing number</div><div class="line">ios textDecorationColor string</div><div class="line">textDecorationLine enum(&quot;none&quot;, &apos;underline&apos;, &apos;line-through&apos;, &apos;underline line-through&apos;)</div><div class="line">ios textDecorationStyle enum(&quot;solid&quot;, &apos;double&apos;, &apos;dotted&apos;, &apos;dashed&apos;)</div><div class="line">ios writingDirection enum(&quot;auto&quot;, &apos;ltr&apos;, &apos;rtl&apos;)</div></pre></td></tr></table></figure></p>
<p>testID string </p>
</blockquote>
<p>用来在端到端测试中标记这个视图。</p>
<h2 id="TextInput"><a href="#TextInput" class="headerlink" title="TextInput"></a>TextInput</h2><p>TextInput是一个允许用户输入文本的基础组件。它有一个名为onChangeText的属性，此属性接受一个函数，而此函数会在文本变化时被调用。<br>另外还有一个名为onSubmitEditing的属性，会在文本被提交后（用户按下软键盘上的提交键）调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">text</span>: <span class="string">''</span>&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;padding:</span> <span class="attr">10</span>&#125;&#125;&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">TextInput</span></span></div><div class="line">          <span class="attr">style</span>=<span class="string">&#123;&#123;height:</span> <span class="attr">40</span>&#125;&#125;</div><div class="line">          <span class="attr">placeholder</span>=<span class="string">"Type here to translate!"</span></div><div class="line">          // 如果<span class="attr">key</span>和<span class="attr">value</span>的字面一样，那么可以简写成一个，等同于下面的写法：</div><div class="line">          // <span class="attr">this.setState</span>(&#123;<span class="attr">text:</span> <span class="attr">text</span>&#125;);</div><div class="line">          <span class="attr">onChangeText</span>=<span class="string">&#123;(text)</span> =&gt; this.setState(&#123;text&#125;)&#125;</div><div class="line">        /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;padding:</span> <span class="attr">10</span>, <span class="attr">fontSize:</span> <span class="attr">42</span>&#125;&#125;&gt;</span></div><div class="line">          &#123;this.state.text.split(' ').map((word) =&gt; word &amp;&amp; '🍕').join(' ')&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><blockquote>
<p>autoCapitalize enum(‘none’, ‘sentences’, ‘words’, ‘characters’) </p>
</blockquote>
<p>控制TextInput是否要自动将特定字符切换为大写：</p>
<p>characters: 所有的字符。<br>words: 每个单词的第一个字符。<br>sentences: 每句话的第一个字符（默认）。<br>none: 不自动切换任何字符为大写。  </p>
<blockquote>
<p>autoCorrect bool </p>
</blockquote>
<p>如果为false，会关闭拼写自动修正。默认值是true。</p>
<blockquote>
<p>autoFocus bool </p>
</blockquote>
<p>如果为true，在componentDidMount后会获得焦点。默认值为false。</p>
<blockquote>
<p>blurOnSubmit bool </p>
</blockquote>
<p>如果为true，文本框会在提交的时候失焦。对于单行输入框默认值为true，多行则为false。注意：对于多行输入框来说，如果将blurOnSubmit设为true，则在按下回车键时就会失去焦点同时触发onSubmitEditing事件，而不会换行。</p>
<blockquote>
<p>defaultValue string </p>
</blockquote>
<p>提供一个文本框中的初始值。当用户开始输入的时候，值就可以改变。</p>
<p>在一些简单的使用情形下，如果你不想用监听消息然后更新value属性的方法来保持属性和状态同步的时候，就可以用defaultValue来代替。</p>
<blockquote>
<p>editable bool </p>
</blockquote>
<p>如果为false，文本框是不可编辑的。默认值为true。</p>
<blockquote>
<p>keyboardType enum(“default”, ‘numeric’, ‘email-address’, “ascii-capable”, ‘numbers-and-punctuation’, ‘url’, ‘number-pad’, ‘phone-pad’, ‘name-phone-pad’, ‘decimal-pad’, ‘twitter’, ‘web-search’) </p>
</blockquote>
<p>决定弹出的何种软键盘的，譬如numeric（纯数字键盘）。</p>
<p>这些值在所有平台都可用：</p>
<p>default<br>numeric<br>email-address</p>
<blockquote>
<p>maxLength number </p>
</blockquote>
<p>限制文本框中最多的字符数。使用这个属性而不用JS逻辑去实现，可以避免闪烁的现象。</p>
<blockquote>
<p>multiline bool </p>
</blockquote>
<p>如果为true，文本框中可以输入多行文字。默认值为false。</p>
<blockquote>
<p>onBlur function </p>
</blockquote>
<p>当文本框失去焦点的时候调用此回调函数。</p>
<blockquote>
<p>onChange function </p>
</blockquote>
<p>当文本框内容变化时调用此回调函数。</p>
<blockquote>
<p>onChangeText function </p>
</blockquote>
<p>当文本框内容变化时调用此回调函数。改变后的文字内容会作为参数传递。</p>
<blockquote>
<p>onEndEditing function </p>
</blockquote>
<p>当文本输入结束后调用此回调函数。</p>
<blockquote>
<p>onFocus function </p>
</blockquote>
<p>当文本框获得焦点的时候调用此回调函数。</p>
<blockquote>
<p>onLayout function </p>
</blockquote>
<p>当组件挂载或者布局变化的时候调用，参数为{x, y, width, height}。</p>
<blockquote>
<p>onSubmitEditing function </p>
</blockquote>
<p>此回调函数当软键盘的确定/提交按钮被按下的时候调用此函数。如果multiline={true}，此属性不可用。</p>
<blockquote>
<p>placeholder string </p>
</blockquote>
<p>如果没有任何文字输入，会显示此字符串。</p>
<blockquote>
<p>placeholderTextColor string </p>
</blockquote>
<p>占位字符串显示的文字颜色。</p>
<blockquote>
<p>secureTextEntry bool </p>
</blockquote>
<p>如果为true，文本框会遮住之前输入的文字，这样类似密码之类的敏感文字可以更加安全。默认值为false。</p>
<blockquote>
<p>selectTextOnFocus bool </p>
</blockquote>
<p>如果为true，当获得焦点的时候，所有的文字都会被选中。</p>
<blockquote>
<p>selectionColor string </p>
</blockquote>
<p>设置输入框高亮时的颜色（在iOS上还包括光标）</p>
<blockquote>
<p>style Text#style </p>
</blockquote>
<p>译注：这意味着本组件继承了所有Text的样式。</p>
<blockquote>
<p>value string </p>
</blockquote>
<p>文本框中的文字内容。</p>
<p>TextInput是一个受约束的(Controlled)的组件，意味着如果提供了value属性，原生值会被强制与value属性保持一致。在大部分情况下这都工作的很好，不过有些情况下会导致一些闪烁现象——一个常见的原因就是通过不改变value来阻止用户进行编辑。如果你希望阻止用户输入，可以考虑设置editable={false}；如果你是希望限制输入的长度，可以考虑设置maxLength属性，这两个属性都不会导致闪烁。</p>
<blockquote>
<p>ios clearButtonMode enum(‘never’, ‘while-editing’, ‘unless-editing’, ‘always’) </p>
</blockquote>
<p>是否要在文本框右侧显示“清除”按钮。</p>
<blockquote>
<p>ios clearTextOnFocus bool </p>
</blockquote>
<p>如果为true，每次开始输入的时候都会清除文本框的内容。</p>
<blockquote>
<p>ios enablesReturnKeyAutomatically bool </p>
</blockquote>
<p>如果为true，键盘会在文本框内没有文字的时候禁用确认按钮。默认值为false。</p>
<blockquote>
<p>ios keyboardAppearance enum(‘default’, ‘light’, ‘dark’) </p>
</blockquote>
<p>指定键盘的颜色。</p>
<blockquote>
<p>ios onKeyPress function </p>
</blockquote>
<p>当一个键被按下的时候调用此回调。被按下的键会作为参数传递给回调函数。会在onChange之前调用。</p>
<blockquote>
<p>ios returnKeyType enum(‘default’, ‘go’, ‘google’, ‘join’, ‘next’, ‘route’, ‘search’, ‘send’, ‘yahoo’, ‘done’, ‘emergency-call’)</p>
</blockquote>
<p>决定“确定”按钮显示的内容。</p>
<blockquote>
<p>ios selectionState DocumentSelectionState </p>
</blockquote>
<p>参见DocumentSelectionState.js，可以控制一个文档中哪段文字被选中的状态。</p>
<blockquote>
<p>android numberOfLines number </p>
</blockquote>
<p>设置输入框的行数。当multiline设置为true时使用它，可以占据对应的行数。</p>
<blockquote>
<p>android underlineColorAndroid string </p>
</blockquote>
<p>文本框的下划线颜色(译注：如果要去掉文本框的边框，请将此属性设为透明transparent)。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote>
<p>isFocused(): boolean #</p>
</blockquote>
<p>返回值表明当前输入框是否获得了焦点。</p>
<blockquote>
<p>clear() </p>
</blockquote>
<p>清空输入框的内容。</p>
<h2 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h2><p>ScrollView是一个通用的可滚动的容器，你可以在其中放入多个组件和视图，而且这些组件并不需要是同类型的。<br>ScrollView不仅可以垂直滚动，还能水平滚动（通过horizontal属性来设置）。<br>ScrollView适合用来显示数量不多的滚动元素。</p>
<h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><blockquote>
<p>contentContainerStyle StyleSheetPropType(ViewStylePropTypes) </p>
</blockquote>
<p>这些样式会应用到一个内层的内容容器上，所有的子视图都会包裹在内容容器内。例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">contentContainerStyle</span>=<span class="string">&#123;styles.contentContainer&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">  );</div><div class="line">  ...</div><div class="line">  const styles = StyleSheet.create(&#123;</div><div class="line">    <span class="attr">contentContainer</span>: &#123;</div><div class="line">      <span class="attr">paddingVertical</span>: <span class="number">20</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>horizontal bool </p>
</blockquote>
<p>当此属性为true的时候，所有的的子视图会在水平方向上排成一行，而不是默认的在垂直方向上排成一列。默认值为false。</p>
<blockquote>
<p>keyboardDismissMode enum(‘none’, “interactive”, ‘on-drag’) </p>
</blockquote>
<p>用户拖拽滚动视图的时候，是否要隐藏软键盘。</p>
<p>none（默认值），拖拽时不隐藏软键盘。</p>
<p>on-drag 当拖拽开始的时候隐藏软键盘。</p>
<p>interactive 软键盘伴随拖拽操作同步地消失，并且如果往上滑动会恢复键盘。安卓设备上不支持这个选项，会表现的和none一样。</p>
<blockquote>
<p>keyboardShouldPersistTaps bool </p>
</blockquote>
<p>当此属性为false的时候，在软键盘激活之后，点击焦点文本输入框以外的地方，键盘就会隐藏。如果为true，滚动视图不会响应点击操作，并且键盘不会自动消失。默认值为false。</p>
<blockquote>
<p>onContentSizeChange function </p>
</blockquote>
<p>此函数会在ScrollView内部可滚动内容的视图发生变化时调用。</p>
<p>调用参数为内容视图的宽和高: (contentWidth, contentHeight)</p>
<p>此方法是通过绑定在内容容器上的onLayout来实现的。</p>
<blockquote>
<p>onScroll function </p>
</blockquote>
<p>在滚动的过程中，每帧最多调用一次此回调函数。调用的频率可以用scrollEventThrottle属性来控制。</p>
<blockquote>
<p>refreshControl element </p>
</blockquote>
<p>指定RefreshControl组件，用于为ScrollView提供下拉刷新功能。</p>
<blockquote>
<p>removeClippedSubviews bool #</p>
</blockquote>
<p>（实验特性）：当此属性为true时，屏幕之外的子视图（子视图的overflow样式需要设为hidden）会被移除。这个可以提升大列表的滚动性能。默认值为true。</p>
<blockquote>
<p>showsHorizontalScrollIndicator bool </p>
</blockquote>
<p>当此属性为true的时候，显示一个水平方向的滚动条。</p>
<blockquote>
<p>showsVerticalScrollIndicator bool </p>
</blockquote>
<p>当此属性为true的时候，显示一个垂直方向的滚动条。</p>
<blockquote>
<p>pagingEnabled bool </p>
</blockquote>
<p>当值为true时，滚动条会停在滚动视图的尺寸的整数倍位置。这个可以用在水平分页上。默认值为false。</p>
<blockquote>
<p>scrollEnabled bool </p>
</blockquote>
<p>当值为false的时候，内容不能滚动，默认值为true。</p>
<blockquote>
<p>style属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Flexbox...</div><div class="line">ShadowProp#style...</div><div class="line">Transforms...</div><div class="line">backfaceVisibility enum(&apos;visible&apos;, &apos;hidden&apos;)</div><div class="line">backgroundColor string</div><div class="line">borderColor string</div><div class="line">borderTopColor string</div><div class="line">borderRightColor string</div><div class="line">borderBottomColor string</div><div class="line">borderLeftColor string</div><div class="line">borderRadius number</div><div class="line">borderTopLeftRadius number</div><div class="line">borderTopRightRadius number</div><div class="line">borderBottomLeftRadius number</div><div class="line">borderBottomRightRadius number</div><div class="line">borderStyle enum(&apos;solid&apos;, &apos;dotted&apos;, &apos;dashed&apos;)</div><div class="line">borderWidth number</div><div class="line">borderTopWidth number</div><div class="line">borderRightWidth number</div><div class="line">borderBottomWidth number</div><div class="line">borderLeftWidth number</div><div class="line">opacity number</div><div class="line">overflow enum(&apos;visible&apos;, &apos;hidden&apos;)</div><div class="line">shadowColor string</div><div class="line">shadowOffset &#123;width: number, height: number&#125;</div><div class="line">shadowOpacity number</div><div class="line">shadowRadius number</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><blockquote>
<p>scrollTo(y: number | { x?: number, y?: number, animated?: boolean }, x: number, animated: boolean) </p>
</blockquote>
<p>滚动到指定的x, y偏移处。第三个参数为是否启用平滑滚动动画。<br>使用示例:<br>scrollTo({x: 0, y: 0, animated: true})</p>
<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>ListView组件用于显示一个垂直的滚动列表，其中的元素之间结构近似而仅数据不同。<br>ListView更适于长列表数据，且元素个数可以增删。和ScrollView不同的是，ListView并不立即渲染所有元素，而是优先渲染屏幕上可见的元素。<br>ListView最基本的使用方式就是创建一个ListView.DataSource数据源，然后给它传递一个普通的数据数组，<br>再使用数据源来实例化一个ListView组件，并且定义它的renderRow回调函数，这个函数会接受数组中的每个数据作为参数，返回一个可渲染的组件（作为listview的每一行）。<br>rowHasChanged函数也是ListView的必需属性。(===符号只比较基本类型数据的值，和引用类型的地址)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">  <span class="keyword">super</span>(props);</div><div class="line">  <span class="keyword">var</span> ds = <span class="keyword">new</span> ListView.DataSource(&#123;<span class="attr">rowHasChanged</span>: <span class="function">(<span class="params">r1, r2</span>) =&gt;</span> r1 !== r2&#125;);</div><div class="line">  <span class="keyword">this</span>.state = &#123;</div><div class="line">    <span class="attr">dataSource</span>: ds.cloneWithRows([<span class="string">'row 1'</span>, <span class="string">'row 2'</span>]),</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ListView</span></span></span></div><div class="line">      <span class="attr">dataSource</span>=<span class="string">&#123;this.state.dataSource&#125;</span></div><div class="line">      <span class="attr">renderRow</span>=<span class="string">&#123;(rowData)</span> =&gt; <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;rowData&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span>&#125;</div><div class="line">    /&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ListView还支持一些高级特性，譬如给每段/组(section)数据添加一个带有粘性的头部（类似iPhone的通讯录，其首字母会在滑动过程中吸附在屏幕上方）；<br>在列表头部和尾部增加单独的内容；在到达列表尾部的时候调用回调函数(onEndReached)，还有在视野内可见的数据变化时调用回调函数(onChangeVisibleRows)，<br>以及一些性能方面的优化。<br>有一些性能优化使得ListView可以滚动的更加平滑，尤其是在动态加载可能很大（或者概念上无限长的）数据集的时候：  </p>
<ul>
<li>只更新变化的行 - 提供给数据源的rowHasChanged函数可以告诉ListView它是否需要重绘一行数据（即：数据是否发生了变化）参见ListViewDataSource</li>
<li>限制频率的行渲染 - 默认情况下，每次消息循环只有一行会被渲染（可以用pageSize属性配置）。这把较大的工作分散成小的碎片，以降低因为渲染而导致丢帧的可能性。</li>
</ul>
<h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><blockquote>
<p>ScrollView props… </p>
</blockquote>
<p>ListView可以使用所有ScrollView的属性。</p>
<blockquote>
<p>dataSource ListViewDataSource </p>
</blockquote>
<p>ListView.DataSource实例（列表依赖的数据源）</p>
<blockquote>
<p>initialListSize number </p>
</blockquote>
<p>指定在组件刚挂载的时候渲染多少行数据。用这个属性来确保首屏显示合适数量的数据，而不是花费太多帧逐步显示出来。</p>
<blockquote>
<p>onChangeVisibleRows function </p>
</blockquote>
<p>(visibleRows, changedRows) =&gt; void</p>
<p>当可见的行的集合变化的时候调用此回调函数。visibleRows 以 { sectionID: { rowID: true }}的格式包含了所有可见行，而changedRows 以{ sectionID: { rowID: true | false }}的格式包含了所有刚刚改变了可见性的行，其中如果值为true表示一个行变得可见，而为false表示行刚刚离开可视区域而变得不可见。</p>
<blockquote>
<p>onEndReached function </p>
</blockquote>
<p>当所有的数据都已经渲染过，并且列表被滚动到距离最底部不足onEndReachedThreshold个像素的距离时调用。原生的滚动事件会被作为参数传递。译注：当第一次渲染时，如果数据不足一屏（比如初始值是空的），这个事件也会被触发，请自行做标记过滤。</p>
<blockquote>
<p>onEndReachedThreshold number </p>
</blockquote>
<p>调用onEndReached之前的临界值，单位是像素。</p>
<blockquote>
<p>pageSize number </p>
</blockquote>
<p>每次事件循环（每帧）渲染的行数。</p>
<blockquote>
<p>removeClippedSubviews bool </p>
</blockquote>
<p>用于提升大列表的滚动性能。需要给行容器添加样式overflow:’hidden’。（Android已默认添加此样式）。此属性默认开启。</p>
<blockquote>
<p>renderFooter function </p>
</blockquote>
<p>() =&gt; renderable</p>
<p>页头与页脚会在每次渲染过程中都重新渲染（如果提供了这些属性）。如果它们重绘的性能开销很大，把他们包装到一个StaticContainer或者其它恰当的结构中。页脚会永远在列表的最底部，而页头会在最顶部。</p>
<blockquote>
<p>renderHeader function </p>
<p>renderRow function </p>
</blockquote>
<p>(rowData, sectionID, rowID, highlightRow) =&gt; renderable</p>
<p>从数据源(Data source)中接受一条数据，以及它和它所在section的ID。返回一个可渲染的组件来为这行数据进行渲染。默认情况下参数中的数据就是放进数据源中的数据本身，不过也可以提供一些转换器。</p>
<p>如果某一行正在被高亮（通过调用highlightRow函数），ListView会得到相应的通知。当一行被高亮时，其两侧的分割线会被隐藏。行的高亮状态可以通过调用highlightRow(null)来重置。</p>
<blockquote>
<p>renderScrollComponent function </p>
</blockquote>
<p>(props) =&gt; renderable</p>
<p>指定一个函数，在其中返回一个可以滚动的组件。ListView将会在该组件内部进行渲染。默认情况下会返回一个包含指定属性的ScrollView。</p>
<blockquote>
<p>renderSectionHeader function </p>
</blockquote>
<p>(sectionData, sectionID) =&gt; renderable</p>
<p>如果提供了此函数，会为每个小节(section)渲染一个粘性的标题。</p>
<p>粘性是指当它刚出现时，会处在对应小节的内容顶部；继续下滑当它到达屏幕顶端的时候，它会停留在屏幕顶端，一直到对应的位置被下一个小节的标题占据为止。</p>
<blockquote>
<p>renderSeparator function </p>
</blockquote>
<p>(sectionID, rowID, adjacentRowHighlighted) =&gt; renderable</p>
<p>如果提供了此属性，一个可渲染的组件会被渲染在每一行下面，除了小节标题的前面的最后一行。在其上方的小节ID和行ID，以及邻近的行是否被高亮会作为参数传递进来。</p>
<blockquote>
<p>scrollRenderAheadDistance number </p>
</blockquote>
<p>当一个行接近屏幕范围多少像素之内的时候，就开始渲染这一行。</p>
<h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><blockquote>
<p>getMetrics() </p>
</blockquote>
<p>导出一些用于性能分析的数据。</p>
<blockquote>
<p>scrollTo(…args) </p>
</blockquote>
<p>滚动到指定的x, y偏移处，可以指定是否加上过渡动画。<br>参考:ScrollView#scrollTo.</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="使用Fetch"><a href="#使用Fetch" class="headerlink" title="使用Fetch"></a>使用Fetch</h3><p>React Native提供了和web标准一致的Fetch API，用于满足开发者访问网络的需求。</p>
<blockquote>
<p>发起网络请求</p>
</blockquote>
<p>要从任意地址获取内容的话，只需简单地将网址作为参数传递给fetch方法即可（fetch这个词本身也就是获取的意思）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'https://mywebsite.com/mydata.json'</span>)</div></pre></td></tr></table></figure>
<p>Fetch还有可选的第二个参数，可以用来定制HTTP请求一些参数。你可以指定header参数，或是指定使用POST方法，又或是提交数据等等：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'https://mywebsite.com/endpoint/'</span>, &#123;</div><div class="line">  <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">    <span class="attr">firstParam</span>: <span class="string">'yourValue'</span>,</div><div class="line">    <span class="attr">secondParam</span>: <span class="string">'yourOtherValue'</span>,</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如果你的服务器无法识别上面POST的数据格式，那么可以尝试传统的form格式，示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'https://mywebsite.com/endpoint/'</span>, &#123;</div><div class="line">  <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">body</span>: <span class="string">'key1=value1&amp;key2=value2'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>可以参考Fetch请求文档来查看所有可用的参数。</p>
<blockquote>
<p>处理服务器的响应数据</p>
</blockquote>
<p>网络请求天然是一种异步操作。Fetch 方法会返回一个Promise，这种模式可以简化异步风格的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">getMoviesFromApiAsync() &#123;</div><div class="line">  <span class="keyword">return</span> fetch(<span class="string">'http://facebook.github.io/react-native/movies.json'</span>)</div><div class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</div><div class="line">    .then(<span class="function">(<span class="params">responseJson</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> responseJson.movies;</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.error(error);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你也可以在React Native应用中使用ES7标准中的async/await 语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意这个方法前面有async关键字</span></div><div class="line"><span class="keyword">async</span> getMoviesFromApi() &#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 注意这里的await语句，其所在的函数必须有async关键字声明</span></div><div class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">'http://facebook.github.io/react-native/movies.json'</span>);</div><div class="line">    <span class="keyword">let</span> responseJson = <span class="keyword">await</span> response.json();</div><div class="line">    <span class="keyword">return</span> responseJson.movies;</div><div class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</div><div class="line">    <span class="built_in">console</span>.error(error);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>别忘了catch住fetch可能抛出的异常，否则出错时你可能看不到任何提示。</p>
<h3 id="使用其他的网络库"><a href="#使用其他的网络库" class="headerlink" title="使用其他的网络库"></a>使用其他的网络库</h3><p>React Native中已经内置了XMLHttpRequest API(也就是俗称的ajax)。一些基于XMLHttpRequest封装的第三方库也可以使用，<br>例如frisbee或是axios等。但注意不能使用jQuery，因为jQuery中还使用了很多浏览器中才有而RN中没有的东西（所以也不是所有web中的ajax库都可以直接使用）。</p>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>React Native还支持WebSocket，这种协议可以在单个TCP连接上提供全双工的通信信道。<br>WebSocket一开始的握手需要借助HTTP请求完成，可以实现实时通讯。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://host.com/path'</span>);</div><div class="line"></div><div class="line">ws.onopen = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 打开一个连接</span></div><div class="line">  ws.send(<span class="string">'something'</span>); <span class="comment">// 发送一个消息</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">ws.onmessage = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 接收到了一个消息</span></div><div class="line">  <span class="built_in">console</span>.log(e.data);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ws.onerror = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 发生了一个错误</span></div><div class="line">  <span class="built_in">console</span>.log(e.message);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ws.onclose = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 连接被关闭了</span></div><div class="line">  <span class="built_in">console</span>.log(e.code, e.reason);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="导航器"><a href="#导航器" class="headerlink" title="导航器"></a>导航器</h1><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><h3 id="场景（Scene）的概念与使用"><a href="#场景（Scene）的概念与使用" class="headerlink" title="场景（Scene）的概念与使用"></a>场景（Scene）的概念与使用</h3><p>无论是View中包含Text，还是一个排满了图片的ScrollView，渲染各种组件现在对你来说应该已经得心应手了。<br>这些摆放在一个屏幕中的组件，就共同构成了一个“场景（Scene）”。场景简单来说其实就是一个全屏的React组件。</p>
<p>下面定义了一个仅显示一些文本的简单场景：</p>
<blockquote>
<p>MyScene.js：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; View, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyScene</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">    <span class="attr">title</span>: <span class="string">'MyScene'</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hi! My name is &#123;this.props.title&#125;.<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<font color="#D96060"><br>注意:组件声明前面的export default关键字。它的意思是导出(export)当前组件，以允许其他组件引入(import)和使用当前组件。<br></font>

<blockquote>
<p>index.android.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="comment">// ./MyScene表示的是当前目录下的MyScene.js文件</span></div><div class="line"><span class="comment">// 注意即便当前文件和MyScene.js在同一个目录中，"./"两个符号也是不能省略的！</span></div><div class="line"><span class="comment">// 但是.js后缀是可以省略的</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> MyScene <span class="keyword">from</span> <span class="string">'./MyScene'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">YoDawgApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">MyScene</span> /&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('YoDawgApp', () =&gt; YoDawgApp);</div></pre></td></tr></table></figure>
<p>我们现在已经创建了只有单个场景的App。其中的MyScene同时也是一个可复用的Reac组件的例子。</p>
<h3 id="使用Navigator"><a href="#使用Navigator" class="headerlink" title="使用Navigator"></a>使用Navigator</h3><p>下面我们开始尝试导航跳转。首先要做的是渲染一个Navigator组件，然后通过此组件的renderScene属性方法来渲染其他场景。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;Navigator</div><div class="line">      initialRoute=&#123;&#123; title: 'My Initial Scene', index: 0 &#125;&#125;</div><div class="line">      renderScene=&#123;(route, navigator) =&gt; &#123;</div><div class="line">        return &lt;MyScene title=&#123;route.title&#125; /&gt;</div><div class="line">      &#125;&#125;</div><div class="line">    /&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用导航器经常会碰到“路由(route)”的概念。“路由”抽象自现实生活中的路牌，在RN中专指包含了场景信息的对象。<br>renderScene方法是完全根据路由提供的信息来渲染场景的，你可以在路由中任意自定义参数以区分标记不同的场景。</p>
<h4 id="将场景推入导航栈"><a href="#将场景推入导航栈" class="headerlink" title="将场景推入导航栈"></a>将场景推入导航栈</h4><p>要过渡到新的场景，你需要了解push和pop方法。这两个方法由navigator对象提供，而这个对象就是上面的renderScene方法中传递的第二个参数。<br>我们使用这两个方法来把路由对象推入或弹出导航栈。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">navigator.push(&#123;</div><div class="line">  <span class="attr">title</span>: <span class="string">'Next Scene'</span>,</div><div class="line">  <span class="attr">index</span>: <span class="number">1</span>,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">navigator.pop();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Navigator, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> MyScene <span class="keyword">from</span> <span class="string">'./MyScene'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleNavigationApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Navigator</div><div class="line">        initialRoute=&#123;&#123; title: 'My Initial Scene', index: 0 &#125;&#125;</div><div class="line">        renderScene=&#123;(route, navigator) =&gt;</div><div class="line">          &lt;MyScene</div><div class="line">            title=&#123;route.title&#125;</div><div class="line"></div><div class="line">            // 调用这个函数显示一个新的场景           </div><div class="line">            onForward=&#123; () =&gt; &#123;    </div><div class="line">              const nextIndex = route.index + 1;</div><div class="line">              navigator.push(&#123;</div><div class="line">                title: 'Scene ' + nextIndex,</div><div class="line">                index: nextIndex,</div><div class="line">              &#125;);</div><div class="line">            &#125;&#125;</div><div class="line"></div><div class="line">            // 调用这个函数回到当前场景</div><div class="line">            onBack=&#123;() =&gt; &#123;</div><div class="line">              if (route.index &gt; 0) &#123;</div><div class="line">                navigator.pop();</div><div class="line">              &#125;</div><div class="line">            &#125;&#125;</div><div class="line">          /&gt;</div><div class="line">        &#125;</div><div class="line">      /&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('SimpleNavigationApp', () =&gt; SimpleNavigationApp);</div></pre></td></tr></table></figure>
<blockquote>
<p>MyScene.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; View, Text, TouchableHighlight &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyScene</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">title</span>: PropTypes.string.isRequired,</div><div class="line">    <span class="attr">onForward</span>: PropTypes.func.isRequired,</div><div class="line">    <span class="attr">onBack</span>: PropTypes.func.isRequired,</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Current Scene: &#123; this.props.title &#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TouchableHighlight</span> <span class="attr">onPress</span>=<span class="string">&#123;this.props.onForward&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span>&gt;</span>点我进入下一场景<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">TouchableHighlight</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TouchableHighlight</span> <span class="attr">onPress</span>=<span class="string">&#123;this.props.onBack&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span>&gt;</span>点我返回上一场景<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">TouchableHighlight</span>&gt;</span>    </div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MyScene通过title属性接受了路由对象中的title值。它还包含了两个可点击的组件TouchableHighlight，<br>会在点击时分别调用通过props传入的onForward和onBack方法，而这两个方法各自调用了navigator.push()和navigator.pop()，从而实现了场景的变化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native 基础知识学习&lt;br&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://cokernut.top/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://cokernut.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+GitHub Pages搭建静态博客</title>
    <link href="http://cokernut.top/2016/11/29/Note/%E4%BD%BF%E7%94%A8Hexo+GitHub%20Pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://cokernut.top/2016/11/29/Note/使用Hexo+GitHub Pages搭建静态博客/</id>
    <published>2016-11-28T16:00:00.000Z</published>
    <updated>2016-11-29T03:38:04.279Z</updated>
    
    <content type="html"><![CDATA[<p>使用Hexo+GitHub Pages搭建静态博客<br><a id="more"></a></p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>一个基于Node.js的快速，简单和强大的博客框架。</p>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>GitHub Pages可以被认为是用户编写的、托管在github上的静态网页。</p>
<h2 id="建立GitHub-Pages项目"><a href="#建立GitHub-Pages项目" class="headerlink" title="建立GitHub Pages项目"></a>建立GitHub Pages项目</h2><p>在GitHub上建立一个名称为：username.github.io的项目，username一定要填写自己的GitHub的名称，之后可以把生成的静态网页提交到这个项目上，<br>然后可以通过 <a href="https://username.github.io" target="_blank" rel="external">https://username.github.io</a> 这个地址访问到我们生成的静态网页。</p>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><ul>
<li>Hexo是基于Node.js的，所以首先要安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li>
<li><p>使用命令安装hexo:  </p>
<blockquote>
<p>npm install hexo-cli -g  </p>
</blockquote>
<p>注意：使用-g表示全局安装，没有加-g表示本地安装（当前目录安装）。</p>
</li>
</ul>
<p>查看版本：</p>
<blockquote>
<p>hexo version  或者 hexo v  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">hexo: 3.2.2</div><div class="line">hexo-cli: 1.0.2</div><div class="line">os: Windows_NT 10.0.14393 win32 x64</div><div class="line">http_parser: 2.7.0</div><div class="line">node: 6.9.1</div><div class="line">v8: 5.1.281.84</div><div class="line">uv: 1.9.1</div><div class="line">zlib: 1.2.8</div><div class="line">ares: 1.10.1-DEV</div><div class="line">icu: 57.1</div><div class="line">modules: 48</div><div class="line">openssl: 1.0.2j</div></pre></td></tr></table></figure>
<p>查看帮助：</p>
<blockquote>
<p>hexo help  或者 hexo h  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Usage: hexo &lt;command&gt;</div><div class="line"></div><div class="line">Commands:</div><div class="line">  clean     Removed generated files and cache. #删除生成的文件和缓存。</div><div class="line">  config    Get or set configurations.</div><div class="line">  deploy    Deploy your website. #部署网站，就是提交到项目中</div><div class="line">  generate  Generate static files. #生成静态文件</div><div class="line">  help      Get help on a command.   #查看帮助信息</div><div class="line">  init      Create a new Hexo folder. #创建一个hexo项目，不指定文件夹名，则在当前目录创建，否则在后面指定的文件夹创建</div><div class="line">  list      List the information of the site</div><div class="line">  migrate   Migrate your site from other system to Hexo.</div><div class="line">  new       Create a new post. #新建文件，可以指定模板，否则使用默认模板</div><div class="line">  publish   Moves a draft post from _drafts to _posts folder.</div><div class="line">  render    Render files with renderer plugins.</div><div class="line">  server    Start the server. #开启服务器</div><div class="line">  version   Display version information. #查看版本信息</div><div class="line"></div><div class="line">Global Options:</div><div class="line">  --config  Specify config file instead of using _config.yml #指定配置文件，代替默认的_config.yml</div><div class="line">  --cwd     Specify the CWD #自定义当前工作目录</div><div class="line">  --debug   Display all verbose messages in the terminal #调试模式，输出所有日志信息</div><div class="line">  --draft   Display draft posts #草稿模式</div><div class="line">  --safe    Disable all plugins and scripts #安全模式，禁用所有的插件和脚本</div><div class="line">  --silent  Hide output on console #无日志输出模式</div></pre></td></tr></table></figure>
<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><blockquote>
<p>hexo init [项目文件夹]  </p>
</blockquote>
<p>注意：项目文件夹是可选的，不指定文件夹名，则在当前目录创建项目，否则在后面指定的文件夹创建项目  </p>
<p>新建项目之后切换到项目的根目录使用：</p>
<blockquote>
<p>npm install </p>
</blockquote>
<p>这条命令来为项目安装依赖包，具体安装内容可以在package.json文件里找到。  </p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; scaffolds ：模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo 有三种默认布局： post 、 page 和 draft ，它们分别对应不同的路径。新建文件的默认布局是 post ，可以在配置文件中更改布局。用 draft 布局生成的文件会被保存到 source/_drafts 文件夹。</div><div class="line">&gt; source ：资源文件夹是存放用户资源的地方。</div><div class="line">&gt; &gt; source/_post ：文件箱。（低版本的hexo还会存在一个 _draft ，这是草稿箱）除 _posts 文件夹之外，开头命名为 _ (下划线)的文件/ 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去</div><div class="line">&gt; themes ：主题 文件夹。Hexo 会根据主题来生成静态页面。</div><div class="line">&gt; &gt; themes/landscape ：默认的皮肤文件夹</div><div class="line">&gt; &gt; &gt; themes/landscape/_config.yml :当前主题配置文件</div><div class="line">&gt; _config.yml ：全局的配置文件，每次更改要重启服务。</div></pre></td></tr></table></figure>
<p>之后使用：  </p>
<blockquote>
<p>hexo server 或者 hexo s  </p>
</blockquote>
<p>来开启本地服务器进行预览。<br>我们可以过浏览器打开地址， <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 或者 <a href="http://0.0.0.0:4000" target="_blank" rel="external">http://0.0.0.0:4000</a> 来预览我们的项目。</p>
<h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><blockquote>
<p>_config.yml  </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site 站点配置</div><div class="line">title: Cokernut #网站标题</div><div class="line">subtitle: #网站副标题</div><div class="line">description: #网站描述</div><div class="line">author: Cokernut #作者</div><div class="line">language: zh-CN #网站使用的语言</div><div class="line">timezone: Asia/Shanghai #网站时区</div><div class="line"></div><div class="line"># URL 配置</div><div class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</div><div class="line">url: http://cokernut.top #网址，搜索时会在搜索引擎中显示</div><div class="line">root: / #网站根目录</div><div class="line">permalink: :year/:month/:day/:title/ #永久链接格式</div><div class="line">permalink_defaults: #永久链接中各部分的默认值</div><div class="line"></div><div class="line"># Directory 目录配置</div><div class="line">source_dir: source #资源文件夹，这个文件夹用来存放内容</div><div class="line">public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件</div><div class="line">tag_dir: tags #标签文件夹</div><div class="line">archive_dir: archives #归档文件夹</div><div class="line">category_dir: categories #分类文件夹</div><div class="line">code_dir: downloads/code #Include code 文件夹</div><div class="line">i18n_dir: :lang #国际化文件夹</div><div class="line">skip_render: #跳过指定文件的渲染，您可使用 glob 来配置路径</div><div class="line"></div><div class="line"># Writing 写作配置</div><div class="line">new_post_name: :title.md # 新文章的文件名称</div><div class="line">default_layout: post #默认布局</div><div class="line">titlecase: false #把标题变成titlecase</div><div class="line">external_link: true #在新标签页打开外部链接</div><div class="line">filename_case: 0 #把文件名称转换为 (1) 小写或 (2) 大写</div><div class="line">render_drafts: false #显示草稿</div><div class="line">post_asset_folder: false #是否启动资源文件夹</div><div class="line">relative_link: false #把链接改为与根目录的相对位址</div><div class="line">future: true</div><div class="line">highlight: #代码块的设置</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag 分类 &amp; 标签</div><div class="line">default_category: uncategorized #默认分类</div><div class="line">category_map: #分类别名</div><div class="line">tag_map: #标签别名</div><div class="line"></div><div class="line"># Date / Time format 日期/时间</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination 分页</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Extensions 扩展</div><div class="line">## Plugins: https://hexo.io/plugins/ #插件</div><div class="line">## Themes: https://hexo.io/themes/ #主题</div><div class="line">theme: landscape-plus #当前主题名称</div><div class="line"></div><div class="line"># Deployment #部署</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy: #github配置</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/cokernut/cokernut.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>主题相关配置可以在主题下面的_config.yml里进行配置，不同的主题有些配置不同。</p>
<h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><blockquote>
<p>hexo new [模板] &lt;标题&gt; 或者 hexo n [模板] &lt;标题&gt;   </p>
</blockquote>
<p>注意：其中[模板]是可选参数，默认值为 post，如果没有设置[模板]的话，默认使用 _config.yml<br>中的 default_layout 参数代替。如果标题包含空格的话，需用引号括起来。  </p>
<p>Hexo提供的模板在 scaffolds 目录下，也可以在此目录下自建模板文件或者修改模板文件。新建的文件会在<br>source/_post 目录下。</p>
<p>发表的文章会全部显示，如果文章很长，就只要显示文章的摘要就行了。写法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title:</div><div class="line">date:</div><div class="line">tag： # tags 和 categories 有多个，则用数组形式。[Java, Android]</div><div class="line">categories：</div><div class="line">...</div><div class="line">---</div><div class="line"></div><div class="line">摘要</div><div class="line"></div><div class="line">&lt;!--more--&gt;</div><div class="line"></div><div class="line">全文</div></pre></td></tr></table></figure></p>
<p>这时主页就能够看到只显示标题和摘要了，同时会有Read More的链接按钮，<br>这个链接按钮的文字可以更改，在主题的配置文件(themes/主题文件夹/_config.yml)中，<br>找到 Content:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Content</div><div class="line">excerpt_link: Read More #可以更改成想要显示的文字</div><div class="line">fancybox: true</div></pre></td></tr></table></figure></p>
<h2 id="页面的生成"><a href="#页面的生成" class="headerlink" title="页面的生成"></a>页面的生成</h2><p>在项目部署之前要通过命令把所有的文章都做静态化处理，生成对应的html, javascript, css，<br>使得所有的文章都是由静态文件组成的。</p>
<blockquote>
<p>hexo generate 或者 hexo g  </p>
</blockquote>
<p>运行这个命令之后在本地目录下，会生成一个public的目录，里面包括了所有静态化的文件。 </p>
<h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>生成静态文件之后，如果要发布到github，还需要配置 deploy 指令。<br>在全局的配置文件(_config.yml)中找到 deploy ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment #部署</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy: #github配置</div><div class="line">  type: git #类型GitHub的类型属于git</div><div class="line">  repo: https://github.com/cokernut/cokernut.github.io.git #GitHub Pages的git地址</div><div class="line">  branch: master #提交到的分支</div></pre></td></tr></table></figure></p>
<p>之后安装hexo-deployer-git插件：</p>
<blockquote>
<p>npm install hexo-deployer-git -s  </p>
</blockquote>
<p>然后使用命令：</p>
<blockquote>
<p>hexo deploy 或者 hexo d</p>
</blockquote>
<p>把项目部署到GitHub Pages上，提交的文件是在username.github.io项目上。<br>之后你可以访问<a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a> 查看效果。</p>
<h2 id="绑定自己的域名（可选）"><a href="#绑定自己的域名（可选）" class="headerlink" title="绑定自己的域名（可选）"></a>绑定自己的域名（可选）</h2><ol>
<li>购买一个自己的域名</li>
<li>在username.github.io项目的根目录建立一个CNAME文件，在文件中填写上自己购买的域名，比如：username.net，不需要添加http或者是www等前缀。</li>
<li>使用ping命令得到username.github.io的IP地址并记录。</li>
<li>在域名的DNS配置上添加记录，两种方式选一种：  </li>
</ol>
<p>添加A记录：  </p>
<table>
<thead>
<tr>
<th>记录类型</th>
<th>主机记录</th>
<th>记录值</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>@</td>
<td>IP地址</td>
</tr>
<tr>
<td>A</td>
<td>www</td>
<td>IP地址</td>
</tr>
</tbody>
</table>
<p>或者添加CNAME记录：  </p>
<table>
<thead>
<tr>
<th>记录类型</th>
<th>主机记录</th>
<th>记录值  </th>
</tr>
</thead>
<tbody>
<tr>
<td>CNAME</td>
<td>@</td>
<td>username.github.io  </td>
</tr>
<tr>
<td>CNAME</td>
<td>www</td>
<td>username.github.io  </td>
</tr>
</tbody>
</table>
<p>两种记录类型相同主机记录只能添加一种不然会提示冲突，并且不能添加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Hexo+GitHub Pages搭建静态博客&lt;br&gt;
    
    </summary>
    
      <category term="GitHub" scheme="http://cokernut.top/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://cokernut.top/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>React Native嵌入Android原生项目中</title>
    <link href="http://cokernut.top/2016/11/25/ReactNative/React%20Native%E5%B5%8C%E5%85%A5Android%E5%8E%9F%E7%94%9F%E9%A1%B9%E7%9B%AE%E4%B8%AD/"/>
    <id>http://cokernut.top/2016/11/25/ReactNative/React Native嵌入Android原生项目中/</id>
    <published>2016-11-24T16:00:00.000Z</published>
    <updated>2016-12-09T10:12:56.359Z</updated>
    
    <content type="html"><![CDATA[<p>React Native嵌入Android原生项目中<br><a id="more"></a></p>
<h2 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h2><p>首先你要搭建好React Native for Android开发环境， 没有搭建好的可以参考：<a href="http://cokernut.top/2016/11/23/Android/React%20Native%20for%20Android%20Windows%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">React Native for Android Windows环境搭建</a>  </p>
<h2 id="用Android-Studio新建Android原生项目"><a href="#用Android-Studio新建Android原生项目" class="headerlink" title="用Android Studio新建Android原生项目"></a>用Android Studio新建Android原生项目</h2><p>我创建了一个名叫ReactNativeDemo的原生项目。</p>
<h2 id="把React-Native集成到原生项目当中"><a href="#把React-Native集成到原生项目当中" class="headerlink" title="把React Native集成到原生项目当中"></a>把React Native集成到原生项目当中</h2><h3 id="利用Windows命令行在项目根目录-ReactNativeDemo文件夹-下执行下面三行命令："><a href="#利用Windows命令行在项目根目录-ReactNativeDemo文件夹-下执行下面三行命令：" class="headerlink" title="利用Windows命令行在项目根目录(ReactNativeDemo文件夹)下执行下面三行命令："></a>利用Windows命令行在项目根目录(ReactNativeDemo文件夹)下执行下面三行命令：</h3><blockquote>
<p>npm init<br>npm install –save react react-native<br>curl -o .flowconfig <a href="https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig" target="_blank" rel="external">https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig</a>  </p>
</blockquote>
<p>这将在项目根目录(ReactNativeDemo文件夹)创建node_modules文件夹(模块)，并添加React Native依赖。</p>
<h2 id="针对上面三条命令的解释"><a href="#针对上面三条命令的解释" class="headerlink" title="针对上面三条命令的解释"></a>针对上面三条命令的解释</h2><h3 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h3><p><img src="/images/ReactNative/React_Native_to_Native/1.png" alt="图片" title="图片"><br><img src="/images/ReactNative/React_Native_to_Native/2.png" alt="图片" title="图片"><br>注意:<br>name的填写由图可知填默认的是不行的，它的要求是不能有大写字母并且不能以数字开头；<br>entry point的填写入口文件名称，默认的是index.js，我们建立的入口文件是index.android.js，所以填写index.android.js。只要填写的名称与自己定义的入口文件名称一致就行。<br>其他的项根据自己需求填写即可。  </p>
<p>这个步骤会在项目的根目录产生一个名称为package.json的文件，我们还需要修改我们的package.json文件：<br>在”scripts”节点下添加”start”: “node node_modules/react-native/local-cli/cli.js start”。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">   "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</div><div class="line">   "start": "node node_modules/react-native/local-cli/cli.js start"</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>其中的test节点是自动生成的，我们可以把它删除，最后我的package.json为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"reactnativedemo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.android.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^15.4.1"</span>,</div><div class="line">    <span class="attr">"react-native"</span>: <span class="string">"^0.38.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="npm-install-–save-react-react-native"><a href="#npm-install-–save-react-react-native" class="headerlink" title="npm install –save react react-native"></a>npm install –save react react-native</h3><p><img src="/images/ReactNative/React_Native_to_Native/3.png" alt="图片" title="图片"><br><img src="/images/ReactNative/React_Native_to_Native/4.png" alt="图片" title="图片"><br><img src="/images/ReactNative/React_Native_to_Native/5.png" alt="图片" title="图片">  </p>
<h3 id="curl-o-flowconfig-https-raw-githubusercontent-com-facebook-react-native-master-flowconfig"><a href="#curl-o-flowconfig-https-raw-githubusercontent-com-facebook-react-native-master-flowconfig" class="headerlink" title="curl -o .flowconfig https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig"></a>curl -o .flowconfig <a href="https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig" target="_blank" rel="external">https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig</a></h3><p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。<br>所以可知上面这句话的意思是在对应网址下下载.flowconfig文件。<br>在windows下我们要使用curl命令会提示:curl不是内部和外部命令，也不是可执行文件或批处理命令。。。<br>我们在windows下要使用curl命令比较麻烦。解决方法就是我们用下载工具从<a href="https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig" target="_blank" rel="external">https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig</a>  上把.flowconfig下载下来复制到项目根目录，或者是在项目根目录下新建一个.flowconfig文件用浏览器访问这个网址其中的内容把其中的内容复制到文件当中。</p>
<h2 id="建立index-android-js文件"><a href="#建立index-android-js文件" class="headerlink" title="建立index.android.js文件"></a>建立index.android.js文件</h2><p>在项目的根目录建立index.android.js文件并把下面的代码复制进去：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.hello&#125;</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">hello</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'ReactNativeView'</span>, () =&gt; Root);</div></pre></td></tr></table></figure>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在项目的根目录的build.gradle中加入：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123;</div><div class="line">            <span class="comment">//添加react native依赖，url路径根据实际的来写，本文的如下：</span></div><div class="line">            url <span class="string">"$rootDir/node_modules/react-native/android"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：Android项目默认的依赖包的源为jcenter()，其中并不包含最新版的 React Native（它只到0.20.1）。<br>新版的React Native只在npm里发布，所以你需要增加一下依赖包的源。在编译完后，检查项目External Libraries的<br>react-native版本如果为0.20.1，则说明maven的依赖源没有添加成功。这时候应该是maven的路径出问题了，你要检查<br>路径是否正确，正确的结果为：<br><img src="/images/ReactNative/React_Native_to_Native/6.png" alt="图片" title="图片">  </p>
<p>在项目的模块(app)中的build.gradle文件中添加：<br>文件头添加（可选）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply from: &quot;$rootDir/node_modules/react-native/react.gradle&quot;</div></pre></td></tr></table></figure></p>
<p>无法编译通过的时候可以尝试添加上面这句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &quot;com.facebook.react:react-native:+&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你想总是使用一个特定的版本，你需要把+替换成你已经下载的React Native的版本号，<br>这个版本号应该与package.json中的react-native的版本号(“react-native”: “^0.38.0”)一致的。如本例中的0.38.0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &quot;com.facebook.react:react-native:0.38.0&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="添加原生Activity文件："><a href="#添加原生Activity文件：" class="headerlink" title="添加原生Activity文件："></a>添加原生Activity文件：</h2><h3 id="官方教程的写法："><a href="#官方教程的写法：" class="headerlink" title="官方教程的写法："></a>官方教程的写法：</h3><blockquote>
<p>MyReactActivity  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.KeyEvent;</div><div class="line"><span class="keyword">import</span> com.facebook.react.BuildConfig;</div><div class="line"><span class="keyword">import</span> com.facebook.react.ReactInstanceManager;</div><div class="line"><span class="keyword">import</span> com.facebook.react.ReactRootView;</div><div class="line"><span class="keyword">import</span> com.facebook.react.common.LifecycleState;</div><div class="line"><span class="keyword">import</span> com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;</div><div class="line"><span class="keyword">import</span> com.facebook.react.shell.MainReactPackage;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReactActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        mReactRootView = <span class="keyword">new</span> ReactRootView(<span class="keyword">this</span>);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setApplication(getApplication())</div><div class="line">                .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">                .setJSMainModuleName(<span class="string">"index.android"</span>) <span class="comment">//对应index.android.js</span></div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                <span class="comment">//.setUseDeveloperSupport(BuildConfig.DEBUG) //开发者支持，BuildConfig.DEBUG的值默认是false，无法使用开发者菜单</span></div><div class="line">                .setUseDeveloperSupport(<span class="keyword">true</span>) <span class="comment">//开发者支持,开发的时候要设置为true，不然无法使用开发者菜单</span></div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line">        <span class="comment">//这里的ReactNativeView对应index.android.js中AppRegistry.registerComponent('ReactNativeView', () =&gt; ReactNativeView)的ReactNativeView</span></div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager, <span class="string">"ReactNativeView"</span>, <span class="keyword">null</span>);</div><div class="line">        setContentView(mReactRootView);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeDefaultOnBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onBackPressed();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostPause(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostResume(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostDestroy(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onBackPressed();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyUp</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">//当我们点击菜单的时候打开发者菜单，一个弹窗（此处需要悬浮窗权限才能显示）</span></div><div class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_MENU &amp;&amp; mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.showDevOptionsDialog();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyUp(keyCode, event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><font color="#EF7A7A">注意：</font></h3><p>官方教程的写法中这里：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">    mReactRootView = <span class="keyword">new</span> ReactRootView(<span class="keyword">this</span>);</div><div class="line">    mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">            .setApplication(getApplication())</div><div class="line">            .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">            .setJSMainModuleName(<span class="string">"index.android"</span>) <span class="comment">//对应index.android.js</span></div><div class="line">            .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">            <span class="comment">//.setUseDeveloperSupport(BuildConfig.DEBUG) //开发者支持，BuildConfig.DEBUG的值默认是false，无法使用开发者菜单</span></div><div class="line">            .setUseDeveloperSupport(<span class="keyword">true</span>) <span class="comment">//开发者支持,开发的时候要设置为true，不然无法使用开发者菜单</span></div><div class="line">            .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">            .build();</div><div class="line">    <span class="comment">//这里的ReactNativeView对应index.android.js中AppRegistry.registerComponent('ReactNativeView', () =&gt; ReactNativeView)的ReactNativeView</span></div><div class="line">    mReactRootView.startReactApplication(mReactInstanceManager, <span class="string">"ReactNativeView"</span>, <span class="keyword">null</span>);</div><div class="line">    setContentView(mReactRootView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>的setUseDeveloperSupport(BuildConfig.DEBUG)方法，设置开发者支持，BuildConfig.DEBUG的值默认是false，无法使用开发者支持（开发者菜单、即时预览等），所以我们要把BuildConfig.DEBUG改为true。</p>
<h3 id="另一种原生Activity写法"><a href="#另一种原生Activity写法" class="headerlink" title="另一种原生Activity写法"></a>另一种原生Activity写法</h3><blockquote>
<p>MyReactNativeActivity</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.facebook.react.ReactActivity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReactNativeActivity</span> <span class="keyword">extends</span> <span class="title">ReactActivity</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这里的ReactNativeView对应index.android.js中AppRegistry.registerComponent('ReactNativeView', () =&gt; Root)的ReactNativeView</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMainComponentName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"ReactNativeView"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="两种原生Activity写法的对比："><a href="#两种原生Activity写法的对比：" class="headerlink" title="两种原生Activity写法的对比："></a>两种原生Activity写法的对比：</h3><h5 id="第一种（官方例子的）"><a href="#第一种（官方例子的）" class="headerlink" title="第一种（官方例子的）"></a>第一种（官方例子的）</h5><p>这种写法的优势是可以利用React Native来写我们界面中的某一块区域，就是利用原生布局的addView()方法把mReactRootView加入到布局中，比如：</p>
<blockquote>
<p>activity_my_react.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#9DB16D"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"40sp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"原生控件TextView"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/layout"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>MyReactActivity修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_my_react);</div><div class="line">    mReactLayout = (LinearLayout) findViewById(R.id.layout);</div><div class="line"></div><div class="line">    mReactRootView = <span class="keyword">new</span> ReactRootView(<span class="keyword">this</span>);</div><div class="line">    mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">            .setApplication(getApplication())</div><div class="line">            .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">            .setJSMainModuleName(<span class="string">"index.android"</span>)<span class="comment">//对应index.android.js</span></div><div class="line">            .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">            <span class="comment">//.setUseDeveloperSupport(BuildConfig.DEBUG) //开发者支持，BuildConfig.DEBUG的值默认是false，无法使用开发者菜单</span></div><div class="line">            .setUseDeveloperSupport(<span class="keyword">true</span>) <span class="comment">//开发者支持,开发的时候要设置为true，不然无法使用开发者菜单</span></div><div class="line">            .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">            .build();</div><div class="line">    <span class="comment">//这里的ReactNativeView对应index.android.js中AppRegistry.registerComponent('ReactNativeView', () =&gt; Root)的ReactNativeView</span></div><div class="line">    mReactRootView.startReactApplication(mReactInstanceManager, <span class="string">"ReactNativeView"</span>, <span class="keyword">null</span>);</div><div class="line">    mReactLayout.addView(mReactRootView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>index.android.js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  View,</div><div class="line">  Text,</div><div class="line">  StyleSheet</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span>&gt;</span>React Native组件<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#65A35F'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">welcome</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">40</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'ReactNativeView'</span>, () =&gt; Root);</div></pre></td></tr></table></figure>
<h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>这种方式是优势是写法简单。但是无法局部使用React Native来布局。</p>
<h2 id="AndroidManifest-xml相关"><a href="#AndroidManifest-xml相关" class="headerlink" title="AndroidManifest.xml相关"></a>AndroidManifest.xml相关</h2><blockquote>
<p>AndroidManifest.xml  </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"top.cokernut.reactnativetonative"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_ALERT_WINDOW"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">".MyApplication"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MyReactActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"MyReactActivity"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MyReactNativeActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"MyReactNativeActivity"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat.Light.NoActionBar"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.facebook.react.devsupport.DevSettingsActivity"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>网络权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>悬浮窗权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>有悬浮窗权限才能显示：<br><img src="/images/ReactNative/React_Native_to_Native/7.png" alt="图片" title="图片">    </p>
<p>如果遇到React Native的一些组件不能使用可以尝试在注册Activity时添加主题为Theme.AppCompat.Light.NoActionBar，看能否解决问题，因为一些组件依赖于这个主题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=&quot;.MyReactNativeActivity&quot;</div><div class="line">    android:label=&quot;@string/app_name&quot;</div><div class="line">    android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure></p>
<p>开发设置界面：<br><img src="/images/ReactNative/React_Native_to_Native/8.png" alt="图片" title="图片">     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt;</div></pre></td></tr></table></figure>
<h2 id="运行应用"><a href="#运行应用" class="headerlink" title="运行应用"></a>运行应用</h2><h3 id="启动开发服务器"><a href="#启动开发服务器" class="headerlink" title="启动开发服务器"></a>启动开发服务器</h3><p>在项目的根目录下运行：</p>
<blockquote>
<p>npm start  </p>
</blockquote>
<p><img src="/images/ReactNative/React_Native_to_Native/9.png" alt="图片" title="图片">     </p>
<p>这个命令运行的是我们package.json中配置的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></p>
<p>可以用浏览器访问<a href="http://localhost:8081/index.android.bundle?platform=android" target="_blank" rel="external">http://localhost:8081/index.android.bundle?platform=android</a> 看看是否可以看到打包后的脚本。<br>第一次访问通常需要十几秒，并且在命令行可以看到进度条。</p>
<h3 id="构建与运行你的程序"><a href="#构建与运行你的程序" class="headerlink" title="构建与运行你的程序"></a>构建与运行你的程序</h3><p>两种方法：  </p>
<ol>
<li>直接利用Android Studio像平常一样运行项目  </li>
<li>在命令行中项目目录下运行gradlew installDebug  </li>
</ol>
<p>如果你使用的是Android studio为你构建而不是Gradle构建(gradlew installDebug)，你要确保你在安装应用之前运行了npm start。<br>以防止它们之间出现冲突。<br>效果：<br><img src="/images/ReactNative/React_Native_to_Native/15.png" alt="图片" title="图片"></p>
<p>MyReactActivity:<br><img src="/images/ReactNative/React_Native_to_Native/16.png" alt="图片" title="图片"> <img src="/images/ReactNative/React_Native_to_Native/17.png" alt="图片" title="图片">   </p>
<p>MyReactNativeActivity:<br><img src="/images/ReactNative/React_Native_to_Native/18.png" alt="图片" title="图片"> <img src="/images/ReactNative/React_Native_to_Native/19.png" alt="图片" title="图片">   </p>
<h3 id="在Android-Studio中打包成独立安装程序（release）"><a href="#在Android-Studio中打包成独立安装程序（release）" class="headerlink" title="在Android Studio中打包成独立安装程序（release）"></a>在Android Studio中打包成独立安装程序（release）</h3><p>你可以使用Android Studio来创建你的App的发布版本！像以前创建原生应用程序的发布版本一样简单，只是有一个额外步骤：<br>在你打包你的发布版本之前要创建一个bundle文件，这个bundle文件会创建在项目的assets目录中，并且这个文件会包含在你的apk包中，<br>在你的项目根目录中运行：  </p>
<blockquote>
<p>react-native bundle –platform android –dev false –entry-file index.android.js –bundle-output app/src/main/assets/index.android.bundle –assets-dest app/src/main/res/  </p>
</blockquote>
<p>app/src/main根据实际情况改为自己项目中的目录，参考assets文件夹的目录。<br><img src="/images/ReactNative/React_Native_to_Native/11.png" alt="图片" title="图片"><br>结果为：<br><img src="/images/ReactNative/React_Native_to_Native/10.png" alt="图片" title="图片"><br>如果报错： </p>
<blockquote>
<p>ENOENT: no such file or directory  </p>
</blockquote>
<p>你需要在你的app模块中建立assets文件夹和index.android.bundle。</p>
<p>现在你可以对你的应用程序进行打包发布了。</p>
<h4 id="debug模式release模式React-Native-JS代码调试的区别"><a href="#debug模式release模式React-Native-JS代码调试的区别" class="headerlink" title="debug模式release模式React Native JS代码调试的区别:"></a>debug模式release模式React Native JS代码调试的区别:</h4><p>debug模式: 修改完js代码打开开发者菜单点击Reload就可以看到更新后的效果，或者是开启Live Reload(点击Enable Live Reload)<br>这样我们修改了js文件只要保存就会自动Reload。<br>release模式: 修改完js代码需要重新生成index.android.bundle 文件，点击run之后才能看到效果。因为正式版发布后是无法<br>依赖本地服务器去更新index.android.bundle，需要把index.android.bundle打包到apk中才能运行。</p>
<h2 id="更新React-Naive版本"><a href="#更新React-Naive版本" class="headerlink" title="更新React Naive版本"></a>更新React Naive版本</h2><p>1.打开项目目录下的package.json文件，然后在dependencies模块下找到react-native，将当前版本号改到最新（或指定）版本号，如：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"name"</span>: <span class="string">"reactnativedemo"</span>,</div><div class="line"><span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line"><span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line"><span class="attr">"main"</span>: <span class="string">"index.android.js"</span>,</div><div class="line"><span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line"><span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line"><span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^15.4.1"</span>,</div><div class="line">    <span class="attr">"react-native"</span>: <span class="string">"^0.38.0"</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>react-native的npm包的最新版本可以去<a href="https://www.npmjs.com/package/react-native" target="_blank" rel="external">这里</a>查看，或使用npm info react-native命令查看。</p>
<p>2.项目的根目录执行：</p>
<blockquote>
<p>npm install</p>
</blockquote>
<p>安装最新的React Native版本,成功后可能会出现如下类似警告：</p>
<blockquote>
<p>npm WARN react-native@0.38.0 requires a peer of react@15.4.1 but none was installed.  </p>
</blockquote>
<p>3.根据警告执行：</p>
<blockquote>
<p>npm install –save react@15.4.1</p>
</blockquote>
<p>更新最新的React且项目下package.json 的 dependencies下的react版本会被修改为 15.4.1</p>
<p>4.新版本的npm包通常还会包含一些动态生成的文件，这些文件是在运行react-native init创建新<br>项目时生成的，比如iOS和Android的项目文件。为了使老项目的项目文件也能得到更新<br>（不重新init），你需要在命令行中运行：</p>
<blockquote>
<p>react-native upgrade  </p>
</blockquote>
<p>这一命令会检查最新的项目模板，然后进行如下操作：</p>
<ul>
<li>如果是新添加的文件，则直接创建。</li>
<li>如果文件和当前版本的文件相同，则跳过。</li>
<li>如果文件和当前版本的文件不同，则会提示你一些选项：查看两者的不同，选择保留你的版本或是用新的模板覆盖。你可以按下h键来查看所有可以使用的命令。</li>
</ul>
<p>注意：如果你有修改原生代码，那么在使用upgrade升级前，先备份，再覆盖。覆盖完成后，使用比对工具找出差异，将你之前修改的代码逐步搬运到新文件中。</p>
<p>5.执行：</p>
<blockquote>
<p>react-native -v</p>
</blockquote>
<p>通过如上命令来看最新的版本，检测是否升级成功！</p>
<h2 id="问题与解决方案"><a href="#问题与解决方案" class="headerlink" title="问题与解决方案"></a>问题与解决方案</h2><h3 id="打不开开发者菜单"><a href="#打不开开发者菜单" class="headerlink" title="打不开开发者菜单"></a>打不开开发者菜单</h3><p>查看AndroidManifest.xml文件中是否加入了悬浮窗权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>并且你要在手机上开启你要调试的应用的悬浮窗权限，不同的手机开启方式不同，可以自行搜索开启方法。</p>
<h3 id="错误-“-data-data-package-name-lib-main-libgnustl-shared-so”-is-32-bit-instead-of-64-bit"><a href="#错误-“-data-data-package-name-lib-main-libgnustl-shared-so”-is-32-bit-instead-of-64-bit" class="headerlink" title="错误 “/data/data/package-name/lib-main/libgnustl_shared.so” is 32-bit instead of 64-bit"></a>错误 “/data/data/package-name/lib-main/libgnustl_shared.so” is 32-bit instead of 64-bit</h3><p>取消掉所有的64位的.so文件，全部加载32位的.so文件。  </p>
<ol>
<li><p>在项目的根目录的build.gradle中加入：   </p>
<blockquote>
<p>android.useDeprecatedNdk=true.  </p>
</blockquote>
</li>
<li><p>在项目的模块(app)中的build.gradle文件中添加:</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        ndk &#123;</div><div class="line">            abiFilters "armeabi-v7a", "x86"</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        packagingOptions &#123;</div><div class="line">            exclude "lib/arm64-v8a/librealm-jni.so"</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="错误：Could-not-get-BatchedBridge-make-sure-your-bundle-is-packaged-correctly"><a href="#错误：Could-not-get-BatchedBridge-make-sure-your-bundle-is-packaged-correctly" class="headerlink" title="错误：Could not get BatchedBridge,make sure your bundle is packaged correctly"></a>错误：Could not get BatchedBridge,make sure your bundle is packaged correctly</h3><ol>
<li>build模式选择了release模式，引发的这个错误，你可以检查一下是否是debug模式，如果不是改为debug再试一下。</li>
<li>ReactInstanceManager的setUseDeveloperSupport(BuildConfig.DEBUG)方法值是否正确，设置开发者支持，BuildConfig.DEBUG的值默认是false，无法使用开发者支持（开发者菜单、即时预览等），所以我们要把BuildConfig.DEBUG改为true。</li>
</ol>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p><img src="/images/ReactNative/React_Native_to_Native/12.png" alt="图片" title="图片">   </p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>把Android Studio自动生成的文件夹androidTest和test删除，并修改项目的模块(app)的build.gradle文件：  </p>
<h4 id="修改前："><a href="#修改前：" class="headerlink" title="修改前："></a>修改前：</h4><p><img src="/images/ReactNative/React_Native_to_Native/13.png" alt="图片" title="图片">  </p>
<h4 id="修改后："><a href="#修改后：" class="headerlink" title="修改后："></a>修改后：</h4><p><img src="/images/ReactNative/React_Native_to_Native/14.png" alt="图片" title="图片">     </p>
<h3 id="其他问题可以参考React-Native-for-Android-Windows环境搭建"><a href="#其他问题可以参考React-Native-for-Android-Windows环境搭建" class="headerlink" title="其他问题可以参考React Native for Android Windows环境搭建"></a>其他问题可以参考<a href="http://cokernut.top/2016/11/23/Android/React%20Native%20for%20Android%20Windows%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">React Native for Android Windows环境搭建</a></h3><font size="5"><a href="https://github.com/cokernut/ReactNativeToNative" target="_blank" rel="external">源代码</a></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native嵌入Android原生项目中&lt;br&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://cokernut.top/categories/React-Native/"/>
    
    
      <category term="Android" scheme="http://cokernut.top/tags/Android/"/>
    
      <category term="React Native" scheme="http://cokernut.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native for Android Windows环境搭建</title>
    <link href="http://cokernut.top/2016/11/23/ReactNative/React%20Native%20for%20Android%20Windows%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://cokernut.top/2016/11/23/ReactNative/React Native for Android Windows环境搭建/</id>
    <published>2016-11-22T16:00:00.000Z</published>
    <updated>2016-12-09T09:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>React Native for Android Windows环境搭建<br><a id="more"></a></p>
<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>从<a href="http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html" target="_blank" rel="external">Java官网</a>下载JDK并安装</p>
<p>设置环境变量;JAVA_HOME环境变量设置为你jdk所在目录，将JDK的bin目录加入系统PATH环境变量</p>
<h2 id="安装Android-SDK"><a href="#安装Android-SDK" class="headerlink" title="安装Android SDK"></a>安装Android SDK</h2><p>安装Android SDK，把ANDROID_HOME环境变量设置为你sdk所在目录，将SDK的platform-tools和tools目录加入系统PATH环境变量<br>这里你可以安装Android Studio, Android Studio包含了运行和测试React Native应用所需的Android SDK和模拟器。React Native目前需要Android Studio2.0或更高版本，<br>Android Studio需要Java Development Kit [JDK] 1.8或更高版本。</p>
<h2 id="安装C-环境"><a href="#安装C-环境" class="headerlink" title="安装C++环境"></a>安装C++环境</h2><p>下载并安装Visual Studio。也可选择Windows SDK、cygwin或mingw等其他C++环境。编译node.js的C++模块时需要用到</p>
<h2 id="安装git客户端"><a href="#安装git客户端" class="headerlink" title="安装git客户端"></a>安装<a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a>客户端</h2><p>init那一步需要用到这个东西  </p>
<h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p>从官网下载并安装<a href="https://www.python.org/downloads/" target="_blank" rel="external">python</a> 2.7.x（3.x版本目前不支持）</p>
<h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><p>请到<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载Windows版本的Node.js<br>我选的是最新版，React Native的要求是4.1以上都可以支持，注意，目前已知Node 7.1版本在windows上无法正常工作，请注意避开这个版本！<br>建议设置npm镜像以加速后面的过程（或使用科学上网工具）</p>
<blockquote>
<p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a> –global<br>npm config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="external">https://npm.taobao.org/dist</a> –global  </p>
</blockquote>
<h2 id="安装react-native-cli（react-native命令行工具）"><a href="#安装react-native-cli（react-native命令行工具）" class="headerlink" title="安装react-native-cli（react-native命令行工具）"></a>安装react-native-cli（react-native命令行工具）</h2><p>Windows命令行运行：</p>
<blockquote>
<p>npm install -g react-native-cli   </p>
</blockquote>
<p>注意：有的教程命令是：npm install -g yarn react-native-cli就是多装了一个yarn模块，<br>Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载，它是在我们使用npm命令下载模块的时候<br>会间接调用yarn命令下载，但是国内因为访问不了Facebook(梯子另说)，所以用yarn下载的结果要么是下载不了，<br>要么是比npm还慢。所以你发现init项目的时候很慢或者是进度不知道动，那么你看一下命令行是不是因为有当你用npm的时候<br>下面有说明调用yarn了，还有个版本号。这种情况下我们应该把yarn进行删除，删除方法：默认是在命令行下转到C:\Users\UserName\AppData\Roaming\npm<br>目录下运行:</p>
<blockquote>
<p>npm uninstall yarn  </p>
</blockquote>
<p>这样就可以把yarn模块进行删除，我们使用npm命令时就不会调用yarn了。<br>React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。<br>（进度慢的同学可以尝试使用Vpn或者是其他加速方法-_-）  </p>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>进入你的工作目录，Windows命令行运行：</p>
<blockquote>
<p>react-native init Project  </p>
</blockquote>
<p>耐心等待。。。。。。此过程有点慢！</p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>进入项目目录（上面的Project目录）启动React Native Server</p>
<blockquote>
<p>react-native start  </p>
</blockquote>
<p>可以用浏览器访问<a href="http://localhost:8081/index.android.bundle?platform=android" target="_blank" rel="external">http://localhost:8081/index.android.bundle?platform=android</a>  看看是否可以看到打包后的脚本。第一次访问通常需要十几秒，并且在packager的命令行可以看到进度条</p>
<h2 id="运行模拟器"><a href="#运行模拟器" class="headerlink" title="运行模拟器"></a>运行模拟器</h2><p>启动Android模拟器或者是使用自己连接电脑  </p>
<h2 id="安卓运行"><a href="#安卓运行" class="headerlink" title="安卓运行"></a>安卓运行</h2><p>在项目目录下运行</p>
<blockquote>
<p>react-native run-android  </p>
</blockquote>
<p>首次运行需要等待数分钟并从网上下载gradle依赖</p>
<h3 id="前提条件：USB调试"><a href="#前提条件：USB调试" class="headerlink" title="前提条件：USB调试"></a>前提条件：USB调试</h3><p>你需要开启USB调试才能在你的设备上安装你的APP。首先，确定你已经打开设备的USB调试开关</p>
<p>确保你的设备已经成功连接。可以输入adb devices来查看:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ adb devices</div><div class="line">List of devices attached</div><div class="line">emulator-5554 offline   # Google模拟器</div><div class="line">14ed2fcc device         # 真实设备</div></pre></td></tr></table></figure></p>
<p>在右边那列看到device说明你的设备已经被正确连接了。  </p>
<font color="#ff6559">注意，你只应当连接仅仅一个设备，如果你连接了多个设备（包含模拟器在内），<br>后续的一些操作可能会失败。拔掉不需要的设备，或者关掉模拟器，确保adb devices的输出只有一个是连接状态。</font>

<p>现在你可以运行react-native run-android来在设备上安装并启动应用了。</p>
<p>注意：在真机上运行时可能会遇到白屏的情况，请找到并开启<font color="#ff6559">悬浮窗权限。</font></p>
<h2 id="从设备上访问开发服务器。"><a href="#从设备上访问开发服务器。" class="headerlink" title="从设备上访问开发服务器。"></a>从设备上访问开发服务器。</h2><p>在启用开发服务器的情况下，你可以快速的迭代修改应用，然后在设备上查看结果。按照下面描述的任意一种方法来使你的运行在电脑上的开发服务器可以从设备上访问到。</p>
<p>注意：现在很多安卓设备已经没有了硬件”Menu”按键，这是我们用来调出开发者菜单的。在这种情况下你可以通过摇晃设备来打开开发者菜单(重新加载、调试，等等……)  </p>
<h3 id="Android-5-0及以上-使用adb-reverse命令"><a href="#Android-5-0及以上-使用adb-reverse命令" class="headerlink" title="(Android 5.0及以上)使用adb reverse命令"></a>(Android 5.0及以上)使用adb reverse命令</h3><font color="#ff6559">注意，这个选项只能在5.0以上版本(API 21+)的安卓设备上使用。</font>

<p>首先把你的设备通过USB数据线连接到电脑上，并开启USB调试（设置–&gt;开发者选项–&gt;USB调试）。</p>
<blockquote>
<p>运行<font color="#c7254e">adb reverse tcp:8081 tcp:8081</font><br>不需要更多配置，你就可以使用Reload JS和其它的开发选项了。  </p>
</blockquote>
<h3 id="Android-5-0以下-通过Wi-Fi连接你的本地开发服务器"><a href="#Android-5-0以下-通过Wi-Fi连接你的本地开发服务器" class="headerlink" title="(Android 5.0以下)通过Wi-Fi连接你的本地开发服务器"></a>(Android 5.0以下)通过Wi-Fi连接你的本地开发服务器</h3><ol>
<li>首先确保你的电脑和手机设备在同一个Wi-Fi环境下。</li>
<li>在设备上运行你的React Native应用。和打开其它App一样操作。</li>
<li>你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。</li>
<li>摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单。</li>
<li>点击进入Dev Settings。</li>
<li>点击Debug server host for device。</li>
<li>输入你电脑的IP地址和端口号（譬如10.0.1.1:8081）。在Mac上，你可以在系统设置/网络里找查询你的IP地址。在Windows上，打开命令提示符并输入ipconfig来查询你的IP地址。在Linux上你可以在终端中输入ifconfig来查询你的IP地址。</li>
<li>回到开发者菜单然后选择Reload JS。  </li>
</ol>
<h2 id="异常-："><a href="#异常-：" class="headerlink" title="异常 ："></a>异常 ：</h2><p><img src="/images/ReactNative/React_Native_Windows_Environment/1.png" alt="异常" title="异常">  </p>
<p>异常 ReferenceError:Can’t find variable:_fbBatchedBridge或者Unable to download JS bundle解决方法<br>看到这个，使劲摇晃手机或者直接点击菜单按钮，在出来的菜单里选择“Dev Settings”，然后点击最下面<br>的“Debug server host &amp; port for device“，然后填入你电脑的ip:8081，你的手机和你的电脑<br>必须在同一个局域网内。设置完成以后再重启应用，你就可以看到React Native的欢迎界面了，<br>就是index.android.js页面的内容<br><img src="/images/ReactNative/React_Native_Windows_Environment/2.png" alt="效果" title="效果">  </p>
<h2 id="遇到的坑："><a href="#遇到的坑：" class="headerlink" title="遇到的坑："></a>遇到的坑：</h2><h3 id="小米MIUI系统可能会遇到下面的问题："><a href="#小米MIUI系统可能会遇到下面的问题：" class="headerlink" title="小米MIUI系统可能会遇到下面的问题："></a>小米MIUI系统可能会遇到下面的问题：</h3><p>react-native run-android的时候出现Failed to establish session问题：<br>解决方案：小米手机设置里——-开发者选项———启用MIUI优化 关闭<br><img src="/images/ReactNative/React_Native_Windows_Environment/3.png" alt="异常" title="异常"><br><img src="/images/ReactNative/React_Native_Windows_Environment/4.png" alt="异常" title="异常">  </p>
<h3 id="注意：以下是使用Genymotion时的情况，上面的解决方法无法解决"><a href="#注意：以下是使用Genymotion时的情况，上面的解决方法无法解决" class="headerlink" title="注意：以下是使用Genymotion时的情况，上面的解决方法无法解决"></a>注意：以下是使用Genymotion时的情况，上面的解决方法无法解决</h3><p>可以看到genymotion模拟器使用的网络连接方式是Host-Only方式，此情况下<br>Debug server host &amp; port for device中填入的应该是VirtualBox Host-Only Network<br>的IP:8081（192.168.56.1:8081）,之后再重启应用或者是返回一下再点击菜单选择Reload JS,<br>你就可以看到React Native的欢迎界面了<br><img src="/images/ReactNative/React_Native_Windows_Environment/5.png" alt="异常" title="异常"><br><img src="/images/ReactNative/React_Native_Windows_Environment/6.png" alt="异常" title="异常"><br><img src="/images/ReactNative/React_Native_Windows_Environment/10.png" alt="异常" title="异常"> </p>
<h3 id="错误Could-not-connect-to-development-server："><a href="#错误Could-not-connect-to-development-server：" class="headerlink" title="错误Could not connect to development server："></a>错误Could not connect to development server：</h3><p>如果确定IP地址设置正确了还提示：Could not connect to development server，那么你要确定你的React Native Server启动了，没启动的话启动React Native Server，在项目目录下运行：</p>
<blockquote>
<p>react-native start  </p>
</blockquote>
<p><img src="/images/ReactNative/React_Native_Windows_Environment/7.png" alt="异常" title="异常">   </p>
<h2 id="安卓调试"><a href="#安卓调试" class="headerlink" title="安卓调试"></a>安卓调试</h2><p>打开Chrome，访问 <a href="http://localhost:8081/debugger-ui" target="_blank" rel="external">http://localhost:8081/debugger-ui</a>  ，应当能看到一个页面。按F12打开开发者菜单选择Sources勾选Pause On Caught Exceptions（如图）</p>
<p>在模拟器或真机菜单中选择Debug JS，即可开始调试<br><img src="/images/ReactNative/React_Native_Windows_Environment/8.png" alt="效果" title="效果"><br><img src="/images/ReactNative/React_Native_Windows_Environment/9.png" alt="效果" title="效果">  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native for Android Windows环境搭建&lt;br&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://cokernut.top/categories/React-Native/"/>
    
    
      <category term="Android" scheme="http://cokernut.top/tags/Android/"/>
    
      <category term="React Native" scheme="http://cokernut.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Android辅助功能AccessibilityService的使用</title>
    <link href="http://cokernut.top/2016/11/17/Android/Android%E8%BE%85%E5%8A%A9%E5%8A%9F%E8%83%BDAccessibilityService%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://cokernut.top/2016/11/17/Android/Android辅助功能AccessibilityService的使用/</id>
    <published>2016-11-16T16:00:00.000Z</published>
    <updated>2016-11-28T09:44:02.516Z</updated>
    
    <content type="html"><![CDATA[<p>Android辅助功能AccessibilityService的使用<br><a id="more"></a></p>
<h2 id="AccessibilityService官方简介："><a href="#AccessibilityService官方简介：" class="headerlink" title="AccessibilityService官方简介："></a>AccessibilityService官方简介：</h2><blockquote>
<p>The classes in this package are used for development of accessibility service that provide alternative or augmented feedback to the user.<br>使用这个类可以开发用于给用户提供替换或者是增强反馈的辅助功能服务。  </p>
<hr>
<p>An AccessibilityService runs in the background and receives callbacks by the system when AccessibilityEvents are fired. Such events denote some state transition in the user interface, for example, the focus has changed, a button has been clicked, etc. Such a service can optionally request the capability for querying the content of the active window. Development of an accessibility service requires extends this class and implements its abstract methods.<br>一个AccessibilityService在后台运行并接收系统AccessibilityEvents事件的回调，当用户界面的状态发生改变时会触发AccessibilityEvents事件，例如焦点的变化，点击一个按钮。<br>这个服务可以获取到活动窗口的内容，开发一个辅助功能服务需要继承AccessibilityService并实现其中的抽象方法。  </p>
<hr>
<p>An AccessibilityServiceInfo describes an AccessibilityServiceInfo. The system notifies an AccessibilityService for AccessibilityEvents according to the information encapsulated in this class.<br>一个AccessibilityService有一个用于描述AccessibilityService的AccessibilityServiceInfo对象，系统会通知AccessibilityService根据AccessibilityServiceInfo把信息装进AccessibilityEvents中。</p>
</blockquote>
<h2 id="继承AccessibilityService并实现其中的抽象方法。"><a href="#继承AccessibilityService并实现其中的抽象方法。" class="headerlink" title="继承AccessibilityService并实现其中的抽象方法。"></a>继承AccessibilityService并实现其中的抽象方法。</h2><blockquote>
<p>下面是我Service类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">AccessibilityService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code = INSTALL;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INSTALL = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEXT = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FINISH = <span class="number">2</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 页面变化回调事件</div><div class="line">     * <span class="doctag">@param</span> event event.getEventType() 当前事件的类型;</div><div class="line">     *              event.getClassName() 当前类的名称;</div><div class="line">     *              event.getSource() 当前页面中的节点信息；</div><div class="line">     *              event.getPackageName() 事件源所在的包名</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAccessibilityEvent</span><span class="params">(AccessibilityEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// 事件页面节点信息不为空</span></div><div class="line">        <span class="keyword">if</span> (event.getSource() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 判断事件页面所在的包名，这里是自己</span></div><div class="line">            <span class="keyword">if</span> (event.getPackageName().equals(getApplicationContext().getPackageName())) &#123;</div><div class="line">                <span class="keyword">switch</span> (code) &#123;</div><div class="line">                    <span class="keyword">case</span> INSTALL:</div><div class="line">                        click(event, <span class="string">"安装"</span>, TextView.class.getName());</div><div class="line">                        Log.d(<span class="string">"test======="</span>, <span class="string">"安装"</span>);</div><div class="line">                        code = NEXT;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> NEXT:</div><div class="line">                        click(event, <span class="string">"下一步"</span>, Button.class.getName());</div><div class="line">                        Log.d(<span class="string">"test======="</span>, <span class="string">"下一步"</span>);</div><div class="line">                        code = FINISH;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> FINISH:</div><div class="line">                        click(event, <span class="string">"完成"</span>, TextView.class.getName());</div><div class="line">                        Log.d(<span class="string">"test======="</span>, <span class="string">"完成"</span>);</div><div class="line">                        code = INSTALL;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Log.d(<span class="string">"test====="</span>, <span class="string">"the source = null"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 模拟点击</div><div class="line">     * <span class="doctag">@param</span> event 事件</div><div class="line">     * <span class="doctag">@param</span> text 按钮文字</div><div class="line">     * <span class="doctag">@param</span> widgetType 按钮类型，如android.widget.Button，android.widget.TextView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(AccessibilityEvent event, String text, String widgetType)</span> </span>&#123;</div><div class="line">        <span class="comment">// 事件页面节点信息不为空</span></div><div class="line">        <span class="keyword">if</span> (event.getSource() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 根据Text搜索所有符合条件的节点, 模糊搜索方式; 还可以通过ID来精确搜索findAccessibilityNodeInfosByViewId</span></div><div class="line">            List&lt;AccessibilityNodeInfo&gt; stop_nodes = event.getSource().findAccessibilityNodeInfosByText(text);</div><div class="line">            <span class="comment">// 遍历节点</span></div><div class="line">            <span class="keyword">if</span> (stop_nodes != <span class="keyword">null</span> &amp;&amp; !stop_nodes.isEmpty()) &#123;</div><div class="line">                AccessibilityNodeInfo node;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stop_nodes.size(); i++) &#123;</div><div class="line">                    node = stop_nodes.get(i);</div><div class="line">                    <span class="comment">// 判断按钮类型</span></div><div class="line">                    <span class="keyword">if</span> (node.getClassName().equals(widgetType)) &#123;</div><div class="line">                        <span class="comment">// 可用则模拟点击</span></div><div class="line">                        <span class="keyword">if</span> (node.isEnabled()) &#123;</div><div class="line">                            node.performAction(AccessibilityNodeInfo.ACTION_CLICK);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 中断AccessibilityService的反馈时调用</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"test====="</span>, <span class="string">"Interrupt"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>AccessibilityService里几个重要的方法：  </p>
</blockquote>
<ul>
<li>onServiceConnected() - 可选。系统会在成功连接上你的服务的时候调用这个方法，在这个方法里你可以做一下初始化工作，例如设备的声音震动管理，也可以调用setServiceInfo()进行配置AccessibilityServiceInfo。</li>
<li>onAccessibilityEvent() - 必须。通过这个函数可以接收系统发送来的AccessibilityEvent，接收来的AccessibilityEvent是经过过滤的，过滤是在配置工作时设置的。</li>
<li>onInterrupt() - 必须。这个在系统想要中断AccessibilityService返给的响应时会调用。在整个生命周期里会被调用多次。</li>
<li>onUnbind() - 可选。在系统将要关闭这个AccessibilityService会被调用。在这个方法中进行一些释放资源的工作。</li>
</ul>
<blockquote>
<p>之后在AndroidManifest文件里注册并添加相应的权限：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".MyService"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"辅助功能"</span></div><div class="line">    <span class="attr">android:permission</span>=<span class="string">"android.permission.BIND_ACCESSIBILITY_SERVICE"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.accessibilityservice.AccessibilityService"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="配置AccessibilityService"><a href="#配置AccessibilityService" class="headerlink" title="配置AccessibilityService"></a>配置AccessibilityService</h2><p>1.可以在onServiceConnected()方法里进行，建立一个AccessibilityServiceInfo对象，通过这个对象设置监听系统事件类型，服务的反馈类型（震动，语音，声音），事件时间间隔，你想要监听的App的包名。最后调用setServiceInfo()进行设置，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onServiceConnected();</div><div class="line">       AccessibilityServiceInfo info = <span class="keyword">new</span> AccessibilityServiceInfo();</div><div class="line">       info.eventTypes = AccessibilityEvent.TYPES_ALL_MASK;</div><div class="line">       info.packageNames = PACKAGE_NAMES; </div><div class="line">       ...配置</div><div class="line">       setServiceInfo(info);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>2.从Android4.0开始，开发者可以通过在AndroidManifest里添加<meta-data>标签配置AccessibilityService，在标签里指出配置文件的位置，如：  </meta-data></p>
<blockquote>
<p>res/xml/accessibility_service_info.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">accessibility-service</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:description</span>=<span class="string">"@string/accessibility_service_description"</span></div><div class="line">    <span class="attr">android:accessibilityEventTypes</span>=<span class="string">"typeAllMask"</span></div><div class="line">    <span class="attr">android:accessibilityFeedbackType</span>=<span class="string">"feedbackGeneric"</span></div><div class="line">    <span class="attr">android:notificationTimeout</span>=<span class="string">"100"</span></div><div class="line">    <span class="attr">android:accessibilityFlags</span>=<span class="string">"flagDefault"</span></div><div class="line">    <span class="attr">android:canRetrieveWindowContent</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:packageNames</span>=<span class="string">"top.cokernut.sample"</span></div><div class="line">    <span class="attr">android:settingsActivity</span>=<span class="string">"com.example.android.accessibility.ServiceSettingsActivity"</span>  /&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">         android:description="@string/accessibility_service_description" 描述</div><div class="line">         android:accessibilityEventTypes="typeAllMask"  事件类型</div><div class="line">         android:accessibilityFeedbackType="feedbackGeneric" 反馈类型，声音、震动等</div><div class="line">         android:canRetrieveWindowContent="true", 允许获取手机页面中的信息</div><div class="line">         android:packageNames="top.cokernut.sample" 要监听的包名，过滤作用</div><div class="line">         android:settingsActivity="packname.android.accessibility.ServiceSettingsActivity" packname写自己App的包名</div><div class="line">    --&gt;</div></pre></td></tr></table></figure></p>
<p>事件类型（EventType）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#TYPES_ALL_MASK：所有类型</div><div class="line">#TYPE_VIEW_CLICKED ：单击</div><div class="line">#TYPE_VIEW_LONG_CLICKED ：长按</div><div class="line">#TYPE_VIEW_SELECTED ：选中</div><div class="line">#TYPE_VIEW_FOCUSED ：获取焦点</div><div class="line">#TYPE_VIEW_TEXT_CHANGED ：文字改变</div><div class="line">#TYPE_WINDOW_STATE_CHANGED ：窗口状态改变</div><div class="line">#TYPE_NOTIFICATION_STATE_CHANGED ：通知状态改变</div><div class="line">#TYPE_VIEW_HOVER_ENTER</div><div class="line">#TYPE_VIEW_HOVER_EXIT</div><div class="line">#TYPE_TOUCH_EXPLORATION_GESTURE_START</div><div class="line">#TYPE_TOUCH_EXPLORATION_GESTURE_END</div><div class="line">#TYPE_WINDOW_CONTENT_CHANGED</div><div class="line">#TYPE_VIEW_SCROLLED</div><div class="line">#TYPE_VIEW_TEXT_SELECTION_CHANGED</div><div class="line">#TYPE_ANNOUNCEMENT</div><div class="line">#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY</div><div class="line">#TYPE_GESTURE_DETECTION_START</div><div class="line">#TYPE_GESTURE_DETECTION_END</div><div class="line">#TYPE_TOUCH_INTERACTION_START</div><div class="line">#TYPE_TOUCH_INTERACTION_END</div><div class="line">#TYPE_WINDOWS_CHANGED</div></pre></td></tr></table></figure></p>
<p>然后在AndroidManifest文件里把配置文件配置到AccessibilityService上：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".MyService"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"辅助功能"</span></div><div class="line">    <span class="attr">android:permission</span>=<span class="string">"android.permission.BIND_ACCESSIBILITY_SERVICE"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.accessibilityservice.AccessibilityService"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"android.accessibilityservice"</span></div><div class="line">        <span class="attr">android:resource</span>=<span class="string">"@xml/accessibility_service_info"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>到此一个AccessibilityService的开发就完成了。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote>
<p>MainActivity：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView mInstallTV;</div><div class="line">    <span class="keyword">private</span> TextView mFinishTV;</div><div class="line">    <span class="keyword">private</span> TextView mStartTV;</div><div class="line">    <span class="keyword">private</span> TextView mStopTV;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mInstallBT;</div><div class="line">    <span class="keyword">private</span> Button mNextBT;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mInstallTV      = (TextView) findViewById(R.id.tv_install);</div><div class="line">        mStartTV        = (TextView) findViewById(R.id.tv_start);</div><div class="line">        mStopTV         = (TextView) findViewById(R.id.tv_stop);</div><div class="line">        mFinishTV       = (TextView) findViewById(R.id.tv_finish);</div><div class="line">        mInstallBT      = (Button) findViewById(R.id.bt_install);</div><div class="line">        mNextBT         = (Button) findViewById(R.id.bt_next);</div><div class="line">        mInstallTV      .setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mFinishTV       .setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mInstallBT      .setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mNextBT         .setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mStartTV        .setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mStopTV         .setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.tv_start:</div><div class="line">                <span class="keyword">if</span> (serviceIsRunning()) &#123;</div><div class="line">                    showToast(<span class="string">"服务已经在运行！"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    startAccessibilityService();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.tv_stop:</div><div class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.tv_install:</div><div class="line">                showToast(((TextView)v).getText().toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.tv_finish:</div><div class="line">                showToast(((TextView)v).getText().toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.bt_install:</div><div class="line">                showToast(((Button)v).getText().toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.bt_next:</div><div class="line">                showToast(((Button)v).getText().toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                showToast(<span class="string">"未知按钮"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(<span class="keyword">final</span> String text)</span> </span>&#123;</div><div class="line">        <span class="comment">//AccessibilityService触发事件是异步的，要回到UI线程改变UI</span></div><div class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击了"</span> + text, Toast.LENGTH_LONG).show();</div><div class="line">                Log.d(<span class="string">"text====="</span>, <span class="string">"====="</span> + text);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断自己的应用的AccessibilityService是否在运行</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">serviceIsRunning</span><span class="params">()</span> </span>&#123;</div><div class="line">        ActivityManager am = (ActivityManager) getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">        List&lt;ActivityManager.RunningServiceInfo&gt; services = am.getRunningServices(Short.MAX_VALUE);</div><div class="line">        <span class="keyword">for</span> (ActivityManager.RunningServiceInfo info : services) &#123;</div><div class="line">            <span class="keyword">if</span> (info.service.getClassName().equals(getPackageName() + <span class="string">".MyService"</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 前往设置界面开启服务</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAccessibilityService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</div><div class="line">                .setTitle(<span class="string">"开启辅助功能"</span>)</div><div class="line">                .setIcon(R.mipmap.ic_launcher)</div><div class="line">                .setMessage(<span class="string">"使用此项功能需要您开启辅助功能"</span>)</div><div class="line">                .setPositiveButton(<span class="string">"立即开启"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                                <span class="comment">// 隐式调用系统设置界面</span></div><div class="line">                                Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);</div><div class="line">                                startActivity(intent);</div><div class="line">                            &#125;</div><div class="line">                        &#125;).create().show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>activity_main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"top.cokernut.sample.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_install"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#00AA66"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"安装TV"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/bt_install"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"安装Btn"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/bt_next"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"下一步Btn"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_finish"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#00AA66"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"完成"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_start"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#0088FF"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"开始"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_stop"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#0088FF"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"停止"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>SecondActivity就一个TextView显示信息，就不贴代码了。</p>
</blockquote>
<font size="5"><a href="https://github.com/cokernut/AccessibilityServiceSample" target="_blank" rel="external">源代码</a></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android辅助功能AccessibilityService的使用&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://cokernut.top/categories/Android/"/>
    
    
      <category term="Android" scheme="http://cokernut.top/tags/Android/"/>
    
      <category term="AccessibilityService" scheme="http://cokernut.top/tags/AccessibilityService/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView的介绍与基本用法</title>
    <link href="http://cokernut.top/2016/10/25/Android/RecyclerView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://cokernut.top/2016/10/25/Android/RecyclerView基本用法/</id>
    <published>2016-10-24T16:00:00.000Z</published>
    <updated>2016-11-28T10:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>RecyclerView的介绍与基本用法<br><a id="more"></a></p>
<p>RecyclerView是Google在发布Android L时在support-v7包中添加的一个新组件，旨在用来替代ListView。RecyclerView的灵活性要比ListView更好。<br>RecyclerView与ListView原理是类似的：都是仅仅维护少量的View并且可以展示大量的数据集。<br>RecyclerView用以下两种方式简化了数据的展示和处理:  </p>
<ul>
<li>使用LayoutManager来确定每一个item的排列方式。</li>
<li>为增加和删除项目提供默认的动画效果。</li>
</ul>
<p>你也可以定义你自己的LayoutManager和添加删除动画，RecyclerView项目结构如下：   </p>
<ul>
<li>Adapter：使用RecyclerView之前，你需要一个继承自RecyclerView.Adapter的适配器，作用是将数据与每一个item的界面进行绑定。</li>
<li>LayoutManager：用来确定每一个item如何进行排列摆放，何时展示和隐藏。回收或重用一个View的时候，LayoutManager会向适配器请求新的数据来替换旧的数据，这种机制避免了创建过多的View和频繁的调用findViewById方法（与ListView原理类似）。<br>  目前SDK中提供了三种自带的LayoutManager:    <ul>
<li>LinearLayoutManager：线性布局，可以实现横向或者纵向的滑动列表（类型ListVIew）</li>
<li>GridLayoutManager：表格布局，可以实现类似GridView布局</li>
<li>StaggeredGridLayoutManager：瀑布流布局，可以实现瀑布流效果</li>
</ul>
</li>
</ul>
<p>当然除了上面的三种内部布局之外，我们还可以继承RecyclerView.LayoutManager来实现一个自定义的LayoutManager。<br>Animations(动画)效果：RecyclerView对于Item的添加和删除是默认开启动画的。我们当然也可以通过RecyclerView.ItemAnimator类定制动画，然后通过RecyclerView.setItemAnimator()方法来进行使用。<br>RecyclerView相关的类：  </p>
<table>
<thead>
<tr>
<th>类</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>RecyclerView.Adapter</td>
<td>托管数据集合，为每个Item创建视图</td>
</tr>
<tr>
<td>RecyclerView.ViewHolder</td>
<td>承载Item视图的子视图</td>
</tr>
<tr>
<td>RecyclerView.LayoutManager</td>
<td>负责Item视图的布局</td>
</tr>
<tr>
<td>RecyclerView.ItemDecoration</td>
<td>为每个Item视图添加子视图，在Demo中被用来绘制Divider</td>
</tr>
<tr>
<td>RecyclerView.ItemAnimator</td>
<td>负责添加、删除数据时的动画效果</td>
</tr>
</tbody>
</table>
<h2 id="RecyclerView的基本用法"><a href="#RecyclerView的基本用法" class="headerlink" title="RecyclerView的基本用法"></a>RecyclerView的基本用法</h2><p>1、因为RecyclerView是support-v7中的控件，要使用的话我们首先要在build.gradle文件中添加RecyclerView的依赖，添加后我们就能在我们的项目中使用RecyclerView控件了：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    ....</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:23.2.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、在xml布局文件中使用RecyclerView：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/rv_view"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:scrollbars</span>=<span class="string">"none"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>3、对RecyclerView进行获取并设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> MyAdapter mAdapter;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; mDatas = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.rv_view);</div><div class="line">        <span class="comment">//设置LayoutManager类似ListView效果</span></div><div class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getActivity()));</div><div class="line">        <span class="comment">//类似横向ListView效果，不反转</span></div><div class="line">        <span class="comment">//mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false));</span></div><div class="line">        <span class="comment">//类似GridView效果，2列</span></div><div class="line">        <span class="comment">//mRecyclerView.setLayoutManager(new GridLayoutManager(getActivity(), 2));</span></div><div class="line">        <span class="comment">//竖向瀑布流效果，2列</span></div><div class="line">        <span class="comment">//mRecyclerView.setLayoutManager(new StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL));</span></div><div class="line">        mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator()); <span class="comment">//设置默认动画</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">            mDatas.add(<span class="string">"卡片："</span> + i);</div><div class="line">        &#125;</div><div class="line">        mAdapter = <span class="keyword">new</span> MyAdapter(getActivity(), mDatas);</div><div class="line">        mRecyclerView.setAdapter(mAdapter);</div><div class="line">        mAdapter.setOnItemClickLitener(<span class="keyword">new</span> MyAdapter.OnItemClickLitener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                Toast.makeText(getActivity(), <span class="string">"卡片"</span> + position, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Adapter:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LayoutInflater mInflater;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; mDatas = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ZERO = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> OnItemClickLitener mOnItemClickLitener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(Context context, ArrayList&lt;String&gt; datas)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mDatas = datas;</div><div class="line">        <span class="keyword">this</span>.mInflater = LayoutInflater.from(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加数据</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String model, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        mDatas.add(position, model);</div><div class="line">        notifyItemInserted(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//更新数据</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(ArrayList&lt;String&gt; data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mDatas= data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除数据</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(String model)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> position = mDatas.indexOf(model);</div><div class="line">        mDatas.remove(position);</div><div class="line">        notifyItemRemoved(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除数据</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        mDatas.remove(position);</div><div class="line">        notifyItemRemoved(position);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mOnItemClickLitener != <span class="keyword">null</span>) &#123;</div><div class="line">            mOnItemClickLitener.onItemClick(view, (<span class="keyword">int</span>)view.getTag());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickLitener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickLitener</span><span class="params">(OnItemClickLitener mOnItemClickLitener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mOnItemClickLitener = mOnItemClickLitener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (viewType == ONE) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyViewHolder(mInflater.inflate(R.layout.item_0, parent, <span class="keyword">false</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyViewHolderTwo(mInflater.inflate(R.layout.item_1, parent, <span class="keyword">false</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> RecyclerView.ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> MyViewHolder) &#123;</div><div class="line">            MyViewHolder holder1 = (MyViewHolder) holder;</div><div class="line">            holder1.txt.setText(mDatas.get(position));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            MyViewHolderTwo holder1 = (MyViewHolderTwo) holder;</div><div class="line">            holder1.txt.setText(mDatas.get(position));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mOnItemClickLitener != <span class="keyword">null</span>) &#123;</div><div class="line">            holder.itemView.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">            holder.itemView.setTag(position);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (position % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> ZERO;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> ONE;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDatas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        TextView txt;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            txt = (TextView) itemView.findViewById(R.id.tv_txt);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolderTwo</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        TextView txt;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolderTwo</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            txt = (TextView) itemView.findViewById(R.id.tv_txt);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为RecyclerView默认没有实现Item的点击事件，所以Item的点击事件需要我们自己来设置，在上面的代码中我们也可以看出来：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> OnItemClickLitener mOnItemClickLitener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickLitener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickLitener</span><span class="params">(OnItemClickLitener mOnItemClickLitener)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mOnItemClickLitener = mOnItemClickLitener;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mOnItemClickLitener != <span class="keyword">null</span>) &#123;</div><div class="line">        mOnItemClickLitener.onItemClick(view, (<span class="keyword">int</span>)view.getTag());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> RecyclerView.ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> MyViewHolder) &#123;</div><div class="line">        MyViewHolder holder1 = (MyViewHolder) holder;</div><div class="line">        holder1.txt.setText(mDatas.get(position));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        MyViewHolderTwo holder1 = (MyViewHolderTwo) holder;</div><div class="line">        holder1.txt.setText(mDatas.get(position));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mOnItemClickLitener != <span class="keyword">null</span>) &#123;</div><div class="line">        holder.itemView.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        holder.itemView.setTag(position);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mAdapter.setOnItemClickLitener(<span class="keyword">new</span> MyAdapter.OnItemClickLitener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Toast.makeText(getActivity(), <span class="string">"卡片"</span> + position, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注意：<br>在ListView当中，修改数据后可以用Adapter的notifyDataSetChanged()更新界面。而在RecyclerView中还有一些别的方法可以更新数据和界面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加数据</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String model, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    mDatas.add(position, model);</div><div class="line">    notifyItemInserted(position);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//添加数据集</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(ArrayList&lt;String&gt; data)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mDatas= data;</div><div class="line">    notifyDataSetChanged();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//删除数据</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(String model)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> position = mDatas.indexOf(model);</div><div class="line">    mDatas.remove(position);</div><div class="line">    notifyItemRemoved(position);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//删除数据</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    mDatas.remove(position);</div><div class="line">    notifyItemRemoved(position);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上就是RecyclerView的基本用法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RecyclerView的介绍与基本用法&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://cokernut.top/categories/Android/"/>
    
    
      <category term="Android" scheme="http://cokernut.top/tags/Android/"/>
    
      <category term="Recyclerview" scheme="http://cokernut.top/tags/Recyclerview/"/>
    
  </entry>
  
  <entry>
    <title>Android WebView实现原生与JavaScript的交互</title>
    <link href="http://cokernut.top/2016/10/12/Android/Android%20WebView%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%94%9F%E4%B8%8EJavaScript%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
    <id>http://cokernut.top/2016/10/12/Android/Android WebView实现原生与JavaScript的交互/</id>
    <published>2016-10-11T16:00:00.000Z</published>
    <updated>2016-11-28T10:06:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android WebView实现原生与JavaScript的交互<br><a id="more"></a></p>
<p>在现在的Android开发中，为了追求开发的效率以及移植的便利性，越来越多的开发者会在App中使用WebView<br>作为部分业务内容展示与交互的主要载体。那么在这种Hybrid App中，难免就会遇到网页与Java<br>原生的交互问题，比如说调用Java方法去做那部分网页不能完成的功能或者是通过Java原生代码<br>来调用网页当中实现的一些功能，其中一种解决方案就是利用Java与网页中的JavaScript进行交互。 </p>
<p>实现思路是:  </p>
<ul>
<li>通过WebView注入带有Java方法的JavaScript对象，然后网页当中利用JavaScript对注入的方法进行调用这样就实现了网页调用原生功能</li>
<li>通过WebView注入JavaScript的方式来实现原生调用网页中的功能</li>
</ul>
<h2 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h2><p>1、 自定义WebView  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebView</span> <span class="keyword">extends</span> <span class="title">WebView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> WebViewInterface mWebViewInterface;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyWebView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWebViewInterface</span><span class="params">(WebViewInterface baseWebViewInterface)</span> </span>&#123;</div><div class="line">        mWebViewInterface = baseWebViewInterface;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//回调方法接口</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebViewInterface</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String msg)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">getTitle</span><span class="params">(String title)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        WebSettings ws = getSettings();</div><div class="line">        setLayoutParams(<span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));</div><div class="line">        setHorizontalScrollBarEnabled(<span class="keyword">false</span>);</div><div class="line">        setVerticalScrollBarEnabled(<span class="keyword">false</span>);</div><div class="line">        ws.setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">        ws.setDomStorageEnabled(<span class="keyword">true</span>);</div><div class="line">        ws.setSupportZoom(<span class="keyword">true</span>);</div><div class="line">        ws.setBuiltInZoomControls(<span class="keyword">true</span>);</div><div class="line">        ws.setBuiltInZoomControls(<span class="keyword">false</span>);</div><div class="line">        ws.setJavaScriptCanOpenWindowsAutomatically(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">//注入带有Java方法的JS对象，名字可以自定义（js_obj）</span></div><div class="line">        addJavascriptInterface(<span class="keyword">new</span> InJavaScriptObj(), <span class="string">"js_obj"</span>);</div><div class="line">        setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</div><div class="line">        setWebChromeClient(<span class="keyword">new</span> MyWebChromeClient());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InJavaScriptObj</span> </span>&#123;</div><div class="line">        <span class="comment">//android 4.2 之后版本提供给js调用的函数必须带有注释语句@JavascriptInterface</span></div><div class="line">        <span class="meta">@JavascriptInterface</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">            mWebViewInterface.showToast(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">            <span class="comment">//加载网页url，此处可以根据url进行相应的处理</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.shouldOverrideUrlLoading(view, url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">            <span class="comment">//实现自己的逻辑</span></div><div class="line">            <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onPageStarted(view, url, favicon);</div><div class="line">            <span class="comment">//实现自己的逻辑</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class="line">            <span class="comment">//错误处理</span></div><div class="line">            <span class="keyword">super</span>.onReceivedError(view, request, error);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedHttpError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceResponse errorResponse)</span> </span>&#123;</div><div class="line">            <span class="comment">//http错误处理</span></div><div class="line">            <span class="keyword">super</span>.onReceivedHttpError(view, request, errorResponse);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebChromeClient</span> <span class="keyword">extends</span> <span class="title">WebChromeClient</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onReceivedTitle(view, title);</div><div class="line">            <span class="comment">//这个方法是收到网页的title的时候会调用的，这里我们可以拿到网页的title显示处理</span></div><div class="line">            mWebViewInterface.getTitle(title);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message, <span class="keyword">final</span> JsResult result)</span> </span>&#123;</div><div class="line">            <span class="comment">// 在这里你可以拦截网页的Alert来实现自己的逻辑，return true停止事件的继续传播，也可以使用默认实现</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onJsAlert(view, url, message, result);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsConfirm</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class="line">            <span class="comment">// 在这里你可以实现拦截网页的Confirm来实现自己的逻辑，return true停止事件的继续传播，也可以使用默认实现</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onJsConfirm(view, url, message, result);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onProgressChanged(view, newProgress);</div><div class="line">            <span class="comment">//在这里你可以进度的变化实现自己的逻辑</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsPrompt</span><span class="params">(WebView view, String url, String message, String defaultValue, JsPromptResult result)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onJsPrompt(view, url, message, defaultValue, result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、使用自定义WebView来实现功能</p>
<blockquote>
<p>布局文件：  </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rl_top"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#7DD13F"</span>  </div><div class="line">        <span class="attr">android:minHeight</span>=<span class="string">"?attr/actionBarSize"</span>&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span>  </span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/iv_back"</span>  </div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span>  </div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span>  </div><div class="line">            <span class="attr">android:paddingBottom</span>=<span class="string">"12dp"</span>  </div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"12dp"</span>  </div><div class="line">            <span class="attr">android:paddingTop</span>=<span class="string">"12dp"</span>  </div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@mipmap/icon_back"</span> /&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_title"</span>  </div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span>  </div><div class="line">            <span class="attr">android:ellipsize</span>=<span class="string">"end"</span>  </div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span>  </div><div class="line">            <span class="attr">android:maxEms</span>=<span class="string">"8"</span>  </div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#AF0000"</span>  </div><div class="line">            <span class="attr">android:singleLine</span>=<span class="string">"true"</span>  </div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"20sp"</span> /&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_menu"</span>  </div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span>  </div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span>  </div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center_vertical|right"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"网页弹窗"</span>  </div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>/&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/ll_webview"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/rl_top"</span>  </div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>WebViewActivity:  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">MyWebView</span>.<span class="title">WebViewInterface</span>, <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearLayout    mWebViewLl;</div><div class="line">    <span class="keyword">private</span> MyWebView       mWebView;</div><div class="line">    <span class="keyword">private</span> ImageView       mBackIv;</div><div class="line">    <span class="keyword">private</span> TextView        mTitleTv;</div><div class="line">    <span class="keyword">private</span> TextView        mMenuTv;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String          url;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SET_TITLE = <span class="number">0x101</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (msg.what == SET_TITLE) &#123;</div><div class="line">                setMyTitle((String) msg.obj);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_webview);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        url = getIntent().getStringExtra(<span class="string">"url"</span>);</div><div class="line">        mMenuTv     = (TextView) findViewById(R.id.tv_menu);</div><div class="line">        mBackIv     = (ImageView) findViewById(R.id.iv_back);</div><div class="line">        mWebViewLl  = (LinearLayout) findViewById(R.id.ll_webview);</div><div class="line">        mTitleTv    = (TextView) findViewById(R.id.tv_title);</div><div class="line">        mMenuTv.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mBackIv.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mWebView    = <span class="keyword">new</span> MyWebView(<span class="keyword">this</span>);</div><div class="line">        mWebViewLl.addView(mWebView);</div><div class="line">        mWebView.setWebViewInterface(<span class="keyword">this</span>);</div><div class="line">        mWebView.loadUrl(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//回调方法的实现</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, msg, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//回调方法的实现</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        Message message = <span class="keyword">new</span> Message();</div><div class="line">        message.what = SET_TITLE;</div><div class="line">        message.obj = title;</div><div class="line">        mHandler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setMyTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        mTitleTv.setText(title);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        back();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">back</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mWebView.canGoBack()) &#123;</div><div class="line">            mWebView.goBack();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.finish();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.iv_back:</div><div class="line">                back();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.tv_menu:</div><div class="line">                <span class="comment">//注入JS代码,Java调用JS</span></div><div class="line">                mWebView.loadUrl(<span class="string">"javascript:alert('网页弹窗alert');"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>网页代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        a&#123;</div><div class="line">            color:green;</div><div class="line">            font-weight:900;</div><div class="line">            font-size:80px;</div><div class="line">            height:400;</div><div class="line">            width:500;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        button&#123;</div><div class="line">            color:green;</div><div class="line">            font-size:50px;</div><div class="line">            height:300;</div><div class="line">            width:400;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        //JS调用Java方法，js_obj为网页中带有Java方法的对象，可以自定义但是要和注入的名字一样</div><div class="line">        function myFunction() &#123;</div><div class="line">            js_obj.showToast("显示Toast");</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"file:///android_asset/test_1.html"</span>&gt;</span> 链 接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"myFunction()"</span> &gt;</span>显示Toast<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>效果图:<br><img src="/images/Android/Webview_native_javascript_interaction/1.png" alt="效果图" title="效果图">  </p>
<font size="5"><a href="https://github.com/cokernut/CustomWebView" target="_blank" rel="external">源代码</a></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android WebView实现原生与JavaScript的交互&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://cokernut.top/categories/Android/"/>
    
    
      <category term="Android" scheme="http://cokernut.top/tags/Android/"/>
    
      <category term="WebView" scheme="http://cokernut.top/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>Python3学习笔记--基础知识</title>
    <link href="http://cokernut.top/2016/10/04/Python/Python3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://cokernut.top/2016/10/04/Python/Python3学习笔记--基础知识/</id>
    <published>2016-10-03T16:00:00.000Z</published>
    <updated>2016-11-28T09:51:51.896Z</updated>
    
    <content type="html"><![CDATA[<p>Python3学习笔记–基础知识<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div></pre></td><td class="code"><pre><div class="line"><span class="string">''' </span></div><div class="line">Python3 基本数据类型 </div><div class="line">Numbers（数字） </div><div class="line">String（字符串） </div><div class="line">List（列表） </div><div class="line">Tuple（元组） </div><div class="line">Sets（集合） </div><div class="line">Dictionaries（字典） </div><div class="line">空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。 </div><div class="line">布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写） </div><div class="line">'''  </div><div class="line">  </div><div class="line"><span class="string">""" </span></div><div class="line">Numbers（数字） </div><div class="line">Python 3支持int、float、bool、complex（复数）。 </div><div class="line">数值类型的赋值和计算都是很直观的，就像大多数语言一样。内置的type()函数可以用来查询变量所指的对象类型。 </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c, d = 20, 5.5, True, 4+3j </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(a), type(b), type(c), type(d)) </div><div class="line">&lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'bool'&gt; &lt;class 'complex'&gt; </div><div class="line">数值运算： </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>5 + 4  # 加法 </div><div class="line">9 </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>4.3 - 2 # 减法 </div><div class="line">2.3 </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>3 * 7  # 乘法 </div><div class="line">21 </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>2 / 4  # 除法，得到一个浮点数 </div><div class="line">0.5 </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>2 // 4 # 除法，得到一个整数 </div><div class="line">0 </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>17 % 3 # 取余 </div><div class="line">2 </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>2 ** 5 # 乘方 </div><div class="line">32 </div><div class="line">注意： </div><div class="line">1、Python可以同时为多个变量赋值，如a, b = 1, 2。 </div><div class="line">2、一个变量可以通过赋值指向不同类型的对象。 </div><div class="line">3、数值的除法（/）总是返回一个浮点数，要获取整数使用//操作符。 </div><div class="line">4、在混合计算时，Python会把整型转换成为浮点数。 </div><div class="line"> </div><div class="line">String（字符串） </div><div class="line">Python中的字符串str用单引号(' ')或双引号(" ")括起来，同时使用反斜杠(\)转义特殊字符。 </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = 'Yes,he doesn\'t' </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s, type(s), len(s)) </div><div class="line">Yes,he doesn't &lt;class 'str'&gt; 14 </div><div class="line">如果你不想让反斜杠发生转义，可以在字符串前面添加一个r，表示原始字符串： </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print('C:\some\name') </div><div class="line">C:\some </div><div class="line">ame </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(r'C:\some\name') </div><div class="line">C:\some\name </div><div class="line">另外，反斜杠可以作为续行符，表示下一行是上一行的延续。还可以使用"""<span class="comment">#"""或者'''...'''跨越多行。  </span></div><div class="line"><span class="string">"""字符串可以使用 + 运算符串连接在一起，或者用 * 运算符重复：  </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print('str'+'ing', 'my'*3)  </div><div class="line">string mymymy  </div><div class="line">Python中的字符串有两种索引方式，第一种是从左往右，从0开始依次增加；第二种是从右往左，从-1开始依次减少。  </div><div class="line">注意，没有单独的字符类型，一个字符就是长度为1的字符串。  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>word = 'Python'  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(word[0], word[5])  </div><div class="line">P n  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(word[-1], word[-6])  </div><div class="line">n P  </div><div class="line">还可以对字符串进行切片，获取一段子串。用冒号分隔两个索引，形式为变量[头下标:尾下标]。  </div><div class="line">截取的范围是前闭后开的，并且两个索引都可以省略：  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>word = 'ilovepython'  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>word[1:5]  </div><div class="line">'love'  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>word[:]  </div><div class="line">'ilovepython'  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>word[5:]  </div><div class="line">'python'  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>word[-10:-6]  </div><div class="line">'love'  </div><div class="line">与C字符串不同的是，Python字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。  </div><div class="line">注意：  </div><div class="line">1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。  </div><div class="line">2、字符串可以用+运算符连接在一起，用*运算符重复。  </div><div class="line">3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。  </div><div class="line">4、Python中的字符串不能改变。  </div><div class="line">  </div><div class="line">List（列表）  </div><div class="line">List（列表） 是 Python 中使用最频繁的数据类型。  </div><div class="line">列表是写在方括号之间、用逗号分隔开的元素列表。列表中元素的类型可以不相同：  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = ['him', 25, 100, 'her']  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)  </div><div class="line">['him', 25, 100, 'her']  </div><div class="line">和字符串一样，列表同样可以被索引和切片，列表被切片后返回一个包含所需元素的新列表。详细的在这里就不赘述了。  </div><div class="line">列表还支持串联操作，使用+操作符：  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [1, 2, 3, 4, 5]  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a + [6, 7, 8]  </div><div class="line">[1, 2, 3, 4, 5, 6, 7, 8]  </div><div class="line">与Python字符串不一样的是，列表中的元素是可以改变的：  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [1, 2, 3, 4, 5, 6]  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[0] = 9  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[2:5] = [13, 14, 15]  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a  </div><div class="line">[9, 2, 13, 14, 15, 6]  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[2:5] = []   # 删除  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a  </div><div class="line">[9, 2, 6]  </div><div class="line">List内置了有很多方法，例如append()、pop()等等。  </div><div class="line">list.append(x)  把一个元素添加到列表的结尾，相当于 a[len(a):] = [x]。  </div><div class="line">list.extend(L)  通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] = L。  </div><div class="line">list.insert(i, x)   在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。  </div><div class="line">list.remove(x)  删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。  </div><div class="line">list.pop([i])   从列表的指定位置删除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被删除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）  </div><div class="line">list.clear()    移除列表中的所有项，等于del a[:]。  </div><div class="line">list.index(x)   返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。  </div><div class="line">list.count(x)   返回 x 在列表中出现的次数。  </div><div class="line">list.sort() 对列表中的元素进行排序。  </div><div class="line">list.reverse()  倒排列表中的元素。  </div><div class="line">list.copy() 返回列表的浅复制，等于a[:]。  </div><div class="line">注意：  </div><div class="line">1、List写在方括号之间，元素用逗号隔开。  </div><div class="line">2、和字符串一样，list可以被索引和切片。  </div><div class="line">3、List可以使用+操作符进行拼接。  </div><div class="line">4、List中的元素是可以改变的。  </div><div class="line">  </div><div class="line">Tuple（元组）  </div><div class="line">元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。  </div><div class="line">元组中的元素类型也可以不相同：  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = (1991, 2014, 'physics', 'math')  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(a, type(a), len(a))  </div><div class="line">(1991, 2014, 'physics', 'math') &lt;class 'tuple'&gt; 4  </div><div class="line">元组与字符串类似，可以被索引且下标索引从0开始，也可以进行截取/切片（看上面，这里不再赘述）。  </div><div class="line">其实，可以把字符串看作一种特殊的元组。  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tup = (1, 2, 3, 4, 5, 6)  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup[0], tup[1:5])  </div><div class="line">1 (2, 3, 4, 5)  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tup[0] = 11  # 修改元组元素的操作是非法的  </div><div class="line">虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。  </div><div class="line">构造包含0个或1个元素的tuple是个特殊的问题，所以有一些额外的语法规则：  </div><div class="line">tup1 = () # 空元组  </div><div class="line">tup2 = (20,) # 一个元素，需要在元素后添加逗号  </div><div class="line">另外，元组也支持用+操作符：  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tup1, tup2 = (1, 2, 3), (4, 5, 6)  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup1+tup2)  </div><div class="line">(1, 2, 3, 4, 5, 6)  </div><div class="line">string、list和tuple都属于sequence（序列）。  </div><div class="line">注意：  </div><div class="line">1、与字符串一样，元组的元素不能修改。  </div><div class="line">2、元组也可以被索引和切片，方法一样。  </div><div class="line">3、注意构造包含0或1个元素的元组的特殊语法规则。  </div><div class="line">4、元组也可以使用+操作符进行拼接。  </div><div class="line">  </div><div class="line">Sets（集合）  </div><div class="line">集合（set）是一个无序不重复元素的集。  </div><div class="line">基本功能是进行成员关系测试和消除重复元素。  </div><div class="line">可以使用大括号 或者 set()函数创建set集合，注意：创建一个空集合必须用 set() 而不是 &#123; &#125;，因为&#123; &#125;是用来创建一个空字典。  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>student = &#123;'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'&#125;  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(student)   # 重复的元素被自动去掉  </div><div class="line">&#123;'Jim', 'Jack', 'Mary', 'Tom', 'Rose'&#125;  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>'Rose' in student  # membership testing（成员测试）  </div><div class="line">True  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span># set可以进行集合运算  </div><div class="line"><span class="meta">... </span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = set('abracadabra')  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = set('alacazam')  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a  </div><div class="line">&#123;'a', 'b', 'c', 'd', 'r'&#125;  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a - b     # a和b的差集  </div><div class="line">&#123;'b', 'd', 'r'&#125;  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a | b     # a和b的并集  </div><div class="line">&#123;'l', 'm', 'a', 'b', 'c', 'd', 'z', 'r'&#125;  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b     # a和b的交集  </div><div class="line">&#123;'a', 'c'&#125;  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b     # a和b中不同时存在的元素  </div><div class="line">&#123;'l', 'm', 'b', 'd', 'z', 'r'&#125;  </div><div class="line">  </div><div class="line">Dictionaries（字典）  </div><div class="line">字典（dictionary）是Python中另一个非常有用的内置数据类型。  </div><div class="line">字典是一种映射类型（mapping type），它是一个无序的键 : 值对集合。  </div><div class="line">关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。  </div><div class="line">在同一个字典中，关键字还必须互不相同。  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic = &#123;&#125;  # 创建空字典  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel = &#123;'Jack':1557, 'Tom':1320, 'Rose':1886&#125;  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel  </div><div class="line">&#123;'Tom': 1320, 'Jack': 1557, 'Rose': 1886&#125;  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel['Jack']   # 主要的操作：通过key查询  </div><div class="line">1557  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>del tel['Rose']  # 删除一个键值对  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel['Mary'] = 4127  # 添加一个键值对  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel  </div><div class="line">&#123;'Tom': 1320, 'Jack': 1557, 'Mary': 4127&#125;  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(tel.keys())  # 返回所有key组成的list  </div><div class="line">['Tom', 'Jack', 'Mary']  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(tel.keys()) # 按key排序  </div><div class="line">['Jack', 'Mary', 'Tom']  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>'Tom' in tel       # 成员测试  </div><div class="line">True  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>'Mary' not in tel  # 成员测试  </div><div class="line">False  </div><div class="line">构造函数 dict() 直接从键值对sequence中构建字典，当然也可以进行推导，如下：  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])  </div><div class="line">&#123;'jack': 4098, 'sape': 4139, 'guido': 4127&#125;  </div><div class="line">  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x**2 for x in (2, 4, 6)&#125;  </div><div class="line">&#123;2: 4, 4: 16, 6: 36&#125;  </div><div class="line">  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict(sape=4139, guido=4127, jack=4098)  </div><div class="line">&#123;'jack': 4098, 'sape': 4139, 'guido': 4127&#125;  </div><div class="line">另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。  </div><div class="line">注意：  </div><div class="line">1、字典是一种映射类型，它的元素是键值对。  </div><div class="line">2、字典的关键字必须为不可变类型，且不能重复。  </div><div class="line">3、创建空字典使用&#123; &#125;。  </div><div class="line">"""  </div><div class="line">  </div><div class="line"><span class="comment">#输出  </span></div><div class="line">print(<span class="string">'hello, world'</span>)  </div><div class="line">  </div><div class="line"><span class="comment">#输入  </span></div><div class="line">name = input()  </div><div class="line">  </div><div class="line"><span class="comment"># 获取用户输入的数字  </span></div><div class="line">num = int(input(<span class="string">"请输入一个数字: "</span>))  </div><div class="line">a = float(input(<span class="string">'请输入一个数字:'</span>))  </div><div class="line">  </div><div class="line"><span class="comment">#条件判断if..else  </span></div><div class="line">a = <span class="number">1</span>  </div><div class="line"><span class="keyword">if</span> a &gt;= <span class="number">0</span>:  </div><div class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:  </div><div class="line">        print(<span class="string">'a=0'</span>)  </div><div class="line">    <span class="keyword">else</span>:  </div><div class="line">        print(<span class="string">'a是正数'</span>)  </div><div class="line"><span class="keyword">else</span>:  </div><div class="line">    print(<span class="string">'a是负数'</span>)  </div><div class="line"><span class="comment">#if..elif..else  </span></div><div class="line"><span class="keyword">if</span> a == <span class="number">0</span>:  </div><div class="line">    print(<span class="string">'a=0'</span>)  </div><div class="line"><span class="keyword">elif</span> a &gt; <span class="number">0</span>:  </div><div class="line">    print(<span class="string">'a是正数'</span>)  </div><div class="line"><span class="keyword">else</span>:  </div><div class="line">    print(<span class="string">'a是负数'</span>)  </div><div class="line">  </div><div class="line"><span class="comment">#循环  </span></div><div class="line"><span class="comment">#for...in循环  </span></div><div class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  </div><div class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:  </div><div class="line">    print(num)  </div><div class="line"><span class="comment">#while循环  </span></div><div class="line">i = <span class="number">0</span>  </div><div class="line"><span class="keyword">while</span> i &lt; len(nums):  </div><div class="line">    print(nums[i])  </div><div class="line">    i += <span class="number">1</span>  </div><div class="line">  </div><div class="line"><span class="comment">#pass语句什么都不做。它只在语法上需要一条语句但程序不需要任何操作时使用  </span></div><div class="line"><span class="comment">#break语句可以跳出for和while的循环体。如果你从for或while循环中终止，任何对应的循环else块将不执行。  </span></div><div class="line"><span class="comment">#continue语句被用来告诉Python跳过当前循环块中的剩余语句，然后继续进行下一轮循环。  </span></div><div class="line">  </div><div class="line"><span class="comment">#交换变量  </span></div><div class="line">x = input(<span class="string">'输入 x 值: '</span>)  </div><div class="line">y = input(<span class="string">'输入 y 值: '</span>)  </div><div class="line"><span class="comment"># 不使用临时变量  </span></div><div class="line">x,y = y,x  </div><div class="line">  </div><div class="line"><span class="comment">#文件的读写  </span></div><div class="line"><span class="comment">#由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try ... finally来实现：  </span></div><div class="line"><span class="string">'''''r、w、a为打开文件的基本模式，对应着只读、只写、追加模式； </span></div><div class="line">b、t、+、U这四个字符，与以上的文件打开模式组合使用，二进制模式，文本模式，读写模式、通用换行符，根据实际情况组合使用'''  </div><div class="line"><span class="keyword">try</span>:  </div><div class="line">    f = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)  </div><div class="line">    print(f.read())  </div><div class="line"><span class="keyword">finally</span>:  </div><div class="line">    <span class="keyword">if</span> f:  </div><div class="line">        f.close()  </div><div class="line"><span class="comment">#Python引入了with语句来自动帮我们调用close()方法  </span></div><div class="line"><span class="comment"># 写文件  </span></div><div class="line"><span class="keyword">with</span> open(<span class="string">"test.txt"</span>, <span class="string">"wt"</span>) <span class="keyword">as</span> out_file:  </div><div class="line">    out_file.write(<span class="string">"写入到文件中\n换行了"</span>)  </div><div class="line">  </div><div class="line"><span class="comment"># 读文件  </span></div><div class="line"><span class="keyword">with</span> open(<span class="string">"test.txt"</span>, <span class="string">"rt"</span>) <span class="keyword">as</span> in_file:  </div><div class="line">    text = in_file.read()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python3学习笔记–基础知识&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://cokernut.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://cokernut.top/tags/Python/"/>
    
      <category term="Python3" scheme="http://cokernut.top/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>Git命令</title>
    <link href="http://cokernut.top/2016/09/29/Note/Git%E5%91%BD%E4%BB%A4/"/>
    <id>http://cokernut.top/2016/09/29/Note/Git命令/</id>
    <published>2016-09-28T16:00:00.000Z</published>
    <updated>2016-11-30T06:33:32.708Z</updated>
    
    <content type="html"><![CDATA[<p>Git命令<br><a id="more"></a></p>
<h1 id="git知识点"><a href="#git知识点" class="headerlink" title="git知识点"></a>git知识点</h1><h2 id="用命令行创建一个新的存储库"><a href="#用命令行创建一个新的存储库" class="headerlink" title="用命令行创建一个新的存储库"></a>用命令行创建一个新的存储库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">echo &quot;# Documents&quot; &gt;&gt; README.md</div><div class="line">git init</div><div class="line">git add README.md</div><div class="line">git commit -m &quot;first commit&quot;</div><div class="line">git remote add origin https://github.com/cokernut/Documents.git</div><div class="line">git push -u origin master</div><div class="line">…or push an existing repository from the command line</div><div class="line"></div><div class="line">git remote add origin https://github.com/cokernut/Documents.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<h2 id="Git常用命令备忘"><a href="#Git常用命令备忘" class="headerlink" title="Git常用命令备忘"></a>Git常用命令备忘</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Git配置</div><div class="line">git config --global user.name &quot;robbin&quot;   </div><div class="line">git config --global user.email &quot;fankai@gmail.com&quot;</div><div class="line">git config --global color.ui true</div><div class="line">git config --global alias.co checkout</div><div class="line">git config --global alias.ci commit</div><div class="line">git config --global alias.st status</div><div class="line">git config --global alias.br branch</div><div class="line">git config --global core.editor &quot;mate -w&quot;    # 设置Editor使用textmate</div><div class="line">git config -l  # 列举所有配置</div><div class="line">用户的git配置文件~/.gitconfig</div></pre></td></tr></table></figure>
<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line">查看、添加、提交、删除、找回，重置修改文件</div><div class="line"></div><div class="line">git help &lt;command&gt;  # 显示command的help</div><div class="line">git show            # 显示某次提交的内容</div><div class="line">git show $id</div><div class="line"></div><div class="line">git co  -- &lt;file&gt;   # 抛弃工作区修改</div><div class="line">git co  .           # 抛弃工作区修改</div><div class="line"></div><div class="line">git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区</div><div class="line">git add .           # 将所有修改过的工作文件提交暂存区</div><div class="line"></div><div class="line">git rm &lt;file&gt;       # 从版本库中删除文件</div><div class="line">git rm &lt;file&gt; --cached  # 从版本库中删除文件，但不删除文件</div><div class="line"></div><div class="line">git reset &lt;file&gt;    # 从暂存区恢复到工作文件</div><div class="line">git reset -- .      # 从暂存区恢复到工作文件</div><div class="line">git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</div><div class="line"></div><div class="line">git ci &lt;file&gt;</div><div class="line">git ci .</div><div class="line">git ci -a           # 将git add, git rm和git ci等操作都合并在一起做</div><div class="line">git ci -am &quot;some comments&quot;</div><div class="line">git ci --amend      # 修改最后一次提交记录</div><div class="line"></div><div class="line">git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</div><div class="line">git revert HEAD     # 恢复最后一次提交的状态</div><div class="line">查看文件diff</div><div class="line"></div><div class="line">git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异</div><div class="line">git diff</div><div class="line">git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异</div><div class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 </div><div class="line">git diff --staged   # 比较暂存区和版本库差异</div><div class="line">git diff --cached   # 比较暂存区和版本库差异</div><div class="line">git diff --stat     # 仅仅比较统计信息</div><div class="line">查看提交记录</div><div class="line"></div><div class="line">git log</div><div class="line">git log &lt;file&gt;      # 查看该文件每次提交记录</div><div class="line">git log -p &lt;file&gt;   # 查看每次详细修改内容的diff</div><div class="line">git log -p -2       # 查看最近两次详细修改内容的diff</div><div class="line">git log --stat      # 查看提交统计信息</div><div class="line">tig</div><div class="line"></div><div class="line">Mac上可以使用tig代替diff和log，brew install tig</div><div class="line"></div><div class="line">Git 本地分支管理</div><div class="line">查看、切换、创建和删除分支</div><div class="line"></div><div class="line">git br -r           # 查看远程分支</div><div class="line">git br &lt;new_branch&gt; # 创建新的分支</div><div class="line">git br -v           # 查看各个分支最后提交信息</div><div class="line">git br --merged     # 查看已经被合并到当前分支的分支</div><div class="line">git br --no-merged  # 查看尚未被合并到当前分支的分支</div><div class="line"></div><div class="line">git co &lt;branch&gt;     # 切换到某个分支</div><div class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</div><div class="line">git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch</div><div class="line"></div><div class="line">git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</div><div class="line">git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支</div><div class="line"></div><div class="line">git br -d &lt;branch&gt;  # 删除某个分支</div><div class="line">git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</div><div class="line">分支合并和rebase</div><div class="line"></div><div class="line">git merge &lt;branch&gt;               # 将branch分支合并到当前分支</div><div class="line">git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交</div><div class="line"></div><div class="line">git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：</div><div class="line">git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</div><div class="line">Git补丁管理(方便在多台机器上开发同步时用)</div><div class="line">git diff &gt; ../sync.patch         # 生成补丁</div><div class="line">git apply ../sync.patch          # 打补丁</div><div class="line">git apply --check ../sync.patch  # 测试补丁能否成功</div><div class="line">Git暂存管理</div><div class="line">git stash                        # 暂存</div><div class="line">git stash list                   # 列所有stash</div><div class="line">git stash apply                  # 恢复暂存的内容</div><div class="line">git stash drop                   # 删除暂存区</div><div class="line">Git远程分支管理</div><div class="line">git pull                         # 抓取远程仓库所有分支更新并合并到本地</div><div class="line">git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</div><div class="line">git fetch origin                 # 抓取远程仓库更新</div><div class="line">git merge origin/master          # 将远程主分支合并到本地当前分支</div><div class="line">git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支</div><div class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上</div><div class="line"></div><div class="line">git push                         # push所有分支</div><div class="line">git push origin master           # 将本地主分支推到远程主分支</div><div class="line">git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</div><div class="line">git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名</div><div class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支</div><div class="line">git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</div><div class="line">Git远程仓库管理</div><div class="line">git remote -v                    # 查看远程服务器地址和仓库名称</div><div class="line">git remote show origin           # 查看远程服务器仓库状态</div><div class="line">git remote add origin git@github:robbin/robbin_site.git         # 添加远程仓库地址</div><div class="line">git remote set-url origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)</div><div class="line">git remote rm &lt;repository&gt;       # 删除远程仓库</div><div class="line">创建远程仓库</div><div class="line"></div><div class="line">git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库</div><div class="line">scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上</div><div class="line"></div><div class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</div><div class="line">git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址</div><div class="line">git push -u origin master                                      # 客户端首次提交</div><div class="line">git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track</div><div class="line"></div><div class="line">git remote set-head origin master   # 设置远程仓库的HEAD指向master分支</div><div class="line">也可以命令设置跟踪远程库和本地库</div><div class="line"></div><div class="line">git branch --set-upstream master origin/master</div><div class="line">git branch --set-upstream develop origin/develop</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git命令&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://cokernut.top/categories/Git/"/>
    
    
      <category term="Git" scheme="http://cokernut.top/tags/Git/"/>
    
      <category term="GitHub" scheme="http://cokernut.top/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown基础语法学习与练习</title>
    <link href="http://cokernut.top/2016/09/18/Note/MarkDown%E8%AF%AD%E6%B3%95/"/>
    <id>http://cokernut.top/2016/09/18/Note/MarkDown语法/</id>
    <published>2016-09-17T16:00:00.000Z</published>
    <updated>2016-11-30T06:31:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>MarkDown基础语法学习与练习<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 <code>function_name()</code> 实现</p>
<p>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">```javascript</div><div class="line">$(document).ready(function () &#123;</div><div class="line">    alert(&apos;hello world&apos;);</div><div class="line">&#125;); </div><div class="line">```</div></pre></td></tr></table></figure>
<p>支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml</p>
<p>也可以使用 4 空格缩进，再贴上代码，实现相同的的效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def g(x):</div><div class="line">    yield from range(x, 0, -1)</div><div class="line">yield from range(x)</div></pre></td></tr></table></figure></p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>文章内容较多时，可以用标题分段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">标题1</div><div class="line">======</div><div class="line"></div><div class="line">标题2</div><div class="line">-----</div><div class="line"></div><div class="line">## 大标题 ##</div><div class="line">### 小标题 ###</div></pre></td></tr></table></figure></p>
<h2 id="粗斜体"><a href="#粗斜体" class="headerlink" title="粗斜体"></a>粗斜体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*斜体文本*    _斜体文本_</div><div class="line">**粗体文本**    __粗体文本__</div><div class="line">***粗斜体文本***    ___粗斜体文本___</div></pre></td></tr></table></figure>
<h2 id="字体大小、颜色"><a href="#字体大小、颜色" class="headerlink" title="字体大小、颜色"></a>字体大小、颜色</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</div><div class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</div><div class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</div><div class="line">&lt;font color=#0099ff size=7 face=&quot;黑体&quot;&gt;color=#0099ff size=72 face=&quot;黑体&quot;&lt;/font&gt;</div><div class="line">&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;</div><div class="line">&lt;font color=gray size=72&gt;color=gray&lt;/font&gt;</div><div class="line"></div><div class="line">&lt;small&gt;字体变小&lt;/small&gt;</div><div class="line">&lt;big&gt;字体变大&lt;/big&gt;</div></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>常用链接方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">文字链接 [链接名称](http://链接网址)</div><div class="line">网址链接 &lt;http://链接网址&gt;</div></pre></td></tr></table></figure></p>
<p>高级链接技巧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">这个链接用 1 作为网址变量 [Google][1].</div><div class="line">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</div><div class="line">然后在文档的结尾为变量赋值（网址）</div><div class="line"></div><div class="line">  [1]: http://www.google.com/</div><div class="line">  [yahoo]: http://www.yahoo.com/</div></pre></td></tr></table></figure></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>普通无序列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- 列表文本前使用 [减号+空格]</div><div class="line">+ 列表文本前使用 [加号+空格]</div><div class="line">* 列表文本前使用 [星号+空格]</div></pre></td></tr></table></figure></p>
<p>普通有序列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 列表前使用 [数字+空格]</div><div class="line">2. 我们会自动帮你添加数字</div><div class="line">7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</div></pre></td></tr></table></figure></p>
<p>列表嵌套<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1. 列出所有元素：</div><div class="line">    - 无序列表元素 A</div><div class="line">        1. 元素 A 的有序子列表</div><div class="line">    - 前面加四个空格</div><div class="line">2. 列表里的多段换行：</div><div class="line">    前面必须加四个空格，</div><div class="line">    这样换行，整体的格式不会乱</div><div class="line">3. 列表里引用：</div><div class="line"></div><div class="line">    &gt; 前面空一行</div><div class="line">    &gt; 仍然需要在 &gt;  前面加四个空格</div><div class="line"></div><div class="line">4. 列表里代码段：</div><div class="line"></div><div class="line">    前面四个空格，之后按代码语法 ``` 书写</div><div class="line">    或者直接空八个，引入代码块</div></pre></td></tr></table></figure></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>使用 — 或者 <em>** 或者 </em> <em> </em> 表示水平分割线。</p>
<h2 id="次常用标记"><a href="#次常用标记" class="headerlink" title="次常用标记"></a>次常用标记</h2><p>使用 标签: 或者 Tags: 表示标签标记。</p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用 ~~ 表示删除线。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~~这是一条删除线~~</div></pre></td></tr></table></figure>
<p>1.注意 ~~ 和 要添加删除线的文字之间不能有空格。<br>2.我常使用在显示的告诉自己这行文字是要删除的。</p>
<h3 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h3><p>使用 [^footer] 表示注脚。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这是一个注脚测试[^footer1]。</div><div class="line">[^footer1]: 这是一个测试，用来阐释注脚。</div></pre></td></tr></table></figure>
<h2 id="不常用标记"><a href="#不常用标记" class="headerlink" title="不常用标记"></a>不常用标记</h2><h3 id="实现页内跳转"><a href="#实现页内跳转" class="headerlink" title="实现页内跳转"></a>实现页内跳转</h3><p>使用html代码实现页内跳转。在要跳转到的位置定义个锚 <span id="jump">hehe</span> ，然后使用 <a href="#jump">你好</a> 将 你好 设置为一单击即跳转到 hehe 所在位置的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[你好](#jump)</div><div class="line">&lt;span id = &quot;jump&quot;&gt;hehe&lt;/span&gt;</div></pre></td></tr></table></figure></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>具体使用方式请看示例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">------: 为右对齐。</div><div class="line">:------ 为左对齐。</div><div class="line">:------: 为居中对齐。</div><div class="line">------- 为使用默认居中对齐。</div></pre></td></tr></table></figure></p>
<p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">|  序号   |  交易名 |     交易说明    |   备注    |</div><div class="line">|--------:|:------:|:---------------|-----------|</div><div class="line">|    1    | prfcfg | 菜单配置        |    无     |</div><div class="line">|    2    | gentmo | 编译所有交易    |    无     |</div><div class="line">| 100000  | sysdba | 数据库表模型汇总 |    无     |</div></pre></td></tr></table></figure></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>每个Markdown解析器都不一样，可能左右居中对齐方式的表示方式不一样。</p>
<h2 id="反斜杠转义"><a href="#反斜杠转义" class="headerlink" title="反斜杠转义"></a>反斜杠转义</h2><p>*literal asterisks*<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</div><div class="line">\   反斜线</div><div class="line">`   反引号</div><div class="line">*   星号</div><div class="line">_   底线</div><div class="line">&#123;&#125;  花括号</div><div class="line">[]  方括号</div><div class="line">()  括弧</div><div class="line">#   井字号</div><div class="line">+   加号</div><div class="line">-   减号</div><div class="line">.   英文句点</div><div class="line">!   惊叹号</div></pre></td></tr></table></figure></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>普通引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; 引用文本前使用 [大于号+空格]</div><div class="line">&gt; 折行可以不加，新起一行都要加上哦</div></pre></td></tr></table></figure></p>
<p>引用里嵌套引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; 最外层引用</div><div class="line">&gt; &gt; 多一个 &gt; 嵌套一层引用</div><div class="line">&gt; &gt; &gt; 可以嵌套很多层</div></pre></td></tr></table></figure></p>
<p>引用里嵌套列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; - 这是引用里嵌套的一个列表</div><div class="line">&gt; - 还可以有子列表</div><div class="line">&gt;     * 子列表需要从 - 之后延后四个空格开始</div></pre></td></tr></table></figure></p>
<p>引用里嵌套代码块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;     同样的，在前面加四个空格形成代码块</div><div class="line">&gt;     或者使用 ``` 形成代码块</div></pre></td></tr></table></figure></p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>跟链接的方法区别在于前面加了个感叹号 !，这样是不是觉得好记多了呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![图片名称](http://图片网址)</div></pre></td></tr></table></figure></p>
<p>当然，你也可以像网址那样对图片网址使用变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">这个链接用 1 作为网址变量 [Google][1].</div><div class="line">然后在文档的结尾位变量赋值（网址）</div><div class="line"></div><div class="line"> [1]: http://www.google.com/logo.png</div></pre></td></tr></table></figure></p>
<p>也可以使用 HTML 的图片语法来自定义图片的宽高大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;htt://example.com/sample.png&quot; alt=&quot;alt&quot; Title=&quot;title&quot; width=&quot;400&quot; height=&quot;100&quot;&gt;</div></pre></td></tr></table></figure></p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>如果另起一行，只需在当前行结尾加 2 个空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在当前行的结尾加 2 个空格  </div><div class="line">这行就会新起一行</div></pre></td></tr></table></figure></p>
<p>如果是要起一个新段落，只需要空出一行即可。</p>
<h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><p>如果你有写分割线的习惯，可以新起一行输入三个减号-。当前后都有段落时，请空出一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">前面的段落</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">后面的段落</div></pre></td></tr></table></figure></p>
<h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><p>行内 HTML 元素</p>
<p>目前只支持部分段内 HTML 元素效果，包括:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;kdb&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</div></pre></td></tr></table></figure></p>
<p>如 : 键位显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">使用 &lt;kbd&gt;Ctrl&lt;kbd&gt;+&lt;kbd&gt;Alt&lt;kbd&gt;+&lt;kbd&gt;Del&lt;kbd&gt; 重启电脑</div></pre></td></tr></table></figure></p>
<p>代码块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">使用 &lt;pre&gt;&lt;/pre&gt; 元素同样可以形成代码块</div></pre></td></tr></table></figure></p>
<p>粗斜体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;b&gt; Markdown 在此处同样适用，如 *加粗* &lt;/b&gt;</div></pre></td></tr></table></figure></p>
<h2 id="符号转义"><a href="#符号转义" class="headerlink" title="符号转义"></a>符号转义</h2><p>如果你的描述中需要用到 markdown 的符号，比如 <em> # * 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 \</em> # * 进行避免。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">\_不想这里的文本变斜体\_</div><div class="line">\*\*不想这里的文本被加粗\*\*</div></pre></td></tr></table></figure></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>支持 jsfiddle、gist、runjs、优酷视频，直接填写 url，在其之后会自动添加预览点击会展开相关内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://&#123;url_of_the_fiddle&#125;/embedded/[&#123;tabs&#125;/[&#123;style&#125;]]/</div><div class="line">https://gist.github.com/&#123;gist_id&#125;</div><div class="line">http://runjs.cn/detail/&#123;id&#125;</div><div class="line">http://v.youku.com/v_show/id_&#123;video_id&#125;.html</div></pre></td></tr></table></figure></p>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$$ x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;. $$</div><div class="line"></div><div class="line">$$</div><div class="line">x \href&#123;why-equal.html&#125;&#123;=&#125; y^2 + 1</div><div class="line">$$</div></pre></td></tr></table></figure></p>
<p>同时也支持 HTML 属性，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$$ (x+1)^2 = \class&#123;hidden&#125;&#123;(x+1)(x+1)&#125; $$</div><div class="line"></div><div class="line">$$</div><div class="line">(x+1)^2 = \cssId&#123;step1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</div><div class="line">$$</div></pre></td></tr></table></figure></p>
<h1 id="MarkDown练习"><a href="#MarkDown练习" class="headerlink" title="MarkDown练习"></a>MarkDown练习</h1><h1 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h1><h2 id="头部-1"><a href="#头部-1" class="headerlink" title="头部"></a>头部</h2><h2 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h2><ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>
<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze</li>
</ul>
<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>
<ol>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol>
<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>
<h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><h3 id="不指定语言"><a href="#不指定语言" class="headerlink" title="不指定语言"></a>不指定语言</h3><p><code>java code</code></p>
<h3 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'hello world'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="链接-1"><a href="#链接-1" class="headerlink" title="链接"></a>链接</h2><p><a href="&quot;www.baidu.com&quot;">baidu</a></p>
<p><a href="http://www.baidu.com/" target="_blank" rel="external">http://www.baidu.com/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">常用链接方法</div><div class="line"></div><div class="line">文字链接 [链接名称](http://链接网址)</div><div class="line">网址链接 &lt;http://链接网址&gt;</div><div class="line">高级链接技巧</div><div class="line"></div><div class="line">这个链接用 1 作为网址变量 [Google][1].</div><div class="line">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</div><div class="line">然后在文档的结尾为变量赋值（网址）</div><div class="line"></div><div class="line">[1]: http://www.google.com/</div><div class="line">[yahoo]: http://www.yahoo.com/</div></pre></td></tr></table></figure></p>
<h2 id="图片-1"><a href="#图片-1" class="headerlink" title="图片"></a>图片</h2><p><img src="http://www.86ps.com/uploadfiles/jpg/2011-11/2011111414003220188.jpg" alt="alt text" title="Title"><br><img src="http://www.86ps.com/uploadfiles/jpg/2011-11/2011111414003220188.jpg" width="40%"><br><img src="http://img2.3lian.com/2014/c7/12/d/77.jpg" alt="图片名称" title="风景" width="256" height="256"></p>
<blockquote>
<p>引用</p>
</blockquote>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><em>斜体文本</em>    <em>斜体文本</em></p>
<p><strong>粗体文本</strong>    <strong>粗体文本</strong></p>
<p><strong><em>粗斜体文本</em></strong>    <strong><em>粗斜体文本</em></strong></p>
<h2 id="表格-1"><a href="#表格-1" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>dog</th>
<th>bird</th>
<th>cat</th>
</tr>
</thead>
<tbody>
<tr>
<td>foo</td>
<td>foo</td>
<td>foo</td>
</tr>
<tr>
<td>bar</td>
<td>bar</td>
<td>bar</td>
</tr>
<tr>
<td>baz</td>
<td>baz</td>
<td>baz</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MarkDown基础语法学习与练习&lt;br&gt;
    
    </summary>
    
      <category term="MarkDown" scheme="http://cokernut.top/categories/MarkDown/"/>
    
    
      <category term="MarkDown" scheme="http://cokernut.top/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>使用Pelican+GitHub Pages搭建静态博客</title>
    <link href="http://cokernut.top/2016/09/09/Note/%E4%BD%BF%E7%94%A8Pelican+GitHub%20Pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://cokernut.top/2016/09/09/Note/使用Pelican+GitHub Pages搭建静态博客/</id>
    <published>2016-09-08T16:00:00.000Z</published>
    <updated>2016-11-28T09:59:34.363Z</updated>
    
    <content type="html"><![CDATA[<p>使用Pelican+GitHub Pages搭建静态博客<br><a id="more"></a></p>
<h2 id="Pelican介绍"><a href="#Pelican介绍" class="headerlink" title="Pelican介绍"></a>Pelican介绍</h2><p>什么是Pelican</p>
<p>Perlican 是用Python实现的一个静态网站生成器，支持 reStructuredText 或 Markdown 。它支持以下功能：</p>
<ul>
<li>博客文章和静态网页</li>
<li>支持评论。评论是通过第三方服务 Disqus 支持的。即评论数据保存在第三方服务器上</li>
<li>主题支持</li>
<li>把博客文章生成PDF格式文档</li>
<li>多语言博客支持，如可以用英文和中文写同一篇博客。不同语言访问者访问相应语言的博文</li>
<li>支持Atom/RSS订阅</li>
<li>博文中代码高亮支持</li>
<li>博客搬家支持(WordPress, Dotclear, 或RSS feeds)</li>
<li>支持插件，如Twiter, Google Analytics等</li>
</ul>
<h2 id="为什么选择Pelican"><a href="#为什么选择Pelican" class="headerlink" title="为什么选择Pelican"></a>为什么选择Pelican</h2><p>首先排除掉WordPress之类的CMS系统。因为我不想要数据库，我只需要一个轻量级的静态网站生成器。我的博客使用Markdown编写，且保存在GitHub上。我想要的，只是用Markdown写完博客之后，git commit + git push即可直接发布到博客网站上。</p>
<p>选择Pelican是基于如下原因：<br>使用Python实现。由于最近在学习Python，我可以阅读源码并按照我的需求来改造Pelican使之完全符合我的需求。下次学习Ruby，用 jekyll 再折腾一遍。因为Jekyll是用Ruby实现的。且GitHub Pages的后台就是用Jekyll，到时可直接用GitHub Pages实现个人博客。<br>足够轻量级。总的代码量才1MB多。安装也方便。<br>有一堆现成的主题可以使用。这对我这种非专业前端的开发者来说，省了不少事。<br>文档齐全。<br>开发活动活跃。GitHub上代码提交活跃。上面文章里介绍的很多博客系统基本上都2+年前就停止更新了。<br>最后两点对使用任何开源工具来说都是很重要的，只有开发活跃，社区资源多，文档齐全，遇到问题的时候才能较快地得到解决。</p>
<h2 id="Pelican安装与配置"><a href="#Pelican安装与配置" class="headerlink" title="Pelican安装与配置"></a>Pelican安装与配置</h2><p>安装Pelican并创建项目</p>
<p>详细的信息可以参阅 Pelican官方文档 。假设电脑上已经安装Python和pip。首先，通过pip安装pelican和markdown：</p>
<p>pip install pelican markdown<br>然后创建你的博客项目：</p>
<p>mkdir ~/blogs<br>cd ~/blogs<br>pelican-quickstart<br>在运行pelican-quickstart时，系统会问一系列问题，比如你的博客网址啊，作者名字啊之类的，根据真实情况填写即可，这些问题只是用来生成配置文件的，我们后面都可以通过修改配置文件来手动修改这些设置。我填写的内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Cokernut@Cokernut-laptop:~/lab/blogs$ pelican-quickstart</div><div class="line">Welcome to pelican-quickstart v3.4.0.</div><div class="line"></div><div class="line">This script will help you create a new Pelican-based website.</div><div class="line"></div><div class="line">Please answer the following questions so this script can generate the files</div><div class="line">needed by Pelican.</div><div class="line"></div><div class="line">&gt; Where do you want to create your new web site? [.]</div><div class="line">&gt; What will be the title of this web site? Cokernut</div><div class="line">&gt; Who will be the author of this web site? Cokernut</div><div class="line">&gt; What will be the default language of this web site? [en]</div><div class="line">&gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n)</div><div class="line">&gt; What is your URL prefix? (see above example; no trailing slash) http://cokernut.top</div><div class="line">&gt; Do you want to enable article pagination? (Y/n) Y</div><div class="line">&gt; How many articles per page do you want? [10]</div><div class="line">&gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y</div><div class="line">&gt; Do you want an auto-reload &amp; simpleHTTP script to assist with theme and site development? (Y/n)</div><div class="line">&gt; Do you want to upload your website using FTP? (y/N) N</div><div class="line">&gt; Do you want to upload your website using SSH? (y/N) y</div><div class="line">&gt; What is the hostname of your SSH server? [localhost]/cokernut.top</div><div class="line">&gt; What is the port of your SSH server? [22]</div><div class="line">&gt; What is your username on that server? [root] file</div><div class="line">&gt; Where do you want to put your web site on that server? [/var/www] /home/file/blogs</div><div class="line">&gt; Do you want to upload your website using Dropbox? (y/N) N</div><div class="line">&gt; Do you want to upload your website using S3? (y/N) N</div><div class="line">&gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) N</div><div class="line">&gt; Do you want to upload your website using GitHub Pages? (y/N) N</div><div class="line">Done. Your new project is available at /home/Cokernut/blogs</div></pre></td></tr></table></figure></p>
<p>其中第14行的 <a href="http://cokernut.top">http://cokernut.top</a> 以及第21行的cokernut.top 是我的域名，如果你只是在本机试验，可以填localhost。创建完项目后，目录下看起来象这样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Cokernut@Cokernut-laptop:~/lab/blogs$ tree</div><div class="line">.</div><div class="line">├── content     # 这个就是放博客内容目录，这个目录及子目录下的所有md和rst文件将会被转成html文件</div><div class="line">├── develop_server.sh   #这个是用来在本地运行一个服务器来实时查看生成的html文档的脚本</div><div class="line">├── fabfile.py  # 这个是使用Python的fabric来实现文件上传的工具，即Deploy工具</div><div class="line">├── Makefile    # 这个是使用是用来生成网站内容并上传的工具。后文详细解释</div><div class="line">├── output      # 这个是从content目录生成的html目标文件的存放目录</div><div class="line">├── pelicanconf.py      # 这个是本地开发时的配置文件</div><div class="line">└── publishconf.py      # 这个是发布时的配置文件</div></pre></td></tr></table></figure></p>
<p>2 directories, 5 files<br>配置pelicanconf.py和publishconf.py</p>
<p>Pelican的配置文件是直接用Python写的，我本地开发配置文件 pelicanconf.py 内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*- #</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line">AUTHOR = <span class="string">u'Cokernut'</span></div><div class="line">SITENAME = <span class="string">u"cokernut.top"</span></div><div class="line">SITEURL = <span class="string">'http://localhost'</span></div><div class="line">DISQUS_SITENAME = <span class="string">'Cokernut'</span></div><div class="line">PATH = <span class="string">'content'</span></div><div class="line">TIMEZONE = <span class="string">'Asia/Shanghai'</span></div><div class="line">DEFAULT_LANG = <span class="string">u'zh_CN'</span></div><div class="line">DEFAULT_DATE_FORMAT = (<span class="string">'%Y-%m-%d(%A) %H:%M'</span>)</div><div class="line">USE_FOLDER_AS_CATEGORY = <span class="keyword">True</span></div><div class="line">DEFAULT_CATEGORY = <span class="string">'hide'</span></div><div class="line"><span class="comment"># Feed generation is usually not desired when developing</span></div><div class="line">FEED_ATOM = <span class="string">'feeds/atom.xml'</span></div><div class="line">FEED_RSS = <span class="string">'feeds/rss.xml'</span></div><div class="line">FEED_ALL_ATOM = <span class="keyword">None</span></div><div class="line">FEED_ALL_RSS = <span class="keyword">None</span></div><div class="line">CATEGORY_FEED_ATOM = <span class="keyword">None</span></div><div class="line">TRANSLATION_FEED_ATOM = <span class="keyword">None</span></div><div class="line"><span class="comment"># menu items</span></div><div class="line">MENUITEMS = [(<span class="string">'Home'</span>, SITEURL),</div><div class="line">      (<span class="string">'About'</span>, <span class="string">'about.html'</span>),]</div><div class="line">DEFAULT_PAGINATION = <span class="number">10</span></div><div class="line">MD_EXTENSIONS = [</div><div class="line">  <span class="string">"extra"</span>,</div><div class="line">  <span class="string">"toc"</span>,</div><div class="line">  <span class="string">"headerid"</span>,</div><div class="line">  <span class="string">"meta"</span>,</div><div class="line">  <span class="string">"sane_lists"</span>,</div><div class="line">  <span class="string">"smarty"</span>,</div><div class="line">  <span class="string">"wikilinks"</span>,</div><div class="line">  <span class="string">"admonition"</span>,</div><div class="line">  <span class="string">"codehilite(guess_lang=False,pygments_style=emacs,noclasses=True)"</span>]</div><div class="line">CNZZ_ANALYTICS = <span class="keyword">True</span></div><div class="line">MONTH_ARCHIVE_SAVE_AS = <span class="string">'posts/&#123;date:%Y&#125;/&#123;date:%m&#125;/index.html'</span></div><div class="line">THEME = <span class="string">"themes/foundation-default-colours"</span></div></pre></td></tr></table></figure></p>
<p>第6行的SITENAME是博客网站的名称，可以是任何字符；第7行是博客网站的网址，这个字段在本地开发和发布版本是不一样的，本地直接填localhost即可，发布版本里需要填博客网址。<br>第8行：我使用了Disqus作为我的评论系统，Disqus也是 YC 毕业生。启用Disqus评论系统非常简单，在官网上注册一个Disqus帐户，然后把帐户名填在 DISQUS_SITENAME 值里即可启用。我的Disqus帐号刚好也是 Cokernut 。<br>第33－42行：这里是配置Markdown扩展，用来支持代码高亮。并且使用Emacs风格的代码高亮。<br>第44行：由于GFW的存在，我把Google Analize换成了国内的CNZZ统计。<br>第46行：我的博客使用了 foundation-default-colours 这套主题。关于主题，后文详解。<br>开发环境和发布环境的配置差不多，除SITEURL不一样外，还多了两个配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SITEURL = &apos;http://cokernut.top&apos;</div><div class="line"># usful setting for publish</div><div class="line">RELATIVE_URLS = False   # 禁用相对路径引用</div><div class="line">DELETE_OUTPUT_DIRECTORY = True      # 编译之前删除output目录，这样保证output下生成的内容是干净的</div><div class="line">其它的配置项，可以参阅 Pelican设置文档 。</div></pre></td></tr></table></figure></p>
<h3 id="配置Makefile"><a href="#配置Makefile" class="headerlink" title="配置Makefile"></a>配置Makefile</h3><p>撰写完博客，并在本地预览后，需要发布到服务器上。我使用Makefile的形式来生成文档并发布。我的Makefile核心代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/makefile</div><div class="line">SSH_HOST/cokernut.top</div><div class="line">SSH_PORT=22</div><div class="line">SSH_USER=ubuntu</div><div class="line">SSH_TARGET_DIR=/home/ubuntu/blogs/</div><div class="line">SSH_KEY=/home/Cokernut/work/aws/Cokernut-key-tokyo.pem</div><div class="line"></div><div class="line">rsync_upload: publish</div><div class="line">    rsync -e &quot;ssh -p $(SSH_PORT) -i $(SSH_KEY)&quot; -P -rvzc --delete $(OUTPUTDIR)/ $(SSH_USER)@$(SSH_HOST):$(SSH_TARGET_DIR) --cvs-exclude</div></pre></td></tr></table></figure></p>
<p>第2－4行：指定了要上传内容的目的服务器的地址，端口以及用户名<br>第5行：指定了远程服务器上保存博客内容的目录<br>第6行：我添加的SSH Identity文件路径。这是因为Amazon EC2登录时我是用SSH Identity文件登录的，而不是使用用户名和密码<br>第8-9行：我使用rsync来进行上传操作。rsync可以在本地和远程服务器之间同步文件。同步过程中只同步那些改变了的文件，且传输过程中会压缩数据，它比scp要所需要的带宽要小。这里要注意的是，我在默认生成的Makefile上增加了 -i $(SSH_KEY) ，这个就是指定SSH Identity文件登录远程SSH的方法。</p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>Pelican支持大量的开源主题，GitHub上的 pelican-themes 项目有几十套主题，大部分都带了效果预览图。可以从里面挑一个你喜欢的主题样式来使用。还有一个更方便的挑选主题的方式，直接打开 www.pelicanthemes.com 挑选吧。一个网页里就列出了几乎所有的主题。我的博客是使用 foundation-default-colours 主题，并在这套主题的基础上进行了一些定制。选定好喜欢的主题后，从GitHub上下载下来所有的主题：</p>
<p>mkdir ~/pelican<br>cd ~/pelican<br>git clone <a href="https://github.com/getpelican/pelican-themes.git" target="_blank" rel="external">https://github.com/getpelican/pelican-themes.git</a><br>从里面拷贝一份你选中的主题到项目根目录的 themes 目录下，在本文的例子中是 ~/lab/blogs/themes 。然后在 pelicanconf.py 和 publishconf.py 里通过下面代码指定博客主题：</p>
<p>THEME = “themes/foundation-default-colours”<br>通常的做法是，选中一个自己喜欢的主题后，会进行一些定制。Pelican使用 Jinja2 来配置主题。一个主题的典型结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">├── static</div><div class="line">│   ├── css</div><div class="line">│   └── images</div><div class="line">└── templates</div><div class="line">  ├── analytics_cnzz.html // 这个是我添加的使用cnzz的统计服务的代码</div><div class="line">  ├── analytics.html    // 这是Google Analytics的代码</div><div class="line">  ├── archives.html      // 这个是博客归档页面的模板</div><div class="line">  ├── article.html        // 这个是博客正文的显示模板</div><div class="line">  ├── base.html          // 这个是所有页面的父类模板，即所有页面都引用这个页面。比如网页导航栏啊之类的，都定义在这里</div><div class="line">  ├── categories.html  // 所有博客文章的分类列表</div><div class="line">  ├── category.html      // 某个博客分类的文章列表模板</div><div class="line">  ├── index.html        // 主页</div><div class="line">  ├── page.html          // 分页显示的模板</div><div class="line">  ├── tag.html            // 某类标签下的文章列表</div><div class="line">  └── tags.html          // 所有的标签列表页面模板</div></pre></td></tr></table></figure></p>
<p>稍微有点Jinja的知识加上一些HTML和CSS的知识，就可以自己定义主题了。</p>
<p>为什么博客主页打开半天都不显示出来</p>
<p>因为GFW封锁了几乎所有和Google相关的网站，这些主题里又用了Google的字体，所以下载这些字体时会导致无法下载成功而半天不显示网页。解决方案很简单，直接修改css文件，不去下载Google字体即可。比如针对 foundation-default-colours 主题，打开主题根目录下的 static/css/foundation.css 和 static/css/foundation.min.css 文件，删除掉 @import url(“//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,700italic,400,300,700”); 内容即可。当然，如果你和你的读者都是翻墙高手，那就不会遇到这个问题了。</p>
<p>下载风格包pelican-themes与插件包pelican-plugins</p>
<blockquote>
<p>git clone git://github.com/getpelican/pelican-themes.git</p>
<p>git clone git://github.com/getpelican/pelican-plugins.git</p>
</blockquote>
<ol>
<li><p>配置pelicanconf.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*- #</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"></div><div class="line"><span class="comment"># Site settings</span></div><div class="line">AUTHOR = <span class="string">u'Cokernut'</span></div><div class="line">AUTHOR_EMAIL = <span class="string">u'Cokernut@foxmail.com'</span></div><div class="line">SITENAME = <span class="string">u'Cokernut'</span></div><div class="line">TAGLINE = <span class="string">'Whatever is worth doing is worth doing well.'</span></div><div class="line">SITEURL = <span class="string">'http://Cokernut.github.io'</span></div><div class="line">DEFAULT_DATE_FORMAT = (<span class="string">'%Y-%m-%d'</span>)</div><div class="line"></div><div class="line">TIMEZONE = <span class="string">'Asia/Shanghai'</span></div><div class="line"></div><div class="line">DEFAULT_LANG = <span class="string">u'zh'</span></div><div class="line">DEFAULT_METADATA = (</div><div class="line">)</div><div class="line"></div><div class="line">DELETE_OUTPUT_DIRECTORY = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># Blogroll</span></div><div class="line">LINKS = (</div><div class="line">  (<span class="string">'HeyLinux'</span>, <span class="string">'http://heylinux.com'</span>),</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># Social widget</span></div><div class="line">SOCIAL = (</div><div class="line">  (<span class="string">'Github'</span>, <span class="string">'http://github.com/Cokernut/...'</span>),</div><div class="line">  (<span class="string">'Twitter'</span>, <span class="string">'http://twitter.com/...'</span>),</div><div class="line">)</div><div class="line"></div><div class="line">MENUITEMS = (</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># Disqus</span></div><div class="line">DISQUS_SITENAME = <span class="string">u"Cokernut"</span></div><div class="line"></div><div class="line"><span class="comment"># Content path</span></div><div class="line">PATH = <span class="string">'content'</span></div><div class="line">PAGE_PATHS = [<span class="string">'pages'</span>]</div><div class="line">ARTICLE_PATHS = [<span class="string">'articles'</span>]</div><div class="line">STATIC_PATHS = [<span class="string">'images'</span>, <span class="string">'files'</span>]</div><div class="line">EXTRA_PATH_METADATA = &#123;</div><div class="line">  <span class="string">'files/robots.txt'</span>: &#123;<span class="string">'path'</span>: <span class="string">'robots.txt'</span>&#125;,</div><div class="line">  <span class="string">'images/favicon.ico'</span>: &#123;<span class="string">'path'</span>: <span class="string">'favicon.ico'</span>&#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># URL settings</span></div><div class="line">PAGINATION_PATTERNS = (</div><div class="line">  (<span class="number">1</span>, <span class="string">'&#123;base_name&#125;/'</span>, <span class="string">'&#123;base_name&#125;/index.html'</span>),</div><div class="line">  (<span class="number">2</span>, <span class="string">'&#123;base_name&#125;/page/'</span>, <span class="string">'&#123;base_name&#125;/page/&#123;number&#125;.html'</span>),</div><div class="line">)</div><div class="line">ARTICLE_URL = (<span class="string">'articles/&#123;slug&#125;.html'</span>)</div><div class="line">ARTICLE_SAVE_AS = (<span class="string">'articles/&#123;slug&#125;.html'</span>)</div><div class="line">PAGE_LANG_SAVE_AS = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># Feed</span></div><div class="line">FEED_DOMAIN = SITEURL</div><div class="line">FEED_ALL_ATOM = <span class="string">'feeds/all.atom.xml'</span></div><div class="line">CATEGORY_FEED_ATOM = <span class="string">'feeds/%s.atom.xml'</span></div><div class="line">TRANSLATION_FEED_ATOM = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="comment"># Theme</span></div><div class="line">THEME = <span class="string">'pelican-themes/zurb-F5-basic'</span></div><div class="line">COVER_BG_COLOR = <span class="string">'#375152'</span></div><div class="line">DEFAULT_PAGINATION = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment"># Plugin</span></div><div class="line">PLUGIN_PATHS = [<span class="string">'pelican-plugins'</span>]</div><div class="line">PLUGINS = [ <span class="string">'sitemap'</span>, <span class="string">'gravatar'</span> ]</div><div class="line"></div><div class="line"><span class="comment"># Sitemap</span></div><div class="line">SITEMAP = &#123;</div><div class="line">  <span class="string">'format'</span>: <span class="string">'xml'</span>,</div><div class="line">  <span class="string">'priorities'</span>: &#123;</div><div class="line">    <span class="string">'articles'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'pages'</span>: <span class="number">0.9</span>,</div><div class="line">    <span class="string">'indexes'</span>: <span class="number">0.8</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'changefreqs'</span>: &#123;</div><div class="line">    <span class="string">'indexes'</span>: <span class="string">'daily'</span>,</div><div class="line">    <span class="string">'articles'</span>: <span class="string">'daily'</span>,</div><div class="line">    <span class="string">'pages'</span>: <span class="string">'weekly'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># Can be useful in development, but set to False when you're ready to publish</span></div><div class="line">RELATIVE_URLS = <span class="keyword">False</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置 publishconf.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*- #</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"></div><div class="line"><span class="comment"># This file is only used if you use `make publish` or</span></div><div class="line"><span class="comment"># explicitly specify it as your config file.</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.path.append(os.curdir)</div><div class="line"><span class="keyword">from</span> pelicanconf <span class="keyword">import</span> *</div><div class="line"></div><div class="line">SITEURL = <span class="string">'http://Cokernut.github.io'</span></div><div class="line">RELATIVE_URLS = <span class="keyword">False</span></div><div class="line"></div><div class="line">FEED_ALL_ATOM = <span class="string">'feeds/all.atom.xml'</span></div><div class="line">CATEGORY_FEED_ATOM = <span class="string">'feeds/%s.atom.xml'</span></div><div class="line"></div><div class="line">DELETE_OUTPUT_DIRECTORY = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># Following items are often useful when publishing</span></div><div class="line"></div><div class="line">DISQUS_SITENAME = <span class="string">u"Cokernut"</span></div><div class="line"><span class="comment">#GOOGLE_ANALYTICS = ""</span></div></pre></td></tr></table></figure>
</li>
<li><p>撰写第一篇文章</p>
</li>
</ol>
<blockquote>
<p>cd content</p>
<p>mkdir articles files images pages</p>
<p>vim articles/hello.md<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Title: Hello</div><div class="line">Date: 2014-09-24 02:06</div><div class="line">Category: Uncategorized</div><div class="line">Tags: Pelican, Markdown</div><div class="line">Slug: hello</div><div class="line">Author: Cokernut</div><div class="line">Summary: Hello Pelican, Markdown and GitHub Pages.</div><div class="line">Status: draft</div><div class="line"></div><div class="line"><span class="section">## 说明</span></div><div class="line">第5行：Slug是文档的唯一标识，生成html时，会直接使用这个值当html的文件名。</div><div class="line">所以，不同博客文章这个值需要保证唯一性，否则生成html时会报错。</div><div class="line">第8行：这个表示本文是草稿。比如我们一篇博客经常不是一次性写完的，</div><div class="line">写了一半暂不想让读者看到，或者写完想让别人帮忙审查一下，就可以加这一行标识。</div><div class="line">这样Pelican在处理时，这篇文章也会生成html，但不会放在博客的主页及分类索引里，</div><div class="line">这样普通的读者一般看不到这个文章。有这个标识的文章生成时放在 output/drafts 目录下，</div><div class="line">你就可以通过分享url的方式让你的co-worker帮你review你的文章。</div><div class="line">我们可以在 content 目录下任意建子目录来组织管理博客文章。</div><div class="line">由于我们在设置文件里指定这个值 USE<span class="emphasis">_FOLDER_</span>AS_CATEGORY = True ，这样这些目录名称就自动变成博文分类的目录了。</div><div class="line"></div><div class="line">Hello Pelican, Markdown and GitHub Pages.</div></pre></td></tr></table></figure></p>
</blockquote>
<ol>
<li>生成robots.txt与favicon.ico vim files/robots.txt</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">User-agent: *</div><div class="line">Sitemap: http://Cokernut.github.io/sitemap.xml</div><div class="line">scp heylinux.com:/webserver/blog/rainbow/favicon.ico .</div></pre></td></tr></table></figure>
<ol>
<li>配置Disqus</li>
</ol>
<p>在 Disqus 上注册一个用户并生成一个站点Cokernut.disqus.com；</p>
<p>设置Cokernut.disqus.com站点使其允许域名Cokernut.github.io；</p>
<p>设置以上配置文件为DISQUS_SITENAME = u”Cokernut”，Cokernut 为站点ID</p>
<ol>
<li>创建GitHub Pages</li>
</ol>
<p>直接创建一个新的repo，但是其名称必须与ID相同，并加上github.io或github.com后缀。</p>
<p>就我而言，就必须创建一个repo名为 Cokernut.github.io</p>
<ol>
<li><p>创建好GitHub Pages之后，生成Blog静态HTML文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cd ~</div><div class="line"></div><div class="line">cd pelican</div><div class="line"></div><div class="line">pelican ./content -o ./output -s ./pelicanconf.py 或者 make html </div><div class="line"></div><div class="line">pelican /home/dong/pelican/content -o /home/dong/pelican/output -s /home/dong/pelican/pelicanconf.py</div><div class="line">WARNING: AUTHOR_SAVE_AS is set to False</div><div class="line">Done: Processed 1 article(s), 0 draft(s) and 0 page(s) in 0.23 seconds.</div></pre></td></tr></table></figure>
</li>
<li><p>进入output目录，将生成好的静态HTML文件上传到GitHub Pages站点Cokernut.github.io中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cd output</div><div class="line"></div><div class="line">git init</div><div class="line"></div><div class="line">git remote add origin https://github.com/Cokernut/Cokernut.github.io.git</div><div class="line"></div><div class="line">git add -A</div><div class="line"></div><div class="line">git commit -m &quot;Update Blog&quot;</div><div class="line"></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
</li>
<li><p>等待15分钟左右，访问 Cokernut.github.io 即可看到生成的网站效果</p>
</li>
<li><p>注意</p>
</li>
</ol>
<p>由于我设置了在重新生成HTML时默认不删除output目录，因此每次更新Blog时都需要手动执行’rm -rf output/*’。</p>
<p>这样做的目的，是为了避免删除output/.git目录，方面在生成之后立刻提交到GitHub Pages。</p>
<p>当然在实际操作当中我是编写了alias和scripts来完成这一系列动作的。</p>
<p>预览博客文章</p>
<p>撰写文章的过程中，可以随时在浏览器里预览博客文章。方法是先在博客项目的根目录下执行下面命令来启动预览服务器：</p>
<p>make devserver<br>这条命令会自动使用 pelicanconf.py 的配置文件来生成html网页，同时在本地的8000端口上启动一个http服务器，供你预览文章。这样，直接打开浏览器，输入 localhost:8000 即可打开本地服务器上的你的博客主页。比如，撰写本文时，我就直接在gedit里码字，然后在浏览器里输入 <a href="http://localhost:8000/drafts/build-blog-system-by-pelican.html" target="_blank" rel="external">http://localhost:8000/drafts/build-blog-system-by-pelican.html</a> 来实时预览效果。需要注意的是，上述命令会在后台持续监听 content 目录下的内容，如果这个目录下的内容发生变化，会自动重新生成html页面。所以，在gedit里写完一段内容，切换到浏览器，直接刷新一下就可以看到最新的结果了。</p>
<p>当文章写完后，需要在博客项目根目录上运行 make stopserver 来停止这个预览服务以及数据监控功能。</p>
<p>文章在主页上没看到？</p>
<p>撰写完文章，需要发布时，需要把 Status: draft 这行元数据去掉。否则文章不会出现在博客主页。只会在drafts下看得到。</p>
<ol>
<li>相关文章、上下文导航</li>
</ol>
<blockquote>
<p>1.打开pelicanconf.py，定义插件目录和启用插件：  </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#加载plugins</span></div><div class="line">PLUGIN_PATH = <span class="string">"plugins"</span></div><div class="line">PLUGINS = [<span class="string">"sitemap"</span>,<span class="string">"neighbors"</span>,<span class="string">"related_posts"</span>]</div><div class="line"><span class="comment">#sitemap</span></div><div class="line">SITEMAP = &#123;</div><div class="line">    <span class="string">'format'</span>: <span class="string">'xml'</span>,</div><div class="line">    <span class="string">'priorities'</span>: &#123;</div><div class="line">        <span class="string">'articles'</span>: <span class="number">0.7</span>,</div><div class="line">        <span class="string">'indexes'</span>: <span class="number">0.8</span>,</div><div class="line">        <span class="string">'pages'</span>: <span class="number">0.5</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">'changefreqs'</span>: &#123;</div><div class="line">        <span class="string">'articles'</span>: <span class="string">'monthly'</span>,</div><div class="line">        <span class="string">'indexes'</span>: <span class="string">'daily'</span>,</div><div class="line">        <span class="string">'pages'</span>: <span class="string">'monthly'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">#相关文章</span></div><div class="line">RELATED_POSTS_MAX = <span class="number">10</span></div></pre></td></tr></table></figure>
<blockquote>
<p>2.邻居导航，在主题模版中调用如下代码，可根据自己的情况修改：  </p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">   &#123;% if article.prev_article %&#125;</div><div class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"prev"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; SITEURL &#125;&#125;/&#123;&#123; article.prev_article.url&#125;&#125;"</span>&gt;</span>← Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">     &#123;% else %&#125;</div><div class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"prev"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>← Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">     &#123;% endif %&#125;</div><div class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/archives.html"</span>&gt;</span>Archive<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">     &#123;% if article.next_article %&#125;</div><div class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; SITEURL &#125;&#125;/&#123;&#123; article.next_article.url&#125;&#125;"</span>&gt;</span>Next →<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">     &#123;% else %&#125;</div><div class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Next →<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">     &#123;% endif %&#125;</div><div class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>3.相关文章：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;% if article.related_posts %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Related Articles<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    &#123;% for related_post in article.related_posts %&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; SITEURL &#125;&#125;/&#123;&#123; related_post.url &#125;&#125;"</span>&gt;</span>&#123;&#123; related_post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    &#123;% endfor %&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Pelican+GitHub Pages搭建静态博客&lt;br&gt;
    
    </summary>
    
      <category term="GitHub" scheme="http://cokernut.top/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://cokernut.top/tags/GitHub/"/>
    
  </entry>
  
</feed>
